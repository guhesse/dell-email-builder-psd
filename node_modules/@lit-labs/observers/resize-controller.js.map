{"version":3,"file":"resize-controller.js","sources":["src/resize-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a ResizeController.\n */\nexport type ResizeValueCallback<T = unknown> = (\n  ...args: Parameters<ResizeObserverCallback>\n) => T;\n\n/**\n * The config options for a ResizeController.\n */\nexport interface ResizeControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the ResizeController.\n   */\n  config?: ResizeObserverOptions;\n  /**\n   * The element to observe. In addition to configuring the target here,\n   * the `observe` method can be called to observe additional targets. When not\n   * specified, the target defaults to the `host`. If set to `null`, no target\n   * is automatically observed. Only the configured target will be re-observed\n   * if the host connects again after unobserving via disconnection.\n   */\n  target?: Element | null;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class ResizeController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _targets = new Set<Element>();\n  private _config?: ResizeObserverOptions;\n  private _observer!: ResizeObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost & Element,\n    {target, config, callback, skipInitial}: ResizeControllerConfig<T>\n  ) {\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target ?? host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(\n        `ResizeController error: browser does not support ResizeObserver.`\n      );\n      return;\n    }\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      this.handleChanges(entries);\n      this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(entries: ResizeObserverEntry[]) {\n    this.value = this.callback?.(entries, this._observer);\n  }\n\n  hostConnected() {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    if (!this._skipInitial && this._unobservedUpdate) {\n      this.handleChanges([]);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Observe the target element. The controller's `target` is automatically\n   * observed when the host connects.\n   * @param target Element to observe\n   */\n  observe(target: Element) {\n    this._targets.add(target);\n    this._observer.observe(target, this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Unobserve the target element.\n   * @param target Element to unobserve\n   */\n  unobserve(target: Element) {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n"],"names":["ResizeController","constructor","host","target","config","callback","skipInitial","this","_targets","Set","_skipInitial","_unobservedUpdate","_host","add","_config","window","ResizeObserver","_observer","entries","handleChanges","requestUpdate","addController","console","warn","value","hostConnected","observe","hostDisconnected","disconnect","hostUpdated","unobserve","delete"],"mappings":"MA4DaA,EAuBX,WAAAC,CACEC,GACAC,OAACA,EAAMC,OAAEA,EAAMC,SAAEA,EAAQC,YAAEA,IAvBrBC,KAAAC,EAAW,IAAIC,IAGfF,KAAYG,GAAG,EAOfH,KAAiBI,GAAG,EAe1BJ,KAAKK,EAAQV,EAEE,OAAXC,GACFI,KAAKC,EAASK,IAAIV,GAAUD,GAE9BK,KAAKO,EAAUV,EACfG,KAAKG,EAAeJ,GAAeC,KAAKG,EACxCH,KAAKF,SAAWA,EAEXU,OAAOC,gBAMZT,KAAKU,EAAY,IAAID,gBAAgBE,IACnCX,KAAKY,cAAcD,GACnBX,KAAKK,EAAMQ,eAAe,IAE5BlB,EAAKmB,cAAcd,OATjBe,QAAQC,KACN,mEASL,CAMS,aAAAJ,CAAcD,GACtBX,KAAKiB,MAAQjB,KAAKF,WAAWa,EAASX,KAAKU,EAC5C,CAED,aAAAQ,GACE,IAAK,MAAMtB,KAAUI,KAAKC,EACxBD,KAAKmB,QAAQvB,EAEhB,CAED,gBAAAwB,GACEpB,KAAKqB,YACN,CAED,iBAAMC,IAICtB,KAAKG,GAAgBH,KAAKI,GAC7BJ,KAAKY,cAAc,IAErBZ,KAAKI,GAAoB,CAC1B,CAOD,OAAAe,CAAQvB,GACNI,KAAKC,EAASK,IAAIV,GAClBI,KAAKU,EAAUS,QAAQvB,EAAQI,KAAKO,GACpCP,KAAKI,GAAoB,EACzBJ,KAAKK,EAAMQ,eACZ,CAMD,SAAAU,CAAU3B,GACRI,KAAKC,EAASuB,OAAO5B,GACrBI,KAAKU,EAAUa,UAAU3B,EAC1B,CAMS,UAAAyB,GACRrB,KAAKU,EAAUW,YAChB"}