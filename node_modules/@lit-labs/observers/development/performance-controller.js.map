{"version":3,"file":"performance-controller.js","sourceRoot":"","sources":["../src/performance-controller.ts"],"names":[],"mappings":"AAwCA;;;;;;;;;;;GAWG;AACH,MAAM,OAAO,qBAAqB;IAsBhC,YACE,IAA4B,EAC5B,EAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAiC;QApBzD,iBAAY,GAAG,KAAK,CAAC;QAC7B;;;;;WAKG;QACK,sBAAiB,GAAG,KAAK,CAAC;QAehC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,IAAI,IAAI,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,yBAAyB;QACzB,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;YAC/B,OAAO,CAAC,IAAI,CACV,4EAA4E,CAC7E,CAAC;YACF,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAmB,CACtC,CAAC,SAAuC,EAAE,EAAE;YAC1C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,CAAC,CAAC;YACtD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC7B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACO,aAAa,CACrB,OAA6B,EAC7B,SAAwC;QAExC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACnE,CAAC;IAED,aAAa;QACX,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,WAAW;QACf,2DAA2D;QAC3D,2EAA2E;QAC3E,uEAAuE;QACvE,mBAAmB;QACnB,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACpD,IACE,cAAc,CAAC,MAAM;YACrB,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAC9C;YACA,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,KAAK;QACH,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACpD,IAAI,cAAc,CAAC,MAAM,EAAE;YACzB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YACnC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;SAC5B;IACH,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACO,UAAU;QAClB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a PerformanceController.\n */\nexport type PerformanceValueCallback<T = unknown> = (\n  entries: PerformanceEntryList,\n  observer: PerformanceObserver,\n  entryList?: PerformanceObserverEntryList\n) => T;\n\n/**\n * The config options for a PerformanceController.\n */\nexport interface PerformanceControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the PerformanceObserver.\n   */\n  config: PerformanceObserverInit;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: PerformanceValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * PerformanceController is a ReactiveController that integrates a\n * PerformanceObserver with a ReactiveControllerHost's reactive update\n * lifecycle. This is typically a ReactiveElement or LitElement.\n * PerformanceObserver can be used to report changes in various metrics about\n * browser and application performance, including marks and measures done with\n * the `performance` API.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class PerformanceController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _config: PerformanceObserverInit;\n  private _observer!: PerformanceObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: PerformanceValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost,\n    {config, callback, skipInitial}: PerformanceControllerConfig<T>\n  ) {\n    this._host = host;\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.PerformanceObserver) {\n      console.warn(\n        `PerformanceController error: browser does not support PerformanceObserver.`\n      );\n      return;\n    }\n    this._observer = new PerformanceObserver(\n      (entryList: PerformanceObserverEntryList) => {\n        this.handleChanges(entryList.getEntries(), entryList);\n        this._host.requestUpdate();\n      }\n    );\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(\n    entries: PerformanceEntryList,\n    entryList?: PerformanceObserverEntryList\n  ) {\n    this.value = this.callback?.(entries, this._observer, entryList);\n  }\n\n  hostConnected() {\n    this.observe();\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Eagerly deliver any changes that happened during update.\n    // And handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    const pendingEntries = this._observer.takeRecords();\n    if (\n      pendingEntries.length ||\n      (!this._skipInitial && this._unobservedUpdate)\n    ) {\n      this.handleChanges(pendingEntries);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Flush any pending observer updates.\n   */\n  flush() {\n    const pendingEntries = this._observer.takeRecords();\n    if (pendingEntries.length) {\n      this.handleChanges(pendingEntries);\n      this._host.requestUpdate();\n    }\n  }\n\n  /**\n   * Start observing. This is done automatically when the host connects.\n   */\n  observe() {\n    this._observer.observe(this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n"]}