{"version":3,"file":"performance-controller.js","sources":["src/performance-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a PerformanceController.\n */\nexport type PerformanceValueCallback<T = unknown> = (\n  entries: PerformanceEntryList,\n  observer: PerformanceObserver,\n  entryList?: PerformanceObserverEntryList\n) => T;\n\n/**\n * The config options for a PerformanceController.\n */\nexport interface PerformanceControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the PerformanceObserver.\n   */\n  config: PerformanceObserverInit;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: PerformanceValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * PerformanceController is a ReactiveController that integrates a\n * PerformanceObserver with a ReactiveControllerHost's reactive update\n * lifecycle. This is typically a ReactiveElement or LitElement.\n * PerformanceObserver can be used to report changes in various metrics about\n * browser and application performance, including marks and measures done with\n * the `performance` API.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class PerformanceController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _config: PerformanceObserverInit;\n  private _observer!: PerformanceObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: PerformanceValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost,\n    {config, callback, skipInitial}: PerformanceControllerConfig<T>\n  ) {\n    this._host = host;\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.PerformanceObserver) {\n      console.warn(\n        `PerformanceController error: browser does not support PerformanceObserver.`\n      );\n      return;\n    }\n    this._observer = new PerformanceObserver(\n      (entryList: PerformanceObserverEntryList) => {\n        this.handleChanges(entryList.getEntries(), entryList);\n        this._host.requestUpdate();\n      }\n    );\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(\n    entries: PerformanceEntryList,\n    entryList?: PerformanceObserverEntryList\n  ) {\n    this.value = this.callback?.(entries, this._observer, entryList);\n  }\n\n  hostConnected() {\n    this.observe();\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Eagerly deliver any changes that happened during update.\n    // And handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    const pendingEntries = this._observer.takeRecords();\n    if (\n      pendingEntries.length ||\n      (!this._skipInitial && this._unobservedUpdate)\n    ) {\n      this.handleChanges(pendingEntries);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Flush any pending observer updates.\n   */\n  flush() {\n    const pendingEntries = this._observer.takeRecords();\n    if (pendingEntries.length) {\n      this.handleChanges(pendingEntries);\n      this._host.requestUpdate();\n    }\n  }\n\n  /**\n   * Start observing. This is done automatically when the host connects.\n   */\n  observe() {\n    this._observer.observe(this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n"],"names":["PerformanceController","constructor","host","config","callback","skipInitial","this","_skipInitial","_unobservedUpdate","_host","_config","window","PerformanceObserver","_observer","entryList","handleChanges","getEntries","requestUpdate","addController","console","warn","entries","value","hostConnected","observe","hostDisconnected","disconnect","hostUpdated","pendingEntries","takeRecords","length","flush"],"mappings":"MAoDaA,EAsBX,WAAAC,CACEC,GACAC,OAACA,EAAMC,SAAEA,EAAQC,YAAEA,IApBbC,KAAYC,GAAG,EAOfD,KAAiBE,GAAG,EAe1BF,KAAKG,EAAQP,EACbI,KAAKI,EAAUP,EACfG,KAAKC,EAAeF,GAAeC,KAAKC,EACxCD,KAAKF,SAAWA,EAEXO,OAAOC,qBAMZN,KAAKO,EAAY,IAAID,qBAClBE,IACCR,KAAKS,cAAcD,EAAUE,aAAcF,GAC3CR,KAAKG,EAAMQ,eAAe,IAG9Bf,EAAKgB,cAAcZ,OAXjBa,QAAQC,KACN,6EAWL,CAMS,aAAAL,CACRM,EACAP,GAEAR,KAAKgB,MAAQhB,KAAKF,WAAWiB,EAASf,KAAKO,EAAWC,EACvD,CAED,aAAAS,GACEjB,KAAKkB,SACN,CAED,gBAAAC,GACEnB,KAAKoB,YACN,CAED,iBAAMC,GAKJ,MAAMC,EAAiBtB,KAAKO,EAAUgB,eAEpCD,EAAeE,SACbxB,KAAKC,GAAgBD,KAAKE,IAE5BF,KAAKS,cAAca,GAErBtB,KAAKE,GAAoB,CAC1B,CAKD,KAAAuB,GACE,MAAMH,EAAiBtB,KAAKO,EAAUgB,cAClCD,EAAeE,SACjBxB,KAAKS,cAAca,GACnBtB,KAAKG,EAAMQ,gBAEd,CAKD,OAAAO,GACElB,KAAKO,EAAUW,QAAQlB,KAAKI,GAC5BJ,KAAKE,GAAoB,EACzBF,KAAKG,EAAMQ,eACZ,CAMS,UAAAS,GACRpB,KAAKO,EAAUa,YAChB"}