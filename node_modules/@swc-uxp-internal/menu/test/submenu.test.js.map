{
  "version": 3,
  "sources": ["submenu.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport { Menu, MenuItem } from '@spectrum-web-components/menu';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { spy } from 'sinon';\nimport { Theme } from '@spectrum-web-components/theme';\nimport { TemplateResult } from '@spectrum-web-components/base';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { ActionMenu } from '@spectrum-web-components/action-menu';\nimport '@spectrum-web-components/action-menu/sp-action-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-group.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-show-menu.js';\nimport { ActiveOverlay } from '@spectrum-web-components/overlay';\n\nasync function styledFixture<T extends Element>(\n    story: TemplateResult,\n    dir: 'ltr' | 'rtl' | 'auto' = 'ltr'\n): Promise<T> {\n    const test = await fixture<Theme>(html`\n        <sp-theme dir=${dir} scale=\"medium\" color=\"dark\">${story}</sp-theme>\n    `);\n    document.documentElement.dir = dir;\n    return test.children[0] as T;\n}\n\ndescribe('Submenu', () => {\n    it('selects - pointer', async () => {\n        const rootChanged = spy();\n        const submenuChanged = spy();\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu\n                    @change=${(event: Event & { target: Menu }) => {\n                        rootChanged(event.target.value);\n                    }}\n                >\n                    <sp-menu-item class=\"root\">\n                        Has submenu\n                        <sp-menu\n                            slot=\"submenu\"\n                            @change=${(event: Event & { target: Menu }) => {\n                                submenuChanged(event.target.value);\n                            }}\n                        >\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem = el.querySelector('.root') as MenuItem;\n        const rootItemBoundingRect = rootItem.getBoundingClientRect();\n        expect(rootItem.open).to.be.false;\n\n        const opened = oneEvent(rootItem, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(rootItem.open).to.be.true;\n\n        const item2 = document.querySelector('.submenu-item-2') as MenuItem;\n        const item2BoundingRect = item2.getBoundingClientRect();\n\n        const closed = oneEvent(rootItem, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        item2BoundingRect.left + item2BoundingRect.width / 2,\n                        item2BoundingRect.top + item2BoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n        await nextFrame();\n\n        expect(rootChanged.calledWith('Has submenu'), 'root changed').to.be\n            .true;\n        expect(submenuChanged.calledWith('Two'), 'submenu changed').to.be.true;\n    });\n    it('closes deep tree on selection', async () => {\n        const rootChanged = spy();\n        const submenuChanged = spy();\n        const subSubmenuChanged = spy();\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu\n                    @change=${(event: Event & { target: Menu }) => {\n                        rootChanged(event.target.value);\n                    }}\n                >\n                    <sp-menu-item class=\"root\">\n                        Has submenu\n                        <sp-menu\n                            slot=\"submenu\"\n                            @change=${(event: Event & { target: Menu }) => {\n                                submenuChanged(event.target.value);\n                            }}\n                        >\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                                <sp-menu\n                                    slot=\"submenu\"\n                                    @change=${(\n                                        event: Event & { target: Menu }\n                                    ) => {\n                                        subSubmenuChanged(event.target.value);\n                                    }}\n                                >\n                                    <sp-menu-item class=\"sub-submenu-item-1\">\n                                        A\n                                    </sp-menu-item>\n                                    <sp-menu-item class=\"sub-submenu-item-2\">\n                                        B\n                                    </sp-menu-item>\n                                    <sp-menu-item class=\"sub-submenu-item-3\">\n                                        C\n                                    </sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem = el.querySelector('.root') as MenuItem;\n        const rootItemBoundingRect = rootItem.getBoundingClientRect();\n        expect(rootItem.open).to.be.false;\n\n        const opened = oneEvent(rootItem, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(rootItem.open).to.be.true;\n\n        const item2 = document.querySelector('.submenu-item-2') as MenuItem;\n        const item2BoundingRect = item2.getBoundingClientRect();\n\n        let closed = oneEvent(item2, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        item2BoundingRect.left + item2BoundingRect.width / 2,\n                        item2BoundingRect.top + item2BoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n        await nextFrame();\n\n        expect(item2.open).to.be.true;\n\n        const itemC = document.querySelector('.sub-submenu-item-3') as MenuItem;\n        const itemCBoundingRect = itemC.getBoundingClientRect();\n\n        closed = oneEvent(rootItem, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        itemCBoundingRect.left + itemCBoundingRect.width / 2,\n                        itemCBoundingRect.top + itemCBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n        await nextFrame();\n\n        expect(rootChanged.calledWith('Has submenu'), 'root changed').to.be\n            .true;\n        expect(submenuChanged.calledWith('Two'), 'submenu changed').to.be.true;\n        expect(subSubmenuChanged.calledWith('C'), 'sub submenu changed').to.be\n            .true;\n    });\n    (\n        [\n            {\n                dir: 'ltr',\n                openKey: 'ArrowRight',\n                closeKey: 'ArrowLeft',\n            },\n            {\n                dir: 'rtl',\n                openKey: 'ArrowLeft',\n                closeKey: 'ArrowRight',\n            },\n        ] as {\n            dir: 'ltr' | 'rtl' | 'auto';\n            openKey: 'ArrowRight' | 'ArrowLeft';\n            closeKey: 'ArrowRight' | 'ArrowLeft';\n        }[]\n    ).map((testData) => {\n        it(`selects - keyboard: ${testData.dir}`, async () => {\n            const rootChanged = spy();\n            const submenuChanged = spy();\n            const el = await styledFixture<Menu>(\n                html`\n                    <sp-menu\n                        @change=${(event: Event & { target: Menu }) => {\n                            rootChanged(event.target.value);\n                        }}\n                    >\n                        <sp-menu-item class=\"root\">\n                            Has submenu\n                            <sp-menu\n                                slot=\"submenu\"\n                                @change=${(event: Event & { target: Menu }) => {\n                                    submenuChanged(event.target.value);\n                                }}\n                            >\n                                <sp-menu-item class=\"submenu-item-1\">\n                                    One\n                                </sp-menu-item>\n                                <sp-menu-item class=\"submenu-item-2\">\n                                    Two\n                                </sp-menu-item>\n                                <sp-menu-item class=\"submenu-item-3\">\n                                    Three\n                                </sp-menu-item>\n                            </sp-menu>\n                        </sp-menu-item>\n                    </sp-menu>\n                `,\n                testData.dir\n            );\n\n            await elementUpdated(el);\n            const rootItem = el.querySelector('.root') as MenuItem;\n            expect(rootItem.open).to.be.false;\n            el.focus();\n            await elementUpdated(el);\n\n            let opened = oneEvent(rootItem, 'sp-opened');\n            sendKeys({\n                press: testData.openKey,\n            });\n            await opened;\n\n            expect(rootItem.open).to.be.true;\n\n            let closed = oneEvent(rootItem, 'sp-closed');\n            sendKeys({\n                press: testData.closeKey,\n            });\n            await closed;\n\n            expect(rootItem.open).to.be.false;\n\n            opened = oneEvent(rootItem, 'sp-opened');\n            sendKeys({\n                press: testData.openKey,\n            });\n            await opened;\n\n            expect(rootItem.open).to.be.true;\n\n            await sendKeys({\n                press: 'ArrowDown',\n            });\n\n            closed = oneEvent(rootItem, 'sp-closed');\n            sendKeys({\n                press: 'Enter',\n            });\n            await closed;\n\n            expect(rootChanged.calledWith('Has submenu'), 'root changed').to.be\n                .true;\n            expect(submenuChanged.calledWith('Two'), 'submenu changed').to.be\n                .true;\n        });\n    });\n    it('closes on `pointerleave`', async () => {\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu>\n                    <sp-menu-item class=\"root\">\n                        Has submenu\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem = el.querySelector('.root') as MenuItem;\n        const rootItemBoundingRect = rootItem.getBoundingClientRect();\n        expect(rootItem.open).to.be.false;\n\n        const opened = oneEvent(rootItem, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(rootItem.open).to.be.true;\n\n        const closed = oneEvent(rootItem, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height * 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n\n        expect(rootItem.open).to.be.false;\n    });\n    it('stays open when mousing off menu item and back again', async () => {\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu>\n                    <sp-menu-item class=\"root\">\n                        Has submenu\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem = el.querySelector('.root') as MenuItem;\n        const rootItemBoundingRect = rootItem.getBoundingClientRect();\n        expect(rootItem.open).to.be.false;\n\n        const opened = oneEvent(rootItem, 'sp-opened');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height * 2,\n                    ],\n                },\n            ],\n        });\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(rootItem.open).to.be.true;\n\n        const closed = oneEvent(rootItem, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height * 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n    });\n    it('stays open when mousing between menu item and submenu', async () => {\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu>\n                    <sp-menu-item class=\"root\">\n                        Has submenu\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem = el.querySelector('.root') as MenuItem;\n        const rootItemBoundingRect = rootItem.getBoundingClientRect();\n        expect(rootItem.open).to.be.false;\n\n        const opened = oneEvent(rootItem, 'sp-opened');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height * 2,\n                    ],\n                },\n            ],\n        });\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width * 1.5,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(rootItem.open).to.be.true;\n    });\n    it('not opens if disabled', async () => {\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu>\n                    <sp-menu-item disabled class=\"root\">\n                        Has submenu\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem = el.querySelector('.root') as MenuItem;\n        const rootItemBoundingRect = rootItem.getBoundingClientRect();\n        expect(rootItem.open).to.be.false;\n\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect.left +\n                            rootItemBoundingRect.width / 2,\n                        rootItemBoundingRect.top +\n                            rootItemBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        // wait 200ms for open\n        await new Promise((r) => setTimeout(r, 200));\n\n        expect(rootItem.open).to.be.false;\n    });\n    it('closes all decendent submenus when closing a ancestor menu', async () => {\n        const el = await styledFixture<ActionMenu>(html`\n            <sp-action-menu>\n                <sp-icon-show-menu slot=\"icon\"></sp-icon-show-menu>\n                <sp-menu-group role=\"none\">\n                    <span slot=\"header\">New York</span>\n                    <sp-menu-item>Bronx</sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-1\">\n                        Brooklyn\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item id=\"submenu-item-2\">\n                                Ft. Greene\n                                <sp-menu slot=\"submenu\">\n                                    <sp-menu-item>S. Oxford St</sp-menu-item>\n                                    <sp-menu-item>S. Portland Ave</sp-menu-item>\n                                    <sp-menu-item>S. Elliot Pl</sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item disabled>Park Slope</sp-menu-item>\n                            <sp-menu-item>Williamsburg</sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-3\">\n                        Manhattan\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item disabled>SoHo</sp-menu-item>\n                            <sp-menu-item>\n                                Union Square\n                                <sp-menu slot=\"submenu\">\n                                    <sp-menu-item>14th St</sp-menu-item>\n                                    <sp-menu-item>Broadway</sp-menu-item>\n                                    <sp-menu-item>Park Ave</sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item>Upper East Side</sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu-group>\n            </sp-action-menu>\n        `);\n\n        const rootMenu1 = el.querySelector('#submenu-item-1') as Menu;\n        const rootMenu2 = el.querySelector('#submenu-item-3') as Menu;\n        const childMenu2 = el.querySelector('#submenu-item-2') as Menu;\n\n        expect(el.open).to.be.false;\n        let opened = oneEvent(el, 'sp-opened');\n        el.click();\n        await opened;\n        expect(el.open).to.be.true;\n\n        let activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(1);\n        opened = oneEvent(rootMenu1, 'sp-opened');\n        rootMenu1.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(2);\n\n        opened = oneEvent(childMenu2, 'sp-opened');\n        childMenu2.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(3);\n\n        const overlaysManaged = Promise.all([\n            oneEvent(childMenu2, 'sp-closed'),\n            oneEvent(rootMenu1, 'sp-closed'),\n            oneEvent(rootMenu2, 'sp-opened'),\n        ]);\n        rootMenu2.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await overlaysManaged;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(2);\n    });\n\n    it('closes back to the first overlay without a `root` when clicking away', async () => {\n        const el = await styledFixture<ActionMenu>(html`\n            <sp-action-menu>\n                <sp-icon-show-menu slot=\"icon\"></sp-icon-show-menu>\n                <sp-menu-group role=\"none\">\n                    <span slot=\"header\">New York</span>\n                    <sp-menu-item>Bronx</sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-1\">\n                        Brooklyn\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item id=\"submenu-item-2\">\n                                Ft. Greene\n                                <sp-menu slot=\"submenu\">\n                                    <sp-menu-item>S. Oxford St</sp-menu-item>\n                                    <sp-menu-item>S. Portland Ave</sp-menu-item>\n                                    <sp-menu-item>S. Elliot Pl</sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item disabled>Park Slope</sp-menu-item>\n                            <sp-menu-item>Williamsburg</sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-3\">\n                        Manhattan\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item disabled>SoHo</sp-menu-item>\n                            <sp-menu-item>\n                                Union Square\n                                <sp-menu slot=\"submenu\">\n                                    <sp-menu-item>14th St</sp-menu-item>\n                                    <sp-menu-item>Broadway</sp-menu-item>\n                                    <sp-menu-item>Park Ave</sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item>Upper East Side</sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu-group>\n            </sp-action-menu>\n        `);\n\n        const rootMenu1 = el.querySelector('#submenu-item-1') as Menu;\n        const childMenu2 = el.querySelector('#submenu-item-2') as Menu;\n\n        expect(el.open).to.be.false;\n        let opened = oneEvent(el, 'sp-opened');\n        el.click();\n        await opened;\n        expect(el.open).to.be.true;\n\n        let activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(1);\n        opened = oneEvent(rootMenu1, 'sp-opened');\n        rootMenu1.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(2);\n\n        opened = oneEvent(childMenu2, 'sp-opened');\n        childMenu2.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(3);\n\n        const closed = Promise.all([\n            oneEvent(childMenu2, 'sp-closed'),\n            oneEvent(rootMenu1, 'sp-closed'),\n            oneEvent(el, 'sp-closed'),\n        ]);\n        document.body.click();\n        await closed;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(0);\n    });\n\n    it('closes decendent menus when Menu Item in ancestor without a submenu is pointerentered', async () => {\n        const el = await styledFixture<ActionMenu>(html`\n            <sp-action-menu>\n                <sp-icon-show-menu slot=\"icon\"></sp-icon-show-menu>\n                <sp-menu-group role=\"none\">\n                    <span slot=\"header\">New York</span>\n                    <sp-menu-item id=\"no-submenu\">Bronx</sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-1\">\n                        Brooklyn\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item id=\"submenu-item-2\">\n                                Ft. Greene\n                            </sp-menu-item>\n                            <sp-menu-item disabled>Park Slope</sp-menu-item>\n                            <sp-menu-item id=\"ancestor-item\">\n                                Williamsburg\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-3\">\n                        Manhattan\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item disabled>SoHo</sp-menu-item>\n                            <sp-menu-item>Union Square</sp-menu-item>\n                            <sp-menu-item>Upper East Side</sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu-group>\n            </sp-action-menu>\n        `);\n\n        const rootMenu = el.querySelector('#submenu-item-1') as MenuItem;\n        const noSubmenu = el.querySelector('#no-submenu') as MenuItem;\n\n        expect(el.open).to.be.false;\n        let opened = oneEvent(el, 'sp-opened');\n        el.click();\n        await opened;\n        expect(el.open).to.be.true;\n\n        let activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(1);\n        opened = oneEvent(rootMenu, 'sp-opened');\n        rootMenu.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(2);\n\n        const closed = oneEvent(rootMenu, 'sp-closed');\n        noSubmenu.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await closed;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(1);\n    });\n\n    it('closes decendent menus when Menu Item in ancestor is clicked', async () => {\n        const el = await styledFixture<ActionMenu>(html`\n            <sp-action-menu>\n                <sp-icon-show-menu slot=\"icon\"></sp-icon-show-menu>\n                <sp-menu-group role=\"none\">\n                    <span slot=\"header\">New York</span>\n                    <sp-menu-item>Bronx</sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-1\">\n                        Brooklyn\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item id=\"submenu-item-2\">\n                                Ft. Greene\n                                <sp-menu slot=\"submenu\">\n                                    <sp-menu-item>S. Oxford St</sp-menu-item>\n                                    <sp-menu-item>S. Portland Ave</sp-menu-item>\n                                    <sp-menu-item>S. Elliot Pl</sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item disabled>Park Slope</sp-menu-item>\n                            <sp-menu-item id=\"ancestor-item\">\n                                Williamsburg\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                    <sp-menu-item id=\"submenu-item-3\">\n                        Manhattan\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item disabled>SoHo</sp-menu-item>\n                            <sp-menu-item>\n                                Union Square\n                                <sp-menu slot=\"submenu\">\n                                    <sp-menu-item>14th St</sp-menu-item>\n                                    <sp-menu-item>Broadway</sp-menu-item>\n                                    <sp-menu-item>Park Ave</sp-menu-item>\n                                </sp-menu>\n                            </sp-menu-item>\n                            <sp-menu-item>Upper East Side</sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu-group>\n            </sp-action-menu>\n        `);\n\n        const rootMenu1 = el.querySelector('#submenu-item-1') as MenuItem;\n        const childMenu2 = el.querySelector('#submenu-item-2') as MenuItem;\n        const ancestorItem = el.querySelector('#ancestor-item') as MenuItem;\n\n        expect(el.open).to.be.false;\n        let opened = oneEvent(el, 'sp-opened');\n        el.click();\n        await opened;\n        expect(el.open).to.be.true;\n\n        let activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(1);\n        opened = oneEvent(rootMenu1, 'sp-opened');\n        rootMenu1.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(2);\n\n        opened = oneEvent(childMenu2, 'sp-opened');\n        childMenu2.dispatchEvent(\n            new PointerEvent('pointerenter', { bubbles: true })\n        );\n        await opened;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(3);\n\n        const closed = Promise.all([\n            oneEvent(childMenu2, 'sp-closed'),\n            oneEvent(rootMenu1, 'sp-closed'),\n            oneEvent(el, 'sp-closed'),\n        ]);\n        ancestorItem.click();\n        await closed;\n        activeOverlays = document.querySelectorAll('active-overlay');\n        expect(activeOverlays.length).to.equal(0);\n    });\n    it('cleans up submenus that close before they are \"open\"', async () => {\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [-5, -5],\n                },\n            ],\n        });\n        const el = await styledFixture<Menu>(\n            html`\n                <sp-menu>\n                    <sp-menu-item class=\"root-1\">\n                        Has submenu\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                    <sp-menu-item class=\"root-2\">\n                        Has submenu\n                        <sp-menu slot=\"submenu\">\n                            <sp-menu-item class=\"submenu-item-1\">\n                                One\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-2\">\n                                Two\n                            </sp-menu-item>\n                            <sp-menu-item class=\"submenu-item-3\">\n                                Three\n                            </sp-menu-item>\n                        </sp-menu>\n                    </sp-menu-item>\n                </sp-menu>\n            `\n        );\n\n        await elementUpdated(el);\n        const rootItem1 = el.querySelector('.root-1') as MenuItem;\n        const rootItem2 = el.querySelector('.root-2') as MenuItem;\n        expect(rootItem1.open, 'initially closed 1').to.be.false;\n        expect(rootItem2.open, 'initially closed 2').to.be.false;\n\n        const rootItemBoundingRect1 = rootItem1.getBoundingClientRect();\n        const rootItemBoundingRect2 = rootItem2.getBoundingClientRect();\n        let activeOverlay!: ActiveOverlay | null;\n\n        // Open the first submenu\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect1.left +\n                            rootItemBoundingRect1.width / 2,\n                        rootItemBoundingRect1.top +\n                            rootItemBoundingRect1.height / 2,\n                    ],\n                },\n            ],\n        });\n        // Open the second submenu, closing the first\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect2.left +\n                            rootItemBoundingRect2.width / 2,\n                        rootItemBoundingRect2.top +\n                            rootItemBoundingRect2.height / 2,\n                    ],\n                },\n            ],\n        });\n        // Open the first submenu, closing the second\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect1.left +\n                            rootItemBoundingRect1.width / 2,\n                        rootItemBoundingRect1.top +\n                            rootItemBoundingRect1.height / 2,\n                    ],\n                },\n            ],\n        });\n        // Open the second submenu, closing the first\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect2.left +\n                            rootItemBoundingRect2.width / 2,\n                        rootItemBoundingRect2.top +\n                            rootItemBoundingRect2.height / 2,\n                    ],\n                },\n            ],\n        });\n        const closed = oneEvent(rootItem2, 'sp-closed');\n        // Close the second submenu\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rootItemBoundingRect2.left +\n                            rootItemBoundingRect2.width / 2,\n                        rootItemBoundingRect2.top +\n                            rootItemBoundingRect2.top +\n                            rootItemBoundingRect2.height / 2,\n                    ],\n                },\n            ],\n        });\n        activeOverlay = document.querySelector(\n            'active-overlay'\n        ) as ActiveOverlay;\n        expect(activeOverlay).to.not.be.null;\n        await closed;\n\n        activeOverlay = document.querySelector(\n            'active-overlay'\n        ) as ActiveOverlay;\n        expect(activeOverlay).to.be.null;\n        expect(rootItem1.open, 'finally closed 1').to.be.false;\n        expect(rootItem2.open, 'finally closed 2').to.be.false;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
