{
  "version": 3,
  "sources": ["NumberField.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport {\n    LanguageResolutionController,\n    languageResolverUpdatedSymbol,\n} from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\nimport { streamingListener } from '@spectrum-web-components/base/src/streaming-listener.js';\nimport { NumberFormatter, NumberParser } from '@internationalized/number';\n\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron75.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron200.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport {\n    isAndroid,\n    isIPhone,\n} from '@spectrum-web-components/shared/src/platform.js';\nimport { TextfieldBase } from '@spectrum-web-components/textfield';\nimport chevronStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\nimport styles from './number-field.css.js';\n\nexport const FRAMES_PER_CHANGE = 5;\n// Debounce duration for inserting a `change` event after a batch of `wheel` originating `input` events.\nexport const CHANGE_DEBOUNCE_MS = 100;\nexport const indeterminatePlaceholder = '-';\nexport const remapMultiByteCharacters: Record<string, string> = {\n    '\uFF11': '1',\n    '\uFF12': '2',\n    '\uFF13': '3',\n    '\uFF14': '4',\n    '\uFF15': '5',\n    '\uFF16': '6',\n    '\uFF17': '7',\n    '\uFF18': '8',\n    '\uFF19': '9',\n    '\uFF10': '0',\n    '\u3001': ',',\n    '\uFF0C': ',',\n    '\u3002': '.',\n    '\uFF0E': '.',\n    '\uFF05': '%',\n    '\uFF0B': '+',\n    \u30FC: '-',\n};\n\nconst chevronIcon: Record<string, (dir: 'Down' | 'Up') => TemplateResult> = {\n    s: (dir) => html`\n        <sp-icon-chevron75\n            slot=\"icon\"\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}75\"\n        ></sp-icon-chevron75>\n    `,\n    m: (dir) => html`\n        <sp-icon-chevron75\n            slot=\"icon\"\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}75\"\n        ></sp-icon-chevron75>\n    `,\n    l: (dir) => html`\n        <sp-icon-chevron100\n            slot=\"icon\"\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}100\"\n        ></sp-icon-chevron100>\n    `,\n    xl: (dir) => html`\n        <sp-icon-chevron200\n            slot=\"icon\"\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}200\"\n        ></sp-icon-chevron200>\n    `,\n};\n\n/**\n * @element sp-number-field\n * @slot help-text - default or non-negative help text to associate to your form element\n * @slot negative-help-text - negative help text to associate to your form element when `invalid`\n */\nexport class NumberField extends TextfieldBase {\n    public static override get styles(): CSSResultArray {\n        return [...super.styles, styles, chevronStyles];\n    }\n\n    @query('.buttons')\n    private buttons!: HTMLDivElement;\n\n    @property({ type: Boolean, reflect: true })\n    public override focused = false;\n\n    _forcedUnit = '';\n\n    /**\n     * An `&lt;sp-number-field&gt;` element will process its numeric value with\n     * `new Intl.NumberFormat(this.resolvedLanguage, this.formatOptions).format(this.valueAsNumber)`\n     * in order to prepare it for visual delivery in the input. In order to customize this\n     * processing supply your own `Intl.NumberFormatOptions` object here.\n     *\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\n     */\n    @property({ type: Object, attribute: 'format-options' })\n    public formatOptions: Intl.NumberFormatOptions = {};\n\n    /**\n     * Whether the stepper UI is hidden or not.\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'hide-stepper' })\n    public hideStepper = false;\n\n    @property({ type: Boolean, reflect: true })\n    public indeterminate = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'keyboard-focused' })\n    public keyboardFocused = false;\n\n    @property({ type: Number })\n    public max?: number;\n\n    @property({ type: Number })\n    public min?: number;\n\n    /**\n     * The distance by which to alter the value of the element when taking a \"step\".\n     *\n     * When `this.formatOptions.style === 'percentage'` the default step will be\n     * set to 0.01 unless otherwise supplied to the element.\n     */\n    @property({ type: Number })\n    public step?: number;\n\n    public managedInput = false;\n\n    @property({ type: Number, reflect: true, attribute: 'step-modifier' })\n    public stepModifier = 10;\n\n    @property({ type: Number })\n    public override set value(rawValue: number) {\n        const value = this.validateInput(rawValue);\n        if (value === this.value) {\n            return;\n        }\n        this.lastCommitedValue = value;\n        const oldValue = this._value;\n        this._value = value;\n        this.requestUpdate('value', oldValue);\n    }\n\n    public override get value(): number {\n        return this._value;\n    }\n\n    private get inputValue(): string {\n        return this.indeterminate\n            ? this.formattedValue\n            : this.inputElement.value;\n    }\n\n    public override _value = NaN;\n    private _trackingValue = '';\n    private lastCommitedValue?: number;\n\n    private setValue(value: number = this.value): void {\n        this.value = value;\n        if (\n            typeof this.lastCommitedValue === 'undefined' ||\n            this.lastCommitedValue === this.value\n        ) {\n            // Do not announce when the value is unchanged.\n            return;\n        }\n\n        this.dispatchEvent(\n            new Event('change', { bubbles: true, composed: true })\n        );\n        this.lastCommitedValue = this.value;\n    }\n\n    /**\n     * Retreive the value of the element parsed to a Number.\n     */\n    public get valueAsString(): string {\n        return this._value.toString();\n    }\n\n    public set valueAsString(value: string) {\n        this.value = this.numberParser.parse(value);\n    }\n\n    public get formattedValue(): string {\n        if (isNaN(this.value)) return '';\n        return (\n            this.numberFormatter.format(this.value) +\n            (this.focused ? '' : this._forcedUnit)\n        );\n    }\n\n    private convertValueToNumber(value: string): number {\n        if (isIPhone() && this.inputElement.inputMode === 'decimal') {\n            const parts = this.numberFormatter.formatToParts(1000.1);\n            const sourceDecimal = value\n                .split('')\n                .find((char) => char === ',' || char === '.');\n            const replacementDecimal = parts.find(\n                (part) => part.type === 'decimal'\n            )?.value;\n            if (sourceDecimal && replacementDecimal) {\n                value = value.replace(sourceDecimal, replacementDecimal);\n            }\n        }\n        return this.numberParser.parse(value);\n    }\n\n    private get _step(): number {\n        if (typeof this.step !== 'undefined') {\n            return this.step;\n        }\n        if (this.formatOptions?.style === 'percent') {\n            return 0.01;\n        }\n        return 1;\n    }\n\n    private nextChange!: number;\n    private changeCount = 0;\n    private findChange!: (event: PointerEvent) => void;\n    private change!: (event: PointerEvent) => void;\n    private safty!: number;\n    private languageResolver = new LanguageResolutionController(this);\n\n    private handlePointerdown(event: PointerEvent): void {\n        if (event.button !== 0) {\n            event.preventDefault();\n            return;\n        }\n        this.managedInput = true;\n        this.buttons.setPointerCapture(event.pointerId);\n        const stepUpRect = this.buttons.children[0].getBoundingClientRect();\n        const stepDownRect = this.buttons.children[1].getBoundingClientRect();\n        this.findChange = (event: PointerEvent) => {\n            if (\n                event.clientX >= stepUpRect.x &&\n                event.clientY >= stepUpRect.y &&\n                event.clientX <= stepUpRect.x + stepUpRect.width &&\n                event.clientY <= stepUpRect.y + stepUpRect.height\n            ) {\n                this.change = (event: PointerEvent) =>\n                    this.increment(event.shiftKey ? this.stepModifier : 1);\n            } else if (\n                event.clientX >= stepDownRect.x &&\n                event.clientY >= stepDownRect.y &&\n                event.clientX <= stepDownRect.x + stepDownRect.width &&\n                event.clientY <= stepDownRect.y + stepDownRect.height\n            ) {\n                this.change = (event: PointerEvent) =>\n                    this.decrement(event.shiftKey ? this.stepModifier : 1);\n            }\n        };\n        this.findChange(event);\n        this.startChange(event);\n    }\n\n    private startChange(event: PointerEvent): void {\n        this.changeCount = 0;\n        this.doChange(event);\n        this.safty = setTimeout(() => {\n            this.doNextChange(event);\n        }, 400) as unknown as number;\n    }\n\n    private doChange(event: PointerEvent): void {\n        this.change(event);\n    }\n\n    private handlePointermove(event: PointerEvent): void {\n        this.findChange(event);\n    }\n\n    private handlePointerup(event: PointerEvent): void {\n        this.buttons.releasePointerCapture(event.pointerId);\n        cancelAnimationFrame(this.nextChange);\n        clearTimeout(this.safty);\n        this.managedInput = false;\n        this.setValue();\n    }\n\n    private doNextChange(event: PointerEvent): number {\n        this.changeCount += 1;\n        if (this.changeCount % FRAMES_PER_CHANGE === 0) {\n            this.doChange(event);\n        }\n        return requestAnimationFrame(() => {\n            this.nextChange = this.doNextChange(event);\n        });\n    }\n\n    private stepBy(count: number): void {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        const min = typeof this.min !== 'undefined' ? this.min : 0;\n        let value = this.value;\n        value += count * this._step;\n        if (isNaN(this.value)) {\n            value = min;\n        }\n        this._value = this.validateInput(value);\n        this.dispatchEvent(\n            new Event('input', { bubbles: true, composed: true })\n        );\n        this.indeterminate = false;\n        this.focus();\n    }\n\n    private increment(factor = 1): void {\n        this.stepBy(1 * factor);\n    }\n\n    private decrement(factor = 1): void {\n        this.stepBy(-1 * factor);\n    }\n\n    private handleKeydown(event: KeyboardEvent): void {\n        if (this.isComposing) return;\n        switch (event.code) {\n            case 'ArrowUp':\n                event.preventDefault();\n                this.increment(event.shiftKey ? this.stepModifier : 1);\n                this.setValue();\n                break;\n            case 'ArrowDown':\n                event.preventDefault();\n                this.decrement(event.shiftKey ? this.stepModifier : 1);\n                this.setValue();\n                break;\n        }\n    }\n\n    private queuedChangeEvent!: number;\n\n    protected onScroll(event: WheelEvent): void {\n        event.preventDefault();\n        this.managedInput = true;\n        const direction = event.shiftKey\n            ? event.deltaX / Math.abs(event.deltaX)\n            : event.deltaY / Math.abs(event.deltaY);\n        if (direction !== 0 && !isNaN(direction)) {\n            this.stepBy(direction * (event.shiftKey ? this.stepModifier : 1));\n            clearTimeout(this.queuedChangeEvent);\n            this.queuedChangeEvent = setTimeout(() => {\n                this.setValue();\n            }, CHANGE_DEBOUNCE_MS) as unknown as number;\n        }\n        this.managedInput = false;\n    }\n\n    protected override onFocus(): void {\n        super.onFocus();\n        this._trackingValue = this.inputValue;\n        this.keyboardFocused = !this.readonly && true;\n        this.addEventListener('wheel', this.onScroll, { passive: false });\n    }\n\n    protected override onBlur(): void {\n        super.onBlur();\n        this.keyboardFocused = !this.readonly && false;\n        this.removeEventListener('wheel', this.onScroll);\n    }\n\n    private handleFocusin(): void {\n        this.focused = !this.readonly && true;\n        this.keyboardFocused = !this.readonly && true;\n    }\n\n    private handleFocusout(): void {\n        this.focused = !this.readonly && false;\n        this.keyboardFocused = !this.readonly && false;\n    }\n\n    private wasIndeterminate = false;\n    private indeterminateValue?: number;\n\n    protected override handleChange(): void {\n        const value = this.convertValueToNumber(this.inputValue);\n        if (this.wasIndeterminate) {\n            this.wasIndeterminate = false;\n            this.indeterminateValue = undefined;\n            if (isNaN(value)) {\n                this.indeterminate = true;\n                return;\n            }\n        }\n        this.setValue(value);\n        this.inputElement.value = this.formattedValue;\n    }\n\n    protected handleCompositionStart(): void {\n        this.isComposing = true;\n    }\n\n    protected handleCompositionEnd(): void {\n        this.isComposing = false;\n        requestAnimationFrame(() => {\n            this.inputElement.dispatchEvent(\n                new Event('input', {\n                    composed: true,\n                    bubbles: true,\n                })\n            );\n        });\n    }\n\n    protected override handleInput(event: Event): void {\n        if (this.isComposing) {\n            event.stopPropagation();\n            return;\n        }\n        if (this.indeterminate) {\n            this.wasIndeterminate = true;\n            this.indeterminateValue = this.value;\n            this.inputElement.value = this.inputElement.value.replace(\n                indeterminatePlaceholder,\n                ''\n            );\n        }\n        const { value: originalValue, selectionStart } = this.inputElement;\n        const value = originalValue\n            .split('')\n            .map((char) => remapMultiByteCharacters[char] || char)\n            .join('');\n        if (this.numberParser.isValidPartialNumber(value)) {\n            // Use starting value as this.value is the `input` value.\n            this.lastCommitedValue = this.lastCommitedValue ?? this.value;\n            const valueAsNumber = this.convertValueToNumber(value);\n            if (!value && this.indeterminateValue) {\n                this.indeterminate = true;\n                this._value = this.indeterminateValue;\n            } else {\n                this.indeterminate = false;\n                this._value = this.validateInput(valueAsNumber);\n            }\n            this._trackingValue = value;\n            this.inputElement.value = value;\n            this.inputElement.setSelectionRange(selectionStart, selectionStart);\n            return;\n        } else {\n            this.inputElement.value = this.indeterminate\n                ? indeterminatePlaceholder\n                : this._trackingValue;\n        }\n        const currentLength = value.length;\n        const previousLength = this._trackingValue.length;\n        const nextSelectStart =\n            (selectionStart || currentLength) -\n            (currentLength - previousLength);\n        this.inputElement.setSelectionRange(nextSelectStart, nextSelectStart);\n    }\n\n    private validateInput(value: number): number {\n        const signMultiplier = value < 0 ? -1 : 1; // 'signMultiplier' adjusts 'value' for 'validateInput' and reverts it before returning.\n        value *= signMultiplier;\n        if (typeof this.min !== 'undefined') {\n            value = Math.max(this.min, value);\n        }\n        if (typeof this.max !== 'undefined') {\n            value = Math.min(this.max, value);\n        }\n        // Step shouldn't validate when 0...\n        if (this.step) {\n            const min = typeof this.min !== 'undefined' ? this.min : 0;\n            const moduloStep = (value - min) % this.step;\n            const fallsOnStep = moduloStep === 0;\n            if (!fallsOnStep) {\n                const overUnder = Math.round(moduloStep / this.step);\n                if (overUnder === 1) {\n                    value += this.step - moduloStep;\n                } else {\n                    value -= moduloStep;\n                }\n            }\n            if (typeof this.max !== 'undefined') {\n                while (value > this.max) {\n                    value -= this.step;\n                }\n            }\n        }\n        value *= signMultiplier;\n        return value;\n    }\n\n    protected override get displayValue(): string {\n        const indeterminateValue = this.focused ? '' : indeterminatePlaceholder;\n        return this.indeterminate ? indeterminateValue : this.formattedValue;\n    }\n\n    protected clearNumberFormatterCache(): void {\n        this._numberFormatter = undefined;\n        this._numberParser = undefined;\n    }\n\n    protected get numberFormatter(): NumberFormatter {\n        if (!this._numberFormatter || !this._numberFormatterFocused) {\n            const {\n                style,\n                unit,\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                unitDisplay,\n                ...formatOptionsNoUnit\n            } = this.formatOptions;\n            if (style !== 'unit') {\n                (formatOptionsNoUnit as Intl.NumberFormatOptions).style = style;\n            }\n            this._numberFormatterFocused = new NumberFormatter(\n                this.languageResolver.language,\n                formatOptionsNoUnit\n            );\n            try {\n                this._numberFormatter = new NumberFormatter(\n                    this.languageResolver.language,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                this._numberFormatter.format(1);\n            } catch (error) {\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                this._numberFormatter = this._numberFormatterFocused;\n            }\n        }\n        return this.focused\n            ? this._numberFormatterFocused\n            : this._numberFormatter;\n    }\n\n    private _numberFormatter?: NumberFormatter;\n    private _numberFormatterFocused?: NumberFormatter;\n\n    protected get numberParser(): NumberParser {\n        if (!this._numberParser || !this._numberParserFocused) {\n            const {\n                style,\n                unit,\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                unitDisplay,\n                ...formatOptionsNoUnit\n            } = this.formatOptions;\n            if (style !== 'unit') {\n                (formatOptionsNoUnit as Intl.NumberFormatOptions).style = style;\n            }\n            this._numberParserFocused = new NumberParser(\n                this.languageResolver.language,\n                formatOptionsNoUnit\n            );\n            try {\n                this._numberParser = new NumberParser(\n                    this.languageResolver.language,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                this._numberParser.parse('0');\n            } catch (error) {\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                this._numberParser = this._numberParserFocused;\n            }\n        }\n        return this.focused ? this._numberParserFocused : this._numberParser;\n    }\n\n    applyFocusElementLabel = (value?: string): void => {\n        this.appliedLabel = value;\n    };\n\n    private _numberParser?: NumberParser;\n    private _numberParserFocused?: NumberParser;\n\n    protected override renderField(): TemplateResult {\n        this.autocomplete = 'off';\n        return html`\n            ${super.renderField()}\n            ${this.hideStepper\n                ? nothing\n                : html`\n                      <span\n                          class=\"buttons\"\n                          @focusin=${this.handleFocusin}\n                          @focusout=${this.handleFocusout}\n                          ${streamingListener({\n                              start: ['pointerdown', this.handlePointerdown],\n                              streamInside: [\n                                  [\n                                      'pointermove',\n                                      'pointerenter',\n                                      'pointerleave',\n                                      'pointerover',\n                                      'pointerout',\n                                  ],\n                                  this.handlePointermove,\n                              ],\n                              end: [\n                                  [\n                                      'pointerup',\n                                      'pointercancel',\n                                      'pointerleave',\n                                  ],\n                                  this.handlePointerup,\n                              ],\n                          })}\n                      >\n                          <sp-action-button\n                              class=\"step-up\"\n                              aria-describedby=${this.helpTextId}\n                              label=${'Increase ' + this.appliedLabel}\n                              tabindex=\"-1\"\n                              ?focused=${this.focused}\n                              ?disabled=${this.disabled ||\n                              this.readonly ||\n                              (typeof this.max !== 'undefined' &&\n                                  this.value === this.max)}\n                              ?quiet=${this.quiet}\n                          >\n                              ${chevronIcon[this.size]('Up')}\n                          </sp-action-button>\n                          <sp-action-button\n                              class=\"step-down\"\n                              aria-describedby=${this.helpTextId}\n                              label=${'Decrease ' + this.appliedLabel}\n                              tabindex=\"-1\"\n                              ?focused=${this.focused}\n                              ?disabled=${this.disabled ||\n                              this.readonly ||\n                              (typeof this.min !== 'undefined' &&\n                                  this.value === this.min)}\n                              ?quiet=${this.quiet}\n                          >\n                              ${chevronIcon[this.size]('Down')}\n                          </sp-action-button>\n                      </span>\n                  `}\n        `;\n    }\n\n    protected override update(changes: PropertyValues): void {\n        if (changes.has('formatOptions') || changes.has('resolvedLanguage')) {\n            this.clearNumberFormatterCache();\n        }\n        if (changes.has('value') || changes.has('max') || changes.has('min')) {\n            const value = this.numberParser.parse(\n                this.formattedValue.replace(this._forcedUnit, '')\n            );\n            this.value = value;\n        }\n        super.update(changes);\n    }\n\n    public override willUpdate(changes: PropertyValues): void {\n        this.multiline = false;\n        if (changes.has(languageResolverUpdatedSymbol)) {\n            this.clearNumberFormatterCache();\n        }\n    }\n\n    private isComposing = false;\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        this.addEventListener('keydown', this.handleKeydown);\n        this.addEventListener('compositionstart', this.handleCompositionStart);\n        this.addEventListener('compositionend', this.handleCompositionEnd);\n    }\n\n    protected override updated(changes: PropertyValues<this>): void {\n        if (changes.has('min') || changes.has('formatOptions')) {\n            let inputMode = 'numeric';\n            const hasNegative = typeof this.min !== 'undefined' && this.min < 0;\n            const { maximumFractionDigits } =\n                this.numberFormatter.resolvedOptions();\n            const hasDecimals = maximumFractionDigits > 0;\n            /* c8 ignore next 18 */\n            if (isIPhone()) {\n                // iPhone doesn't have a minus sign in either numeric or decimal.\n                // Note this is only for iPhone, not iPad, which always has both\n                // minus and decimal in numeric.\n                if (hasNegative) {\n                    inputMode = 'text';\n                } else if (hasDecimals) {\n                    inputMode = 'decimal';\n                }\n            } else if (isAndroid()) {\n                // Android numeric has both a decimal point and minus key.\n                // decimal does not have a minus key.\n                if (hasNegative) {\n                    inputMode = 'numeric';\n                } else if (hasDecimals) {\n                    inputMode = 'decimal';\n                }\n            }\n            this.inputElement.inputMode = inputMode;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "nothing", "property", "query", "LanguageResolutionController", "languageResolverUpdatedSymbol", "streamingListener", "NumberFormatter", "NumberParser", "isAndroid", "isIPhone", "TextfieldBase", "chevronStyles", "styles", "chevronIcon", "dir", "value", "rawValue", "oldValue", "_a", "parts", "sourceDecimal", "char", "replacementDecimal", "part", "event", "stepUpRect", "stepDownRect", "count", "min", "factor", "direction", "originalValue", "selectionStart", "valueAsNumber", "currentLength", "previousLength", "nextSelectStart", "signMultiplier", "moduloStep", "indeterminateValue", "style", "unit", "unitDisplay", "formatOptionsNoUnit", "error", "changes", "inputMode", "hasNegative", "maximumFractionDigits", "hasDecimals", "__decorateClass"]
}
