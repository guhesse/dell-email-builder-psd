{
  "version": 3,
  "sources": ["icons-demo.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { IconsetAddedDetail } from '@spectrum-web-components/iconset';\nimport {\n    css,\n    CSSResultGroup,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    customElement,\n    property,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport { Search } from '@spectrum-web-components/search';\nimport '@spectrum-web-components/search/sp-search.js';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport bodyStyles from '@spectrum-web-components/styles/body.js';\nimport '@spectrum-web-components/icon/sp-icon.js';\nimport '@spectrum-web-components/help-text/sp-help-text.js';\n\n@customElement('delayed-ready')\nexport class DelayedReady extends SpectrumElement {\n    _delayedReady!: Promise<void>;\n    _resolveDelayedReady!: () => void;\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n    }\n\n    protected override firstUpdated(): void {\n        this._delayedReady = new Promise(\n            (res) => (this._resolveDelayedReady = res)\n        );\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this._delayedReady;\n        return complete;\n    }\n\n    public handleSlotchange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        if (target.assignedElements({ flatten: true }).length) {\n            requestAnimationFrame(() => {\n                this._resolveDelayedReady();\n            });\n        }\n    }\n}\n\n@customElement('icons-demo')\nexport class IconsDemo extends SpectrumElement {\n    @property()\n    public name = 'ui';\n\n    @property()\n    public package = '';\n\n    @property()\n    public size = 'm';\n\n    @property()\n    public search = '';\n\n    @property({ attribute: false })\n    public icons: {\n        name: string;\n        story(size: string): TemplateResult;\n        tag: string;\n    }[] = [];\n\n    private iconset: string[] = [];\n    public constructor() {\n        super();\n        this.iconset = [];\n        this.handleIconSetAdded = this.handleIconSetAdded.bind(this);\n    }\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        window.addEventListener('sp-iconset-added', this.handleIconSetAdded);\n    }\n    public override disconnectedCallback(): void {\n        window.removeEventListener('sp-iconset-added', this.handleIconSetAdded);\n        super.disconnectedCallback();\n    }\n    public handleIconSetAdded(event: CustomEvent<IconsetAddedDetail>): void {\n        const { iconset } = event.detail;\n        this.iconset = iconset.getIconList();\n        this.requestUpdate();\n    }\n    public static override get styles(): CSSResultGroup {\n        return [\n            ...bodyStyles,\n            css`\n                :host {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n                    gap: 20px;\n                    align-items: flex-start;\n                }\n                .icon {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    text-align: center;\n                    border-radius: var(\n                        --spectrum-alias-focus-ring-gap,\n                        var(--spectrum-global-dimension-static-size-25)\n                    );\n                }\n                :host([package]) .icon {\n                    cursor: pointer;\n                }\n                sp-icon {\n                    margin-bottom: 10px;\n                }\n                .search {\n                    grid-column-start: 1;\n                    grid-column-end: -1;\n                }\n                .icon[tabindex]:focus {\n                    outline: none;\n                }\n                .icon[tabindex]:focus-visible {\n                    outline: var(--spectrum-alias-focus-ring-size) solid\n                        var(--spectrum-alias-focus-ring-color);\n                    outline-offset: calc(\n                        var(\n                                --spectrum-alias-focus-ring-gap,\n                                var(--spectrum-global-dimension-static-size-25)\n                            ) * 2\n                    );\n                }\n            `,\n        ];\n    }\n    private handleKeydown(event: KeyboardEvent, tag: string): void {\n        const { code } = event;\n        if (code !== 'Enter' && code !== 'NumpadEnter' && code !== 'Space') {\n            return;\n        }\n        event.preventDefault();\n        this.shouldCopy(tag);\n    }\n\n    private shouldCopy(tag: string): void {\n        if (!this.package) return;\n        const conditionedTag = tag.slice(1, tag.length - 1);\n        const importURL = `import '@spectrum-web-components/${this.package}/icons/${conditionedTag}.js';`;\n        this.dispatchEvent(\n            new CustomEvent('copy-text', {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    message: 'Import statement copied to clipboard!',\n                    text: importURL,\n                },\n            })\n        );\n    }\n    private updateSearch(event: Event & { target: Search }): void {\n        event.stopPropagation();\n        this.search = event.target.value;\n    }\n    private submit(event: Event & { target: Search }): void {\n        event.stopPropagation();\n        this.updateSearch(event);\n    }\n    private renderSearch(): TemplateResult {\n        const matchingIcons = this.search\n            ? this.icons.filter(\n                  (icon) => icon.name.toLowerCase().search(this.search) !== -1\n              )\n            : this.icons;\n        return html`\n            <div class=\"search\" part=\"search\">\n                <sp-field-label for=\"search\">Spectrum icons:</sp-field-label>\n                <sp-search\n                    id=\"search\"\n                    @keydown=${this.updateSearch}\n                    @input=${this.updateSearch}\n                    @submit=${this.submit}\n                    .value=${this.search}\n                    label=\"Search for icons\"\n                    autocomplete=\"off\"\n                >\n                    <sp-help-text slot=\"help-text\">\n                        Showing ${matchingIcons.length} of ${this.icons.length}\n                        available icons.\n                    </sp-help-text>\n                </sp-search>\n            </div>\n            ${matchingIcons.map((icon) => {\n                return html`\n                    <bdo\n                        class=\"icon\"\n                        part=\"icon\"\n                        dir=\"ltr\"\n                        class=\"icon\"\n                        @click=${() => this.shouldCopy(icon.tag)}\n                        @keydown=${(event: KeyboardEvent) =>\n                            this.handleKeydown(event, icon.tag)}\n                        tabindex=${ifDefined(this.package ? '0' : undefined)}\n                    >\n                        ${icon.story(this.size)} ${icon.tag}\n                    </bdo>\n                `;\n            })}\n        `;\n    }\n    protected override render(): TemplateResult {\n        return html`\n            ${this.icons.length\n                ? this.renderSearch()\n                : html`\n                      <slot></slot>\n                  `}\n            ${this.iconset.map(\n                (icon) => html`\n                    <bdo class=\"icon\" dir=\"ltr\">\n                        <sp-icon\n                            size=\"xl\"\n                            name=${`${this.name}:${icon}`}\n                        ></sp-icon>\n                        ${icon}\n                    </bdo>\n                `\n            )}\n        `;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
