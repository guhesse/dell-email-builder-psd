{
  "version": 3,
  "sources": ["overlay-trigger-longpress.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport { ActionButton } from '@spectrum-web-components/action-button';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/action-group/sp-action-group.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-magnify.js';\nimport { Popover } from '@spectrum-web-components/popover';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport {\n    LONGPRESS_INSTRUCTIONS,\n    OverlayTrigger,\n} from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { spy } from 'sinon';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { findDescribedNode } from '../../../test/testing-helpers-a11y.js';\n\ndescribe('Overlay Trigger - Longpress', () => {\n    it('displays `longpress` content', async () => {\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger placement=\"right-start\">\n                    <sp-action-button slot=\"trigger\" hold-affordance>\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"longpress-content\" tip>\n                        <sp-action-group\n                            selects=\"single\"\n                            vertical\n                            style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100)) / 2);\"\n                        >\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                        </sp-action-group>\n                    </sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n\n        await elementUpdated(el);\n\n        const trigger = el.querySelector('sp-action-button') as ActionButton;\n        const content = el.querySelector(\n            '[slot=\"longpress-content\"]'\n        ) as Popover;\n\n        expect(trigger).to.not.be.null;\n        expect(content).to.not.be.null;\n        expect(content.open).to.be.false;\n\n        trigger.focus();\n        let open = oneEvent(el, 'sp-opened');\n        await sendKeys({\n            press: 'Space',\n        });\n        await open;\n        expect(content.open, 'opens for `Space`').to.be.true;\n\n        let closed = oneEvent(el, 'sp-closed');\n        document.body.click();\n        await closed;\n\n        expect(!content.open, 'closes for `Space`').to.be.true;\n\n        trigger.focus();\n        open = oneEvent(el, 'sp-opened');\n        sendKeys({\n            press: 'Alt+ArrowDown',\n        });\n        await open;\n        expect(content.open, 'opens for `Alt+ArrowDown`').to.be.true;\n        closed = oneEvent(el, 'sp-closed');\n        await sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n        expect(!content.open, 'closes for `Alt+ArrowDown`').to.be.true;\n        await elementUpdated(el);\n\n        open = oneEvent(el, 'sp-opened');\n        trigger.dispatchEvent(new PointerEvent('pointerdown', { button: 0 }));\n        await open;\n        expect(content.open, 'opens for `pointerdown`').to.be.true;\n        closed = oneEvent(el, 'sp-closed');\n        await sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n        expect(!content.open, 'closes for `pointerdown`').to.be.true;\n    });\n    it('displays `longpress` declaratively', async () => {\n        const openedSpy = spy();\n        const closedSpy = spy();\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger\n                    placement=\"right-start\"\n                    open=\"longpress\"\n                    @sp-opened=${() => openedSpy()}\n                    @sp-closed=${() => closedSpy()}\n                >\n                    <sp-action-button slot=\"trigger\" hold-affordance>\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"longpress-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n        await elementUpdated(el);\n\n        await waitUntil(\n            () => openedSpy.calledOnce,\n            'longpress content projected to overlay',\n            { timeout: 2000 }\n        );\n\n        const closed = oneEvent(el, 'sp-closed');\n        el.removeAttribute('open');\n        await closed;\n\n        expect(closedSpy.calledOnce, 'longpress content returned').to.be.true;\n    });\n    it('describes longpress interaction accessibly', async () => {\n        const el = await fixture<OverlayTrigger>(\n            html`\n                <overlay-trigger placement=\"right-start\">\n                    <sp-action-button slot=\"trigger\" hold-affordance>\n                        Trigger with hold affordance\n                    </sp-action-button>\n                    <sp-popover slot=\"longpress-content\" tip>\n                        <sp-action-group\n                            selects=\"single\"\n                            vertical\n                            style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100)) / 2);\"\n                        >\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                        </sp-action-group>\n                    </sp-popover>\n                </overlay-trigger>\n            `\n        );\n        const trigger = el.querySelector('[slot=\"trigger\"]') as HTMLElement;\n\n        await elementUpdated(el);\n\n        expect(trigger.hasAttribute('aria-describedby')).to.be.true;\n        expect(el.open).to.be.undefined;\n        /*\n         * This test passes because OverlayTrigger adds a new node to describe\n         * the longpress interaction now available on the trigger element\n         */\n        expect(el.childNodes.length, 'always').to.equal(6);\n\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n\n        const opened = oneEvent(el, 'sp-opened');\n        trigger.dispatchEvent(\n            new Event('longpress', { bubbles: true, composed: true })\n        );\n        await opened;\n\n        expect(el.open).to.equal('longpress');\n        expect(el.childNodes.length, 'always').to.equal(6);\n\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n\n        const closed = oneEvent(el, 'sp-closed');\n\n        await sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n\n        expect(el.open).to.be.null;\n        expect(trigger.hasAttribute('aria-describedby')).to.be.true;\n        expect(el.childNodes.length, 'always').to.equal(6);\n\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n    });\n    it('removes longpress `aria-describedby` description element when longpress content is removed', async () => {\n        const el = await fixture<OverlayTrigger>(\n            html`\n                <overlay-trigger placement=\"right-start\">\n                    <sp-action-button slot=\"trigger\" hold-affordance>\n                        Trigger with hold affordance\n                    </sp-action-button>\n                    <sp-popover slot=\"longpress-content\" tip>\n                        <sp-action-group\n                            selects=\"single\"\n                            vertical\n                            style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100)) / 2);\"\n                        >\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-action-button>\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                        </sp-action-group>\n                    </sp-popover>\n                </overlay-trigger>\n            `\n        );\n        const trigger = el.querySelector('[slot=\"trigger\"]') as HTMLElement;\n        const content = el.querySelector(\n            '[slot=\"longpress-content\"]'\n        ) as Popover;\n        await elementUpdated(el);\n\n        expect(el.hasLongpressContent).to.be.true;\n        expect(el.childNodes.length, 'always').to.equal(6);\n\n        el.removeAttribute('hold-affordance');\n        el.removeChild(content);\n\n        await elementUpdated(el);\n\n        expect(trigger.hasAttribute('aria-describedby')).to.be.false;\n        expect(el.hasLongpressContent).to.be.false;\n        expect(el.childNodes.length, 'always').to.equal(4);\n\n        el.setAttribute('hold-affordance', 'true');\n        el.append(content);\n\n        await elementUpdated(el);\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n\n        expect(el.hasLongpressContent).to.be.true;\n        expect(el.childNodes.length, 'always').to.equal(6);\n    });\n    it('recognises multiple overlay triggers in a11y tree', async () => {\n        const el = await fixture<OverlayTrigger>(\n            html`\n                <div id=\"container\">\n                    <overlay-trigger id=\"first-trigger\" placement=\"right-start\">\n                        <sp-action-button slot=\"trigger\" hold-affordance>\n                            First button\n                        </sp-action-button>\n                        <sp-popover slot=\"longpress-content\" tip>\n                            <sp-action-group\n                                selects=\"single\"\n                                vertical\n                                style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100)) / 2);\"\n                            >\n                                <sp-action-button>\n                                    <sp-icon-magnify\n                                        slot=\"icon\"\n                                    ></sp-icon-magnify>\n                                </sp-action-button>\n                            </sp-action-group>\n                        </sp-popover>\n                    </overlay-trigger>\n                    <overlay-trigger id=\"second-trigger\" placement=\"left-start\">\n                        <sp-action-button slot=\"trigger\" hold-affordance>\n                            Second button\n                        </sp-action-button>\n                        <sp-popover slot=\"longpress-content\" tip>\n                            <sp-action-group\n                                selects=\"single\"\n                                vertical\n                                style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100)) / 2);\"\n                            >\n                                <sp-action-button>\n                                    <sp-icon-magnify\n                                        slot=\"icon\"\n                                    ></sp-icon-magnify>\n                                </sp-action-button>\n                            </sp-action-group>\n                        </sp-popover>\n                    </overlay-trigger>\n                </div>\n            `\n        );\n        await elementUpdated(el);\n\n        const div = document.getElementById('container') as HTMLElement;\n        const firstTrigger = document.getElementById(\n            'first-trigger'\n        ) as OverlayTrigger;\n        const secondTrigger = document.getElementById(\n            'second-trigger'\n        ) as OverlayTrigger;\n\n        expect(firstTrigger.hasLongpressContent).to.be.true;\n        expect(secondTrigger.hasLongpressContent).to.be.true;\n        expect(div.childNodes.length, 'always').to.equal(5);\n\n        await findDescribedNode(\n            'First button',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n        await findDescribedNode(\n            'Second button',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n    });\n    it('describes interactions differently to the user', async () => {\n        const test = await fixture<OverlayTrigger>(\n            html`\n                <div>\n                    <input id=\"first\" />\n                    <overlay-trigger placement=\"right-start\">\n                        <sp-action-button slot=\"trigger\" hold-affordance>\n                            Trigger with hold affordance\n                        </sp-action-button>\n                        <sp-popover slot=\"longpress-content\" tip>\n                            <sp-action-group\n                                selects=\"single\"\n                                vertical\n                                style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100)) / 2);\"\n                            >\n                                <sp-action-button>\n                                    <sp-icon-magnify\n                                        slot=\"icon\"\n                                    ></sp-icon-magnify>\n                                </sp-action-button>\n                                <sp-action-button>\n                                    <sp-icon-magnify\n                                        slot=\"icon\"\n                                    ></sp-icon-magnify>\n                                </sp-action-button>\n                                <sp-action-button>\n                                    <sp-icon-magnify\n                                        slot=\"icon\"\n                                    ></sp-icon-magnify>\n                                </sp-action-button>\n                            </sp-action-group>\n                        </sp-popover>\n                    </overlay-trigger>\n                    <input id=\"last\" />\n                </div>\n            `\n        );\n        const el = test.querySelector('overlay-trigger') as OverlayTrigger;\n        const first = test.querySelector('#first') as HTMLElement;\n        const firstRect = first.getBoundingClientRect();\n        const trigger = el.querySelector('sp-action-button') as HTMLElement;\n        const content = el.querySelector(\n            '[slot=\"longpress-content\"]'\n        ) as Popover;\n\n        await elementUpdated(el);\n\n        expect(trigger).to.not.be.null;\n        expect(content).to.not.be.null;\n        expect(trigger.hasAttribute('aria-describedby')).to.be.true;\n        expect(content.open).to.be.false;\n\n        first.focus();\n\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        expect(document.activeElement === trigger, 'Trigger focused').to.be\n            .true;\n\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n\n        /*\n         * The following re-establishes that focus is not visible\n         * for this portion of the test. That way, the LONGPRESS_INSTRUCTIONS\n         * change appropriately depending on the type of interaction.\n         */\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [firstRect.x, firstRect.y],\n                },\n            ],\n        });\n\n        trigger.focus();\n\n        await nextFrame();\n        await nextFrame();\n\n        await findDescribedNode(\n            'Trigger with hold affordance',\n            LONGPRESS_INSTRUCTIONS.keyboard\n        );\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
