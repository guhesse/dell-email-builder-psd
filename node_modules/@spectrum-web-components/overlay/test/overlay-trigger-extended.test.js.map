{
  "version": 3,
  "sources": ["overlay-trigger-extended.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\n\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport {\n    ActiveOverlay,\n    OverlayTrigger,\n} from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { Popover } from '@spectrum-web-components/popover';\nimport '@spectrum-web-components/textfield/sp-textfield.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\n\nconst initTest = async (\n    styles = html``\n): Promise<{\n    overlayTrigger: OverlayTrigger;\n    button: Button;\n    popover: Popover;\n}> => {\n    const test = await fixture<HTMLDivElement>(\n        html`\n            <div class=\"container\">\n                <style>\n                    .container {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                    }\n                </style>\n                ${styles}\n                <overlay-trigger type=\"modal\" id=\"trigger\" placement=\"top\">\n                    <sp-button\n                        id=\"outer-button\"\n                        variant=\"primary\"\n                        slot=\"trigger\"\n                    >\n                        Show Popover\n                    </sp-button>\n                    <sp-popover\n                        id=\"outer-popover\"\n                        dialog\n                        slot=\"click-content\"\n                        direction=\"bottom\"\n                        tip\n                        open\n                        tabindex=\"0\"\n                        placement=\"top\"\n                    >\n                        This is the overlay content.\n                    </sp-popover>\n                </overlay-trigger>\n            </div>\n        `\n    );\n    return {\n        overlayTrigger: test.querySelector('overlay-trigger') as OverlayTrigger,\n        button: test.querySelector('sp-button') as Button,\n        popover: test.querySelector('sp-popover') as Popover,\n    };\n};\n\ndescribe('Overlay Trigger - extended', () => {\n    let overlayTrigger!: OverlayTrigger;\n    let button!: Button;\n    let popover!: Popover;\n\n    afterEach(async () => {\n        if (overlayTrigger.open) {\n            const closed = oneEvent(overlayTrigger, 'sp-closed');\n            overlayTrigger.open = undefined;\n            await closed;\n        }\n    });\n\n    it('manages `placement` on open', async () => {\n        ({ overlayTrigger, button, popover } = await initTest());\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n\n        expect(popover.placement).to.equal('bottom');\n\n        const close = oneEvent(overlayTrigger, 'sp-closed');\n        overlayTrigger.open = undefined;\n        await close;\n\n        expect(popover.placement).to.equal('top');\n    });\n\n    it('manages `placement` on scroll', async () => {\n        ({ overlayTrigger, button, popover } = await initTest(html`\n            <style>\n                sp-button {\n                    margin: 100vh 0;\n                    transform: translateY(-100%);\n                }\n            </style>\n        `));\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n\n        expect(popover.placement).to.equal('top');\n\n        const { scrollHeight } = document.documentElement;\n        document.documentElement.scrollTop = scrollHeight / 2;\n\n        // one frame for scroll to trigger\n        await nextFrame();\n        // one frame for the UI to update\n        await nextFrame();\n        // _then_ we test...\n        expect(popover.placement).to.equal('bottom');\n    });\n\n    it('occludes content behind the overlay', async () => {\n        ({ overlayTrigger, button, popover } = await initTest());\n        const textfield = document.createElement('sp-textfield');\n        document.body.append(textfield);\n\n        const boundingRect = textfield.getBoundingClientRect();\n        expect(document.activeElement).to.not.equal(textfield);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        boundingRect.left + boundingRect.width / 2,\n                        boundingRect.top + boundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        expect(document.activeElement).to.equal(textfield);\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n\n        expect(overlayTrigger.open).to.equal('click');\n        expect(popover.placement).to.equal('bottom');\n\n        const close = oneEvent(overlayTrigger, 'sp-closed');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        boundingRect.left + boundingRect.width / 2,\n                        boundingRect.top + boundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await close;\n        expect(overlayTrigger.open).to.be.null;\n        expect(document.activeElement).to.not.equal(textfield);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        boundingRect.left + boundingRect.width / 2,\n                        boundingRect.top + boundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        expect(document.activeElement).to.equal(textfield);\n        textfield.remove();\n    });\n\n    xit('occludes wheel interactions behind the overlay', async () => {\n        /**\n         * This test \"passes\" when tested manually in browser, but\n         * not when leveraged in the automated test process.\n         *\n         * xit for now...\n         **/\n        ({ overlayTrigger, button, popover } = await initTest());\n        const scrollingArea = document.createElement('div');\n        Object.assign(scrollingArea.style, {\n            width: '100px',\n            height: '100px',\n            overflow: 'auto',\n        });\n        const content = Array(100).fill(\n            'This is content within my box that will scroll.'\n        );\n        scrollingArea.textContent = content.join(' ');\n        document.body.append(scrollingArea);\n        await nextFrame();\n\n        const boundingRect = scrollingArea.getBoundingClientRect();\n        expect(scrollingArea.scrollTop).to.equal(0);\n        const distance = 1;\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        boundingRect.left + boundingRect.width / 2,\n                        boundingRect.top + boundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await sendMouse({\n            steps: [\n                {\n                    type: 'wheel',\n                    position: [0, distance],\n                },\n            ],\n        });\n        // wait for scroll to complete\n        await waitUntil(\n            () => scrollingArea.scrollTop === distance,\n            `scroll went to ${distance}`\n        );\n        expect(scrollingArea.scrollTop).to.equal(distance);\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n        const activeOverlay = document.querySelector(\n            'active-overlay'\n        ) as ActiveOverlay;\n        await elementUpdated(activeOverlay);\n\n        expect(overlayTrigger.open).to.equal('click');\n        expect(popover.placement).to.equal('bottom');\n        expect(scrollingArea.scrollTop).to.equal(distance);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'wheel',\n                    position: [0, -distance],\n                },\n            ],\n        });\n        // Awaiting here points out that this always fails in Firefox\n        // and also was failing in WebKit without our knowing.\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        expect(\n            scrollingArea.scrollTop,\n            `scrollTop should be ${distance}.`\n        ).to.equal(distance);\n        scrollingArea.remove();\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
