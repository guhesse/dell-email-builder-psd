{
  "version": 3,
  "sources": ["overlay-trigger-click.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-magnify.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport {\n    OverlayTrigger,\n    TriggerInteractions,\n} from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { spy } from 'sinon';\nimport { ActionButton } from '@spectrum-web-components/action-button';\n\ndescribe('Overlay Trigger - Click', () => {\n    it('displays `click` declaratively', async () => {\n        const openedSpy = spy();\n        const closedSpy = spy();\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger\n                    placement=\"right-start\"\n                    open=\"click\"\n                    @sp-opened=${() => openedSpy()}\n                    @sp-closed=${() => closedSpy()}\n                >\n                    <sp-action-button slot=\"trigger\">\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"click-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n        await elementUpdated(el);\n\n        await waitUntil(\n            () => openedSpy.calledOnce,\n            'click content projected to overlay',\n            { timeout: 2000 }\n        );\n\n        el.removeAttribute('open');\n        await elementUpdated(el);\n\n        await waitUntil(() => closedSpy.calledOnce, 'click content returned', {\n            timeout: 2000,\n        });\n    });\n    describe('closes on scroll', () => {\n        afterEach(() => {\n            if (document.scrollingElement) {\n                document.scrollingElement.scrollTop = 0;\n            }\n        });\n        (['click', 'replace', 'inline'] as TriggerInteractions[]).map(\n            (interaction) => {\n                it(`closes \"${interaction}\" overlay on scroll`, async () => {\n                    const el = await fixture<OverlayTrigger>(html`\n                        <overlay-trigger\n                            placement=\"right-start\"\n                            type=${interaction}\n                        >\n                            <sp-action-button\n                                slot=\"trigger\"\n                                style=\"margin: 50vh 0 100vh;\"\n                            >\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-popover slot=\"click-content\" tip></sp-popover>\n                        </overlay-trigger>\n                    `);\n                    expect(el.open).to.be.undefined;\n\n                    await elementUpdated(el);\n                    const opened = oneEvent(el, 'sp-opened');\n                    el.open = 'click';\n                    await opened;\n\n                    expect(el.open).to.equal('click');\n\n                    const closed = oneEvent(el, 'sp-closed');\n                    if (document.scrollingElement) {\n                        document.scrollingElement.scrollTop = 100;\n                    }\n                    await closed;\n\n                    expect(el.open).to.be.null;\n                });\n            }\n        );\n    });\n    it('opens a second time', async () => {\n        const openedSpy = spy();\n        const closedSpy = spy();\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger\n                placement=\"right-start\"\n                type=\"modal\"\n                open=\"click\"\n                @sp-opened=${() => openedSpy()}\n                @sp-closed=${() => closedSpy()}\n            >\n                <sp-action-button slot=\"trigger\">\n                    <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                </sp-action-button>\n                <sp-popover slot=\"click-content\" tip></sp-popover>\n            </overlay-trigger>\n        `);\n        await elementUpdated(el);\n        const trigger = el.querySelector('[slot=trigger]') as ActionButton;\n\n        await waitUntil(\n            () => openedSpy.calledOnce,\n            'click content projected to overlay',\n            { timeout: 2000 }\n        );\n        expect(el.open).to.equal('click');\n\n        el.removeAttribute('open');\n        await elementUpdated(el);\n\n        await waitUntil(() => closedSpy.calledOnce, 'click content returned', {\n            timeout: 2000,\n        });\n\n        expect(el.open).to.be.null;\n\n        trigger.click();\n        await waitUntil(\n            () => openedSpy.callCount === 2,\n            'click content projected to overlay, again',\n            { timeout: 2000 }\n        );\n        expect(el.open).to.equal('click');\n    });\n});\n"],
  "mappings": ";AAWA;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACG;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AAKP,OAAO;AACP,SAAS,WAAW;AAGpB,SAAS,2BAA2B,MAAM;AACtC,KAAG,kCAAkC,YAAY;AAC7C,UAAM,YAAY,IAAI;AACtB,UAAM,YAAY,IAAI;AACtB,UAAM,KAAK,MAAM;AAAA,OACZ,MAAM;AAAA;AAAA;AAAA;AAAA,iCAIc,MAAM,UAAU;AAAA,iCAChB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAOlC;AAAA,IACP;AACA,UAAM,eAAe,EAAE;AAEvB,UAAM;AAAA,MACF,MAAM,UAAU;AAAA,MAChB;AAAA,MACA,EAAE,SAAS,IAAK;AAAA,IACpB;AAEA,OAAG,gBAAgB,MAAM;AACzB,UAAM,eAAe,EAAE;AAEvB,UAAM,UAAU,MAAM,UAAU,YAAY,0BAA0B;AAAA,MAClE,SAAS;AAAA,IACb,CAAC;AAAA,EACL,CAAC;AACD,WAAS,oBAAoB,MAAM;AAC/B,cAAU,MAAM;AACZ,UAAI,SAAS,kBAAkB;AAC3B,iBAAS,iBAAiB,YAAY;AAAA,MAC1C;AAAA,IACJ,CAAC;AACD,IAAC,CAAC,SAAS,WAAW,QAAQ,EAA4B;AAAA,MACtD,CAAC,gBAAgB;AACb,WAAG,WAAW,kCAAkC,YAAY;AACxD,gBAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA,mCAG1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAUd;AACD,iBAAO,GAAG,IAAI,EAAE,GAAG,GAAG;AAEtB,gBAAM,eAAe,EAAE;AACvB,gBAAM,SAAS,SAAS,IAAI,WAAW;AACvC,aAAG,OAAO;AACV,gBAAM;AAEN,iBAAO,GAAG,IAAI,EAAE,GAAG,MAAM,OAAO;AAEhC,gBAAM,SAAS,SAAS,IAAI,WAAW;AACvC,cAAI,SAAS,kBAAkB;AAC3B,qBAAS,iBAAiB,YAAY;AAAA,UAC1C;AACA,gBAAM;AAEN,iBAAO,GAAG,IAAI,EAAE,GAAG,GAAG;AAAA,QAC1B,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ,CAAC;AACD,KAAG,uBAAuB,YAAY;AAClC,UAAM,YAAY,IAAI;AACtB,UAAM,YAAY,IAAI;AACtB,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,6BAKpB,MAAM,UAAU;AAAA,6BAChB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOpC;AACD,UAAM,eAAe,EAAE;AACvB,UAAM,UAAU,GAAG,cAAc,gBAAgB;AAEjD,UAAM;AAAA,MACF,MAAM,UAAU;AAAA,MAChB;AAAA,MACA,EAAE,SAAS,IAAK;AAAA,IACpB;AACA,WAAO,GAAG,IAAI,EAAE,GAAG,MAAM,OAAO;AAEhC,OAAG,gBAAgB,MAAM;AACzB,UAAM,eAAe,EAAE;AAEvB,UAAM,UAAU,MAAM,UAAU,YAAY,0BAA0B;AAAA,MAClE,SAAS;AAAA,IACb,CAAC;AAED,WAAO,GAAG,IAAI,EAAE,GAAG,GAAG;AAEtB,YAAQ,MAAM;AACd,UAAM;AAAA,MACF,MAAM,UAAU,cAAc;AAAA,MAC9B;AAAA,MACA,EAAE,SAAS,IAAK;AAAA,IACpB;AACA,WAAO,GAAG,IAAI,EAAE,GAAG,MAAM,OAAO;AAAA,EACpC,CAAC;AACL,CAAC;",
  "names": []
}
