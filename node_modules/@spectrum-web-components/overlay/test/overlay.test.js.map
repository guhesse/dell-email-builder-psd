{
  "version": 3,
  "sources": ["overlay.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport { Dialog } from '@spectrum-web-components/dialog';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { Popover } from '@spectrum-web-components/popover';\nimport { setViewport } from '@web/test-runner-commands';\nimport {\n    ActiveOverlay,\n    Overlay,\n    OverlayTrigger,\n    Placement,\n} from '@spectrum-web-components/overlay';\n\nimport { isVisible } from '../../../test/testing-helpers.js';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport { sendKeys } from '@web/test-runner-commands';\nimport {\n    definedOverlayElement,\n    virtualElement,\n} from '../stories/overlay.stories';\nimport { PopoverContent } from '../stories/overlay-story-components.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\n\ndescribe('Overlays', () => {\n    let testDiv!: HTMLDivElement;\n    let openOverlays: (() => void)[] = [];\n\n    beforeEach(async () => {\n        testDiv = await fixture<HTMLDivElement>(\n            html`\n                <div id=\"top\">\n                    <style>\n                        body {\n                            display: flex;\n                            align-items: center;\n                            justify-content: center;\n                        }\n\n                        #top {\n                            margin: 100px;\n                        }\n\n                        sp-button {\n                            flex: none;\n                        }\n\n                        #overlay-content {\n                            display: none;\n                        }\n                    </style>\n                    <sp-button\n                        id=\"first-button\"\n                        variant=\"primary\"\n                        slot=\"trigger\"\n                    >\n                        Show Popover\n                    </sp-button>\n                    <div id=\"overlay-content\">\n                        <sp-popover\n                            id=\"outer-popover\"\n                            dialog\n                            slot=\"click-content\"\n                            direction=\"bottom\"\n                            tip\n                            open\n                        >\n                            <div class=\"options-popover-content\">\n                                A popover message\n                            </div>\n                        </sp-popover>\n                        <div id=\"hover-1\" class=\"hover-content\">\n                            Hover message\n                        </div>\n                        <div id=\"hover-2\" class=\"hover-content\">\n                            Other hover message\n                        </div>\n                    </div>\n                </div>\n            `\n        );\n        await elementUpdated(testDiv);\n    });\n\n    afterEach(() => {\n        openOverlays.map((close) => close());\n        openOverlays = [];\n    });\n\n    [\n        'bottom',\n        'bottom-start',\n        'bottom-end',\n        'top',\n        'top-start',\n        'top-end',\n        'left',\n        'left-start',\n        'left-end',\n        'right',\n        'right-start',\n        'right-end',\n        'none',\n    ].map((direction) => {\n        const placement = direction as Placement;\n        it(`opens a popover - ${placement}`, async () => {\n            const button = testDiv.querySelector(\n                '#first-button'\n            ) as HTMLElement;\n            const outerPopover = testDiv.querySelector(\n                '#outer-popover'\n            ) as Popover;\n\n            expect(outerPopover.parentElement).to.exist;\n            if (outerPopover.parentElement) {\n                expect(outerPopover.parentElement.id).to.equal(\n                    'overlay-content'\n                );\n            }\n\n            expect(isVisible(outerPopover)).to.be.false;\n\n            expect(button).to.exist;\n\n            const opened = oneEvent(button, 'sp-opened');\n            openOverlays.push(\n                await Overlay.open(button, 'click', outerPopover, {\n                    delayed: false,\n                    placement,\n                    offset: 10,\n                })\n            );\n            await opened;\n\n            expect(outerPopover.parentElement).to.exist;\n            if (outerPopover.parentElement) {\n                expect(outerPopover.parentElement.id).not.to.equal(\n                    'overlay-content'\n                );\n            }\n            expect(isVisible(outerPopover)).to.be.true;\n        });\n    });\n\n    it(`updates a popover`, async () => {\n        const button = testDiv.querySelector('#first-button') as HTMLElement;\n        const outerPopover = testDiv.querySelector('#outer-popover') as Popover;\n\n        expect(outerPopover.parentElement).to.exist;\n        if (outerPopover.parentElement) {\n            expect(outerPopover.parentElement.id).to.equal('overlay-content');\n        }\n\n        expect(isVisible(outerPopover)).to.be.false;\n\n        expect(button).to.exist;\n\n        const opened = oneEvent(button, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(button, 'click', outerPopover, {\n                delayed: false,\n                offset: 10,\n            })\n        );\n        await opened;\n\n        expect(isVisible(outerPopover)).to.be.true;\n\n        Overlay.update();\n\n        expect(isVisible(outerPopover)).to.be.true;\n    });\n\n    it(`opens a popover w/ delay`, async () => {\n        const button = testDiv.querySelector('#first-button') as HTMLElement;\n        const outerPopover = testDiv.querySelector('#outer-popover') as Popover;\n\n        expect(outerPopover.parentElement).to.exist;\n        if (outerPopover.parentElement) {\n            expect(outerPopover.parentElement.id).to.equal('overlay-content');\n        }\n\n        expect(isVisible(outerPopover)).to.be.false;\n\n        expect(button).to.exist;\n\n        const opened = oneEvent(button, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(button, 'click', outerPopover, {\n                delayed: true,\n                offset: 10,\n            })\n        );\n        await opened;\n\n        expect(outerPopover.parentElement).to.exist;\n        if (outerPopover.parentElement) {\n            expect(outerPopover.parentElement.id).not.to.equal(\n                'overlay-content'\n            );\n        }\n        expect(isVisible(outerPopover)).to.be.true;\n    });\n\n    it('opens hover overlay', async () => {\n        const button = testDiv.querySelector('#first-button') as HTMLElement;\n        const hoverOverlay = testDiv.querySelector('#hover-1') as HTMLElement;\n        const clickOverlay = testDiv.querySelector(\n            '#outer-popover'\n        ) as HTMLElement;\n\n        expect(isVisible(hoverOverlay)).to.be.false;\n        expect(isVisible(clickOverlay)).to.be.false;\n\n        let opened = oneEvent(button, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(button, 'hover', hoverOverlay, {\n                delayed: false,\n                placement: 'top',\n                offset: 10,\n            })\n        );\n        await opened;\n\n        expect(hoverOverlay.parentElement).to.exist;\n        if (hoverOverlay.parentElement) {\n            expect(hoverOverlay.parentElement.id).not.to.equal(\n                'overlay-content'\n            );\n        }\n        expect(isVisible(hoverOverlay)).to.be.true;\n\n        opened = oneEvent(button, 'sp-opened');\n        // Opening click overlay should close the hover overlay\n        openOverlays.push(\n            await Overlay.open(button, 'click', clickOverlay, {\n                delayed: false,\n                placement: 'bottom',\n                offset: 10,\n            })\n        );\n        await opened;\n        if (hoverOverlay.parentElement) {\n            expect(hoverOverlay.parentElement.id).to.equal('overlay-content');\n        }\n\n        expect(isVisible(hoverOverlay)).to.be.false;\n        expect(isVisible(clickOverlay)).to.be.true;\n    });\n\n    it('opens custom overlay', async () => {\n        const button = testDiv.querySelector('#first-button') as HTMLElement;\n        const customOverlay = testDiv.querySelector('#hover-1') as HTMLElement;\n        const clickOverlay = testDiv.querySelector(\n            '#outer-popover'\n        ) as HTMLElement;\n\n        expect(button).to.exist;\n        expect(customOverlay).to.exist;\n\n        expect(isVisible(customOverlay)).to.be.false;\n        expect(isVisible(clickOverlay)).to.be.false;\n\n        let opened = oneEvent(button, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(button, 'custom', customOverlay, {\n                delayed: false,\n                placement: 'top',\n                offset: 10,\n            })\n        );\n        await opened;\n\n        expect(customOverlay.parentElement).to.exist;\n        if (customOverlay.parentElement) {\n            expect(customOverlay.parentElement.id).not.to.equal(\n                'overlay-content'\n            );\n        }\n        expect(isVisible(customOverlay)).to.be.true;\n\n        opened = oneEvent(button, 'sp-opened');\n        // Opening click overlay should close the hover overlay\n        openOverlays.push(\n            await Overlay.open(button, 'click', clickOverlay, {\n                delayed: false,\n                placement: 'bottom',\n                offset: 10,\n            })\n        );\n        await opened;\n\n        expect(isVisible(customOverlay)).to.be.true;\n        expect(isVisible(clickOverlay)).to.be.true;\n    });\n\n    it('closes via events', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div id=\"root\">\n                <sp-dialog dismissable></sp-dialog>\n            </div>\n        `);\n\n        const dialog = el.querySelector('sp-dialog') as Dialog;\n\n        const opened = oneEvent(el, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(el, 'click', dialog, {\n                delayed: false,\n                placement: 'bottom',\n                offset: 10,\n            })\n        );\n        await opened;\n\n        dialog.close();\n\n        await waitUntil(\n            () =>\n                !!dialog.parentElement &&\n                dialog.parentElement.tagName !== 'ACTIVE-OVERLAY',\n            'content is returned'\n        );\n    });\n\n    it('closes an inline overlay when tabbing past the content', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button class=\"trigger\">Trigger</sp-button>\n                <div class=\"content\">\n                    <input />\n                </div>\n                <input value=\"After\" id=\"after\" />\n            </div>\n        `);\n\n        const trigger = el.querySelector('.trigger') as HTMLElement;\n        const content = el.querySelector('.content') as HTMLElement;\n        const input = el.querySelector('input') as HTMLInputElement;\n        const after = el.querySelector('#after') as HTMLAnchorElement;\n\n        openOverlays.push(await Overlay.open(trigger, 'inline', content, {}));\n\n        trigger.focus();\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        expect(document.activeElement).to.equal(input);\n        expect(input.closest('active-overlay') !== null);\n\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n\n        expect(document.activeElement).to.equal(trigger);\n\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        expect(document.activeElement).to.equal(input);\n\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        expect(document.activeElement).to.equal(after);\n        await waitUntil(\n            () => document.querySelector('active-overlay') === null\n        );\n    });\n\n    it('closes an inline overlay when tabbing before the trigger', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <input value=\"Before\" id=\"before\" />\n                <sp-button class=\"trigger\">Trigger</sp-button>\n                <div class=\"content\">\n                    <label>\n                        Content in an inline overlay.\n                        <input />\n                    </label>\n                </div>\n            </div>\n        `);\n\n        const trigger = el.querySelector('.trigger') as HTMLElement;\n        const content = el.querySelector('.content') as HTMLElement;\n        const input = el.querySelector('.content input') as HTMLInputElement;\n        const before = el.querySelector('#before') as HTMLAnchorElement;\n\n        openOverlays.push(await Overlay.open(trigger, 'inline', content, {}));\n\n        trigger.focus();\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        expect(document.activeElement).to.equal(input);\n        expect(input.closest('active-overlay') !== null);\n\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n\n        expect(document.activeElement).to.equal(trigger);\n\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n\n        expect(document.activeElement).to.equal(before);\n        await waitUntil(\n            () => document.querySelector('active-overlay') === null\n        );\n    });\n\n    it('opens detached content', async () => {\n        const textContent = 'This is a detached element that has been overlaid';\n        const el = await fixture<HTMLButtonElement>(\n            html`\n                <button>Trigger</button>\n            `\n        );\n\n        const content = document.createElement('div');\n        content.textContent = textContent;\n\n        const opened = oneEvent(el, 'sp-opened');\n        const closeOverlay = await Overlay.open(el, 'click', content, {\n            placement: 'bottom',\n        });\n        await opened;\n\n        let activeOverlay = document.querySelector('active-overlay');\n\n        if (activeOverlay) {\n            expect(activeOverlay.textContent).to.equal(textContent);\n        } else {\n            expect(activeOverlay).to.not.be.null;\n        }\n\n        const closed = oneEvent(el, 'sp-closed');\n        closeOverlay();\n        await closed;\n\n        activeOverlay = document.querySelector('active-overlay');\n\n        expect(activeOverlay).to.be.null;\n\n        content.remove();\n    });\n});\ndescribe('Overlay - type=\"modal\"', () => {\n    it('closes on `contextmenu` and passes that to the underlying page', async () => {\n        await fixture<HTMLDivElement>(html`\n            ${virtualElement({\n                ...virtualElement.args,\n                offset: 6,\n            })}\n        `);\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        let opened = oneEvent(document, 'sp-opened');\n        // Right click to open \"context menu\" overlay.\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [width / 2 + 50, height / 2],\n                },\n                {\n                    type: 'click',\n                    options: {\n                        button: 'right',\n                    },\n                    position: [width / 2 + 50, height / 2],\n                },\n            ],\n        });\n        await opened;\n        const firstOverlay = document.querySelector(\n            'active-overlay'\n        ) as ActiveOverlay;\n        const firstHeadline = firstOverlay.querySelector(\n            '[slot=\"header\"]'\n        ) as HTMLSpanElement;\n        expect(firstOverlay, 'first overlay').to.not.be.null;\n        expect(firstOverlay.isConnected).to.be.true;\n        expect(firstHeadline.textContent).to.equal('Menu source: end');\n        let closed = oneEvent(document, 'sp-closed');\n        opened = oneEvent(document, 'sp-opened');\n        // Right click to out of the \"context menu\" overlay to both close\n        // the first overlay and have the event passed to the surfacing page\n        // in order to open a subsequent \"context menu\" overlay.\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [width / 4, height / 4],\n                },\n                {\n                    type: 'click',\n                    options: {\n                        button: 'right',\n                    },\n                    position: [width / 4, height / 4],\n                },\n            ],\n        });\n        await closed;\n        await opened;\n        const secondOverlay = document.querySelector(\n            'active-overlay'\n        ) as ActiveOverlay;\n        const secondHeadline = secondOverlay.querySelector(\n            '[slot=\"header\"]'\n        ) as HTMLSpanElement;\n        expect(secondOverlay, 'second overlay').to.not.be.null;\n        expect(secondOverlay).to.not.equal(firstOverlay);\n        expect(firstOverlay.isConnected).to.be.false;\n        expect(secondOverlay.isConnected).to.be.true;\n        expect(secondHeadline.textContent).to.equal('Menu source: start');\n        closed = oneEvent(document, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [width / 8, height / 8],\n                },\n                {\n                    type: 'click',\n                    position: [width / 8, height / 8],\n                },\n            ],\n        });\n        await closed;\n        await nextFrame();\n    });\n\n    it('does not open content off of the viewport', async () => {\n        await fixture<HTMLDivElement>(html`\n            ${virtualElement({\n                ...virtualElement.args,\n                offset: 6,\n            })}\n        `);\n\n        await setViewport({ width: 360, height: 640 });\n        // Allow viewport update to propagate.\n        await nextFrame();\n\n        const opened = oneEvent(document, 'sp-opened');\n        // Right click to open \"context menu\" overlay.\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [270, 10],\n                },\n                {\n                    type: 'click',\n                    options: {\n                        button: 'right',\n                    },\n                    position: [270, 10],\n                },\n            ],\n        });\n        await opened;\n\n        const activeOverlay = document.querySelector(\n            'active-overlay'\n        ) as ActiveOverlay;\n\n        expect(activeOverlay.placement).to.equal('right-start');\n        expect(activeOverlay.getAttribute('actual-placement')).to.equal(\n            'bottom'\n        );\n\n        const closed = oneEvent(document, 'sp-closed');\n        sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n        await nextFrame();\n    });\n\n    it('opens children in the modal stack through shadow roots', async () => {\n        const el = await fixture<OverlayTrigger>(definedOverlayElement());\n        const trigger = el.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLButtonElement;\n        let open = oneEvent(el, 'sp-opened');\n        trigger.click();\n        await open;\n        const content = document.querySelector(\n            'popover-content'\n        ) as PopoverContent;\n        open = oneEvent(content, 'sp-opened');\n        content.button.click();\n        await open;\n        const activeOverlays = document.querySelectorAll('active-overlay');\n        activeOverlays.forEach((overlay) => {\n            expect(overlay.slot).to.equal('open');\n        });\n        let close = oneEvent(content, 'sp-closed');\n        content.trigger.removeAttribute('open');\n        await close;\n        close = oneEvent(el, 'sp-closed');\n        el.removeAttribute('open');\n        await close;\n    });\n});\ndescribe('Overlay - timing', () => {\n    it('manages multiple modals in a row without preventing them from closing', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <overlay-trigger>\n                    <sp-button slot=\"trigger\">Trigger 1</sp-button>\n                    <sp-popover slot=\"hover-content\">\n                        <p>Hover contentent for \"Trigger 1\".</p>\n                    </sp-popover>\n                </overlay-trigger>\n                <overlay-trigger>\n                    <sp-button slot=\"trigger\">Trigger 2</sp-button>\n                    <sp-popover slot=\"hover-content\">\n                        <p>Hover contentent for \"Trigger 2\".</p>\n                    </sp-popover>\n                    <sp-popover slot=\"click-content\">\n                        <p>Click contentent for \"Trigger 2\".</p>\n                    </sp-popover>\n                </overlay-trigger>\n            </div>\n        `);\n\n        const overlayTrigger1 = test.querySelector(\n            'overlay-trigger:first-child'\n        ) as OverlayTrigger;\n        const overlayTrigger2 = test.querySelector(\n            'overlay-trigger:last-child'\n        ) as OverlayTrigger;\n        const trigger1 = overlayTrigger1.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLButtonElement;\n        const trigger2 = overlayTrigger2.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLButtonElement;\n\n        const boundingRectTrigger1 = trigger1.getBoundingClientRect();\n        const boundingRectTrigger2 = trigger2.getBoundingClientRect();\n        const trigger1Position: [number, number] = [\n            boundingRectTrigger1.left + boundingRectTrigger1.width / 2,\n            boundingRectTrigger1.top + boundingRectTrigger1.height / 2,\n        ];\n        const outsideTrigger1: [number, number] = [\n            boundingRectTrigger1.left + boundingRectTrigger1.width * 2,\n            boundingRectTrigger1.top + boundingRectTrigger1.height * 2,\n        ];\n        const trigger2Position: [number, number] = [\n            boundingRectTrigger2.left + boundingRectTrigger2.width / 2,\n            boundingRectTrigger2.top + boundingRectTrigger2.height / 2,\n        ];\n        const outsideTrigger2: [number, number] = [\n            boundingRectTrigger2.left + boundingRectTrigger2.width * 2,\n            boundingRectTrigger2.top + boundingRectTrigger2.height / 2,\n        ];\n\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: trigger1Position,\n                },\n            ],\n        });\n        await nextFrame();\n        await nextFrame();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: outsideTrigger1,\n                },\n            ],\n        });\n        await nextFrame();\n        await nextFrame();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: trigger2Position,\n                },\n            ],\n        });\n        await nextFrame();\n        await nextFrame();\n        const opened = oneEvent(trigger2, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: trigger2Position,\n                },\n            ],\n        });\n        await opened;\n\n        expect(overlayTrigger1.hasAttribute('open')).to.be.false;\n        expect(overlayTrigger2.hasAttribute('open')).to.be.true;\n        expect(overlayTrigger2.getAttribute('open')).to.equal('click');\n\n        const closed = oneEvent(overlayTrigger2, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: outsideTrigger2,\n                },\n            ],\n        });\n        await closed;\n\n        // sometimes safari needs to wait a few frames for the open attribute to update\n        for (let i = 0; i < 3; i++) await nextFrame();\n\n        expect(overlayTrigger1.hasAttribute('open')).to.be.false;\n        expect(overlayTrigger2.hasAttribute('open'), overlayTrigger2.open).to.be\n            .false;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
