import type { OverlayOptions, TriggerInteractions } from './overlay-types';
/**
 * This class allows access to the overlay system which allows a client to
 * position an element in the overlay positioned relative to another node.
 */
export declare class Overlay {
    private static overlayStack;
    private isOpen;
    private overlayElement;
    private owner;
    private interaction;
    /**
     *
     * @param owner the parent element we will use to position the overlay element
     * @param interaction the type of interaction that caused this overlay to be shown
     * @param overlayElement the item to display as an overlay
     */
    constructor(owner: HTMLElement, interaction: TriggerInteractions, overlayElement: HTMLElement);
    /**
     * Open an overlay
     *
     * @param owner the parent element we will use to position the overlay element
     * @param interaction the type of interaction that caused this overlay to be shown
     * @param overlayElement the item to display as an overlay
     * @param options display parameters
     * @param options.delayed if true delay opening of the overlay based on the global warmup/cooldown timer
     * @param options.offset distance to offset the overlay
     * @param options.placement side on which to position the overlay
     * @returns an Overlay object which can be used to close the overlay
     */
    static open(owner: HTMLElement, interaction: TriggerInteractions, overlayElement: HTMLElement, options: OverlayOptions): Promise<() => void>;
    static update(): void;
    /**
     * Open an overlay
     *
     * @param options display parameters
     * @param options.delayed delay before opening the overlay
     * @param options.offset distance to offset the overlay
     * @param options.placement side on which to position the overlay
     * @returns a Promise that resolves to true if this operation was cancelled
     */
    open({ abortPromise, delayed, offset, placement, receivesFocus, notImmediatelyClosable, virtualTrigger, root, }: OverlayOptions): Promise<boolean>;
    /**
     * Close the overlay if it is open
     */
    close(): void;
}
/**
 * Announces that an overlay-based UI element has opened
 * @event sp-open
 * @type {object}
 * @property {TriggerInteractions} interaction type of interaction that triggered the opening
 */
/**
 * Announces that an overlay-based UI element has opened
 * @event sp-close
 * @type {object}
 * @property {TriggerInteractions} interaction type of interaction that triggered the closing
 */
