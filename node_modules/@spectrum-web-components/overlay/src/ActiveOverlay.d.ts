import { CSSResultArray, SpectrumElement, TemplateResult } from '@spectrum-web-components/base';
import type { Color, Scale, ThemeVariant } from '@spectrum-web-components/theme/src/Theme.js';
import { OverlayOpenDetail, Placement, TriggerInteractions } from './overlay-types.js';
import type { VirtualTrigger } from './VirtualTrigger.js';
export interface PositionResult {
    arrowOffsetLeft: number;
    arrowOffsetTop: number;
    maxHeight: number;
    placement: string;
    positionLeft: number;
    positionTop: number;
}
declare type OverlayStateType = 'idle' | 'active' | 'hiding' | 'dispose' | 'disposed';
declare type ContentAnimation = 'sp-overlay-fade-in' | 'sp-overlay-fade-out';
/**
 * @element active-overlay
 *
 * @slot - content to display in the overlay
 */
export declare class ActiveOverlay extends SpectrumElement {
    overlayContent: HTMLElement;
    overlayContentTip?: HTMLElement;
    trigger: HTMLElement;
    root?: HTMLElement;
    virtualTrigger?: VirtualTrigger;
    private cleanup?;
    protected contentAnimationPromise: Promise<boolean>;
    protected resolveContentAnimationPromise: () => void;
    _state: OverlayStateType;
    get state(): OverlayStateType;
    set state(state: OverlayStateType);
    animating: boolean;
    placement?: Placement;
    theme: {
        color?: Color;
        scale?: Scale;
        lang?: string;
        theme?: ThemeVariant;
    };
    receivesFocus?: 'auto';
    tabbingAway: boolean;
    private originalPlacement?;
    private restoreContent?;
    focus(): Promise<void>;
    private get hasTheme();
    offset: number;
    skidding: number;
    interaction: TriggerInteractions;
    private positionAnimationFrame;
    private timeout?;
    static get styles(): CSSResultArray;
    constructor();
    private _modalRoot?;
    get hasModalRoot(): boolean;
    feature(): void;
    obscure(nextOverlayInteraction: TriggerInteractions): ActiveOverlay | undefined;
    willUpdate(): Promise<void>;
    openCallback(lifecycleCallback: () => Promise<void> | void): Promise<void>;
    private open;
    private extractDetail;
    dispose(): void;
    private stealOverlayContent;
    private willNotifyClosed;
    private returnOverlayContent;
    private initialHeight;
    private isConstrained;
    placeOverlay(): Promise<void>;
    updateOverlayPosition: () => void;
    resetOverlayPosition: () => void;
    setOverlayPosition: () => Promise<void>;
    hide(animated?: boolean): Promise<void>;
    private schedulePositionUpdate;
    private onSlotChange;
    handleInlineTriggerKeydown: (event: KeyboardEvent) => void;
    applyContentAnimation(animation: ContentAnimation): Promise<boolean>;
    renderTheme(content: TemplateResult): TemplateResult;
    render(): TemplateResult;
    static create(details: OverlayOpenDetail): ActiveOverlay;
    private stealOverlayContentPromise;
    private stealOverlayContentResolver;
    protected getUpdateComplete(): Promise<boolean>;
    disconnectedCallback(): void;
}
export {};
