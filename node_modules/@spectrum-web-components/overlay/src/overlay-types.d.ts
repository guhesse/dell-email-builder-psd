import type { ThemeData } from '@spectrum-web-components/theme/src/Theme.js';
import type { Placement as FloatingUIPlacement } from '@floating-ui/dom';
import type { VirtualTrigger } from './VirtualTrigger.js';
export declare type TriggerInteractions = 'click' | 'longpress' | 'hover' | 'custom' | 'replace' | 'inline' | 'modal';
export declare type OverlayTriggerInteractions = Extract<TriggerInteractions, 'inline' | 'modal' | 'replace'>;
export interface OverlayOpenDetail {
    content: HTMLElement;
    contentTip?: HTMLElement;
    delayed: boolean;
    offset: number;
    skidding?: number;
    placement?: Placement;
    receivesFocus?: 'auto';
    virtualTrigger?: VirtualTrigger;
    trigger: HTMLElement;
    root?: HTMLElement;
    interaction: TriggerInteractions;
    theme: ThemeData;
    notImmediatelyClosable?: boolean;
    abortPromise?: Promise<boolean>;
}
export interface OverlayOpenCloseDetail {
    interaction: TriggerInteractions;
    reason?: 'external-click';
}
export interface OverlayCloseReasonDetail {
    reason?: 'external-click';
}
/**
 * Used, via an event, to query details about how an element should be shown in
 * an overlay
 */
export interface OverlayDisplayQueryDetail {
    overlayRootName?: string;
    overlayRootElement?: HTMLElement;
    overlayContentTipElement?: HTMLElement;
}
export declare type Placement = FloatingUIPlacement | 'none';
export declare type OverlayOptions = {
    root?: HTMLElement;
    delayed?: boolean;
    placement?: Placement;
    offset?: number;
    receivesFocus?: 'auto';
    notImmediatelyClosable?: boolean;
    abortPromise?: Promise<boolean>;
    virtualTrigger?: VirtualTrigger;
};
declare global {
    interface GlobalEventHandlersEventMap {
        'sp-overlay-query': CustomEvent<OverlayDisplayQueryDetail>;
        'sp-open': CustomEvent<OverlayOpenCloseDetail>;
        'sp-close': CustomEvent<OverlayOpenCloseDetail>;
    }
}
