{
  "version": 3,
  "sources": ["ActiveOverlay.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { reparentChildren } from '@spectrum-web-components/shared/src/reparent-children.js';\nimport { firstFocusableIn } from '@spectrum-web-components/shared/src/first-focusable-in.js';\nimport type {\n    Color,\n    Scale,\n    ThemeVariant,\n} from '@spectrum-web-components/theme/src/Theme.js';\nimport styles from './active-overlay.css.js';\nimport { parentOverlayOf } from './overlay-utils.js';\nimport {\n    OverlayOpenCloseDetail,\n    OverlayOpenDetail,\n    Placement,\n    TriggerInteractions,\n} from './overlay-types.js';\nimport type { VirtualTrigger } from './VirtualTrigger.js';\nimport {\n    arrow,\n    autoUpdate,\n    computePosition,\n    flip,\n    Placement as FloatingUIPlacement,\n    offset,\n    shift,\n    size,\n} from '@floating-ui/dom';\n\nexport interface PositionResult {\n    arrowOffsetLeft: number;\n    arrowOffsetTop: number;\n    maxHeight: number;\n    placement: string;\n    positionLeft: number;\n    positionTop: number;\n}\n\ntype OverlayStateType = 'idle' | 'active' | 'hiding' | 'dispose' | 'disposed';\ntype ContentAnimation = 'sp-overlay-fade-in' | 'sp-overlay-fade-out';\n\nconst stateMachine: {\n    initial: OverlayStateType;\n    states: {\n        [stateName: string]: {\n            on: {\n                [transitionName: string]: OverlayStateType;\n            };\n        };\n    };\n} = {\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                active: 'active',\n            },\n        },\n        active: {\n            on: {\n                hiding: 'hiding',\n                idle: 'idle',\n            },\n        },\n        hiding: {\n            on: {\n                dispose: 'dispose',\n            },\n        },\n        dispose: {\n            on: {\n                disposed: 'disposed',\n            },\n        },\n        disposed: {\n            on: {},\n        },\n    },\n};\n\nconst stateTransition = (\n    state?: OverlayStateType,\n    event?: string\n): OverlayStateType => {\n    if (!state) return stateMachine.initial;\n    /* c8 ignore next */\n    if (!event) return state;\n    return stateMachine.states[state].on[event] || state;\n};\n\nconst getFallbackPlacements = (\n    placement: FloatingUIPlacement\n): FloatingUIPlacement[] => {\n    const fallbacks: Record<FloatingUIPlacement, FloatingUIPlacement[]> = {\n        left: ['right', 'bottom', 'top'],\n        'left-start': ['right-start', 'bottom', 'top'],\n        'left-end': ['right-end', 'bottom', 'top'],\n        right: ['left', 'bottom', 'top'],\n        'right-start': ['left-start', 'bottom', 'top'],\n        'right-end': ['left-end', 'bottom', 'top'],\n        top: ['bottom', 'left', 'right'],\n        'top-start': ['bottom-start', 'left', 'right'],\n        'top-end': ['bottom-end', 'left', 'right'],\n        bottom: ['top', 'left', 'right'],\n        'bottom-start': ['top-start', 'left', 'right'],\n        'bottom-end': ['top-end', 'left', 'right'],\n    };\n    return fallbacks[placement] ?? [placement];\n};\n\n/**\n * @element active-overlay\n *\n * @slot - content to display in the overlay\n */\nexport class ActiveOverlay extends SpectrumElement {\n    public overlayContent!: HTMLElement;\n    public overlayContentTip?: HTMLElement;\n    public trigger!: HTMLElement;\n    public root?: HTMLElement;\n    public virtualTrigger?: VirtualTrigger;\n    private cleanup?: () => void;\n\n    protected contentAnimationPromise: Promise<boolean> = Promise.resolve(true);\n    protected resolveContentAnimationPromise = (): void => {\n        return;\n    };\n\n    @property()\n    public _state = stateTransition();\n    public get state(): OverlayStateType {\n        return this._state;\n    }\n    public set state(state: OverlayStateType) {\n        const nextState = stateTransition(this.state, state);\n        if (nextState === this.state) {\n            return;\n        }\n        this._state = nextState;\n        if (this.state === 'active' || this.state === 'hiding') {\n            this.setAttribute('state', this.state);\n        } else {\n            this.removeAttribute('state');\n        }\n    }\n\n    @property({ reflect: true, type: Boolean })\n    public animating = false;\n\n    @property({ reflect: true })\n    public placement?: Placement;\n    @property({ attribute: false })\n    public theme: {\n        color?: Color;\n        scale?: Scale;\n        lang?: string;\n        theme?: ThemeVariant;\n    } = {};\n    @property({ attribute: false })\n    public receivesFocus?: 'auto';\n\n    public tabbingAway = false;\n    private originalPlacement?: Placement;\n    private restoreContent?: () => Element[];\n\n    public override async focus(): Promise<void> {\n        const firstFocusable = firstFocusableIn(this);\n        if (firstFocusable) {\n            if ((firstFocusable as SpectrumElement).updateComplete) {\n                await firstFocusable.updateComplete;\n            }\n            const activeElement = (this.getRootNode() as Document)\n                .activeElement;\n            if (activeElement === this || !this.contains(activeElement)) {\n                firstFocusable.focus();\n            }\n            /* c8 ignore next 3 */\n        } else {\n            super.focus();\n        }\n        this.removeAttribute('tabindex');\n    }\n\n    private get hasTheme(): boolean {\n        return !!this.theme.color || !!this.theme.scale || !!this.theme.lang;\n    }\n\n    public offset = 6;\n    public skidding = 0;\n    public interaction: TriggerInteractions = 'hover';\n    private positionAnimationFrame = 0;\n\n    private timeout?: number;\n\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    public constructor() {\n        super();\n        this.stealOverlayContentPromise = new Promise(\n            (res) => (this.stealOverlayContentResolver = res)\n        );\n    }\n\n    private _modalRoot?: ActiveOverlay;\n\n    public get hasModalRoot(): boolean {\n        return !!this._modalRoot;\n    }\n\n    public feature(): void {\n        // eslint-disable-next-line @spectrum-web-components/document-active-element\n        if (!this.contains(document.activeElement)) {\n            this.tabIndex = -1;\n        }\n        const parentOverlay = parentOverlayOf(this.trigger);\n        const parentIsModal = parentOverlay && parentOverlay.slot === 'open';\n        if (parentIsModal) {\n            this._modalRoot = parentOverlay._modalRoot || parentOverlay;\n        }\n        // If an overlay it triggered from within a \"modal\" overlay, it needs to continue\n        // to act like one to get treated correctly in regards to tab trapping.\n        if (this.interaction === 'modal' || this._modalRoot) {\n            this.slot = 'open';\n            if (this.interaction === 'modal') {\n                this.setAttribute('aria-modal', 'true');\n            }\n            // If this isn't a modal root, walk up the overlays to the next modal root\n            // and \"feature\" each on of the intervening overlays.\n            if (this._modalRoot) {\n                parentOverlay?.feature();\n            }\n        }\n    }\n\n    public obscure(\n        nextOverlayInteraction: TriggerInteractions\n    ): ActiveOverlay | undefined {\n        if (this.slot && nextOverlayInteraction === 'modal') {\n            this.removeAttribute('slot');\n            this.removeAttribute('aria-modal');\n            // Obscure upto and including the next modal root.\n            if (this.interaction !== 'modal') {\n                const parentOverlay = parentOverlayOf(this.trigger);\n                this._modalRoot = parentOverlay?.obscure(\n                    nextOverlayInteraction\n                );\n                return this._modalRoot;\n            }\n            return this;\n        }\n        return undefined;\n    }\n\n    public override async willUpdate(): Promise<void> {\n        if (this.hasUpdated) return;\n\n        /* c8 ignore next */\n        if (!this.overlayContent || !this.trigger) return;\n\n        this.stealOverlayContent(\n            this.overlayContent as HTMLElement & { placement: Placement }\n        );\n\n        this.state = 'active';\n\n        this.feature();\n        if (this.placement && this.placement !== 'none') {\n            await this.updateOverlayPosition();\n            document.addEventListener(\n                'sp-update-overlays',\n                this.resetOverlayPosition\n            );\n        }\n        if (this.placement && this.placement !== 'none') {\n            this.contentAnimationPromise =\n                this.applyContentAnimation('sp-overlay-fade-in');\n        }\n    }\n\n    public async openCallback(\n        lifecycleCallback: () => Promise<void> | void\n    ): Promise<void> {\n        await this.updateComplete;\n        if (this.receivesFocus) {\n            await this.focus();\n        }\n\n        await lifecycleCallback();\n\n        this.trigger.dispatchEvent(\n            new CustomEvent<OverlayOpenCloseDetail>('sp-opened', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n                detail: {\n                    interaction: this.interaction,\n                },\n            })\n        );\n    }\n\n    private open(openDetail: OverlayOpenDetail): void {\n        this.extractDetail(openDetail);\n    }\n\n    private extractDetail(detail: OverlayOpenDetail): void {\n        this.overlayContent = detail.content;\n        this.overlayContentTip = detail.contentTip;\n        this.trigger = detail.trigger;\n        this.virtualTrigger = detail.virtualTrigger;\n        this.placement = detail.placement;\n        this.offset = detail.offset;\n        this.skidding = detail.skidding || 0;\n        this.interaction = detail.interaction;\n        this.theme = detail.theme;\n        this.receivesFocus = detail.receivesFocus;\n        this.root = detail.root;\n    }\n\n    public dispose(): void {\n        /* c8 ignore next */\n        if (this.state !== 'dispose') return;\n\n        /* c8 ignore next 4 */\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            delete this.timeout;\n        }\n\n        this.trigger.removeEventListener(\n            'keydown',\n            this.handleInlineTriggerKeydown\n        );\n\n        this.returnOverlayContent();\n        this.state = 'disposed';\n\n        if (this.willNotifyClosed) {\n            this.overlayContent.dispatchEvent(new Event('sp-overlay-closed'));\n            this.willNotifyClosed = false;\n        }\n\n        if (this.cleanup) {\n            this.cleanup();\n        }\n    }\n\n    private stealOverlayContent(\n        element: HTMLElement & { placement: Placement }\n    ): void {\n        this.originalPlacement = element.getAttribute('placement') as Placement;\n        this.restoreContent = reparentChildren([element], this, {\n            position: 'beforeend',\n            prepareCallback: (el) => {\n                const slotName = el.slot;\n                const placement = el.placement;\n                el.removeAttribute('slot');\n                return (el) => {\n                    el.slot = slotName;\n                    el.placement = placement;\n                };\n            },\n        });\n        this.stealOverlayContentResolver();\n    }\n\n    private willNotifyClosed = false;\n\n    private returnOverlayContent(): void {\n        /* c8 ignore next */\n        if (!this.restoreContent) return;\n\n        const [element] = this.restoreContent();\n        this.restoreContent = undefined;\n        this.willNotifyClosed = true;\n\n        if (this.originalPlacement) {\n            element.setAttribute('placement', this.originalPlacement);\n            delete this.originalPlacement;\n        }\n    }\n\n    private initialHeight: number | undefined;\n    private isConstrained = false;\n\n    public async placeOverlay(): Promise<void> {\n        if (!this.placement || this.placement === 'none') {\n            return;\n        }\n\n        this.cleanup = autoUpdate(\n            this.virtualTrigger || this.trigger,\n            this,\n            this.updateOverlayPosition,\n            {\n                elementResize: false,\n            }\n        );\n    }\n\n    public updateOverlayPosition = (): void => {\n        if (this.interaction !== 'modal' && this.cleanup) {\n            this.dispatchEvent(new Event('close'));\n            return;\n        }\n        this.setOverlayPosition();\n    };\n\n    public resetOverlayPosition = (): void => {\n        this.style.removeProperty('max-height');\n        this.style.removeProperty('height');\n        this.initialHeight = undefined;\n        this.isConstrained = false;\n        // force paint\n        this.offsetHeight;\n        this.setOverlayPosition();\n    };\n\n    public setOverlayPosition = async (): Promise<void> => {\n        if (!this.placement || this.placement === 'none') {\n            return;\n        }\n        await (document.fonts ? document.fonts.ready : Promise.resolve());\n\n        function roundByDPR(num: number): number {\n            const dpr = window.devicePixelRatio || 1;\n            return Math.round(num * dpr) / dpr || -10000;\n        }\n\n        // See: https://spectrum.adobe.com/page/popover/#Container-padding\n        const REQUIRED_DISTANCE_TO_EDGE = 8;\n        // See: https://github.com/adobe/spectrum-web-components/issues/910\n        const MIN_OVERLAY_HEIGHT = 100;\n\n        const flipMiddleware = this.virtualTrigger\n            ? flip({\n                  padding: REQUIRED_DISTANCE_TO_EDGE,\n                  fallbackPlacements: getFallbackPlacements(this.placement),\n              })\n            : flip({\n                  padding: REQUIRED_DISTANCE_TO_EDGE,\n              });\n\n        const middleware = [\n            offset({\n                mainAxis: this.offset,\n                crossAxis: this.skidding,\n            }),\n            shift({ padding: REQUIRED_DISTANCE_TO_EDGE }),\n            flipMiddleware,\n            size({\n                padding: REQUIRED_DISTANCE_TO_EDGE,\n                apply: ({\n                    availableWidth,\n                    availableHeight,\n                    rects: { floating },\n                }) => {\n                    const maxHeight = Math.max(\n                        MIN_OVERLAY_HEIGHT,\n                        Math.floor(availableHeight)\n                    );\n                    const actualHeight = floating.height;\n                    this.initialHeight =\n                        !this.isConstrained && !this.virtualTrigger\n                            ? actualHeight\n                            : this.initialHeight || actualHeight;\n                    this.isConstrained =\n                        actualHeight < this.initialHeight ||\n                        maxHeight <= actualHeight;\n                    const appliedHeight = this.isConstrained\n                        ? `${maxHeight}px`\n                        : '';\n                    Object.assign(this.style, {\n                        maxWidth: `${Math.floor(availableWidth)}px`,\n                        maxHeight: appliedHeight,\n                        height: appliedHeight,\n                    });\n                },\n            }),\n        ];\n        if (this.overlayContentTip) {\n            middleware.push(arrow({ element: this.overlayContentTip }));\n        }\n        const { x, y, placement, middlewareData } = await computePosition(\n            this.virtualTrigger || this.trigger,\n            this,\n            {\n                placement: this.placement,\n                middleware,\n                strategy: 'fixed',\n            }\n        );\n\n        Object.assign(this.style, {\n            top: '0px',\n            left: '0px',\n            transform: `translate(${roundByDPR(x)}px, ${roundByDPR(y)}px)`,\n        });\n\n        if (placement !== this.getAttribute('actual-placement')) {\n            this.setAttribute('actual-placement', placement);\n            this.overlayContent.setAttribute('placement', placement);\n        }\n\n        if (this.overlayContentTip && middlewareData.arrow) {\n            const { x: arrowX, y: arrowY } = middlewareData.arrow;\n\n            Object.assign(this.overlayContentTip.style, {\n                left: arrowX != null ? `${roundByDPR(arrowX)}px` : '',\n                top: arrowY != null ? `${roundByDPR(arrowY)}px` : '',\n                right: '',\n                bottom: '',\n            });\n        }\n    };\n\n    public async hide(animated = true): Promise<void> {\n        if (this.state !== 'active') return;\n        this.state = 'hiding';\n        if (animated) {\n            await this.applyContentAnimation('sp-overlay-fade-out');\n        }\n        this.state = 'dispose';\n    }\n\n    private schedulePositionUpdate(): void {\n        // Edge needs a little time to update the DOM before computing the layout\n        cancelAnimationFrame(this.positionAnimationFrame);\n        this.positionAnimationFrame = requestAnimationFrame(() => {\n            if (this.cleanup) {\n                this.updateOverlayPosition();\n            } else {\n                this.placeOverlay();\n            }\n        });\n    }\n\n    private onSlotChange(): void {\n        this.schedulePositionUpdate();\n    }\n\n    public handleInlineTriggerKeydown = (event: KeyboardEvent): void => {\n        const { code, shiftKey } = event;\n        /* c8 ignore next */\n        if (code !== 'Tab') return;\n        if (shiftKey) {\n            this.tabbingAway = true;\n            this.dispatchEvent(new Event('close'));\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.focus();\n    };\n\n    public applyContentAnimation(\n        animation: ContentAnimation\n    ): Promise<boolean> {\n        if (this.placement === 'none') {\n            return Promise.resolve(true);\n        }\n        this.resolveContentAnimationPromise();\n        return new Promise((resolve): void => {\n            this.resolveContentAnimationPromise = () => {\n                resolve(false);\n            };\n            const contents = this.shadowRoot.querySelector(\n                '#contents'\n            ) as HTMLElement;\n            const doneHandler = (event: AnimationEvent): void => {\n                if (animation !== event.animationName) return;\n                contents.removeEventListener('animationend', doneHandler);\n                contents.removeEventListener('animationcancel', doneHandler);\n                this.animating = false;\n                resolve(event.type === 'animationcancel');\n            };\n            contents.addEventListener('animationend', doneHandler);\n            contents.addEventListener('animationcancel', doneHandler);\n\n            contents.style.animationName = animation;\n            this.animating = true;\n        });\n    }\n\n    public renderTheme(content: TemplateResult): TemplateResult {\n        const { color, scale, lang, theme } = this.theme;\n        return html`\n            <sp-theme\n                theme=${ifDefined(theme)}\n                color=${ifDefined(color)}\n                scale=${ifDefined(scale)}\n                lang=${ifDefined(lang)}\n                part=\"theme\"\n            >\n                ${content}\n            </sp-theme>\n        `;\n    }\n\n    public override render(): TemplateResult {\n        const content = html`\n            <div id=\"contents\">\n                <slot @slotchange=${this.onSlotChange}></slot>\n            </div>\n        `;\n        return this.hasTheme ? this.renderTheme(content) : content;\n    }\n\n    public static create(details: OverlayOpenDetail): ActiveOverlay {\n        const overlay = new ActiveOverlay();\n\n        if (details.content) {\n            overlay.open(details);\n        }\n\n        return overlay;\n    }\n\n    private stealOverlayContentPromise = Promise.resolve();\n    private stealOverlayContentResolver!: () => void;\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const actions: Promise<unknown>[] = [\n            super.getUpdateComplete(),\n            this.stealOverlayContentPromise,\n        ];\n        actions.push(this.contentAnimationPromise);\n        if (\n            typeof (this.overlayContent as SpectrumElement).updateComplete !==\n            'undefined'\n        ) {\n            actions.push(\n                (this.overlayContent as SpectrumElement).updateComplete\n            );\n        }\n        const [complete] = await Promise.all(actions);\n        return complete as boolean;\n    }\n\n    override disconnectedCallback(): void {\n        document.removeEventListener(\n            'sp-update-overlays',\n            this.resetOverlayPosition\n        );\n        super.disconnectedCallback();\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "SpectrumElement", "ifDefined", "property", "reparentChildren", "firstFocusableIn", "styles", "parentOverlayOf", "arrow", "autoUpdate", "computePosition", "flip", "offset", "shift", "size", "stateMachine", "stateTransition", "state", "event", "getFallbackPlacements", "placement", "_a", "_ActiveOverlay", "roundByDPR", "num", "dpr", "REQUIRED_DISTANCE_TO_EDGE", "MIN_OVERLAY_HEIGHT", "flipMiddleware", "middleware", "availableWidth", "availableHeight", "floating", "maxHeight", "actualHeight", "appliedHeight", "x", "y", "middlewareData", "arrowX", "arrowY", "code", "shiftKey", "res", "nextState", "firstFocusable", "activeElement", "parentOverlay", "nextOverlayInteraction", "lifecycleCallback", "openDetail", "detail", "element", "el", "slotName", "animated", "animation", "resolve", "contents", "doneHandler", "content", "color", "scale", "lang", "theme", "details", "overlay", "actions", "complete", "__decorateClass"]
}
