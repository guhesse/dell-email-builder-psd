{
  "version": 3,
  "sources": ["overlay-stack.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { ActiveOverlay } from './ActiveOverlay.dev.js'\nimport type {\n    OverlayOpenCloseDetail,\n    OverlayOpenDetail,\n} from './overlay-types';\nimport { OverlayTimer } from './overlay-timer.dev.js'\nimport '../active-overlay.dev.js'\nimport {\n    findOverlaysRootedInOverlay,\n    parentOverlayOf,\n} from './overlay-utils.dev.js'\nimport { OverlayCloseEvent } from './overlay-events.dev.js'\nimport { getDeepElementFromPoint } from '@spectrum-web-components/shared/src/get-deep-element-from-point.js';\n\nfunction isLeftClick(event: MouseEvent): boolean {\n    return event.button === 0;\n}\n\nfunction hasModifier(event: MouseEvent): boolean {\n    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\ninterface ManagedOverlayContent {\n    open: boolean;\n    // Allow the overlaid content to do something before it is thrown.\n    overlayWillOpenCallback?: (args: { trigger: HTMLElement }) => void;\n    // Allow the overlaid content to do something when it has been thrown.\n    overlayOpenCallback?: (args: { trigger: HTMLElement }) => void;\n    // Allow the overlaid content to do something when its throw has been cancelled.\n    overlayOpenCancelledCallback?: (args: { trigger: HTMLElement }) => void;\n    // Allow the overlaid content to do something before it is recalled, and return `true` if it will self managing the recall.\n    overlayWillCloseCallback?: (args: { trigger: HTMLElement }) => boolean;\n    // Allow the overlaid content to do something when it has been recalled.\n    overlayCloseCallback?: (args: { trigger: HTMLElement }) => void;\n    // Surface possible LitElement lifecycle methods on the synthetically types element.\n    updateComplete?: Promise<boolean>;\n}\n\nfunction nextFrame(): Promise<void> {\n    return new Promise((res) => requestAnimationFrame(() => res()));\n}\n\nexport class OverlayStack {\n    public overlays: ActiveOverlay[] = [];\n\n    private preventMouseRootClose = false;\n    private root: HTMLElement = document.body;\n    private handlingResize = false;\n    private overlayTimer = new OverlayTimer();\n\n    private canTabTrap = true;\n    private trappingInited = false;\n    private tabTrapper!: HTMLElement;\n    private overlayHolder!: HTMLElement;\n    private _eventsAreBound = false;\n\n    constructor() {\n        this.initTabTrapping();\n    }\n\n    private initTabTrapping(): void {\n        /* c8 ignore next 10 */\n        if (document.readyState === 'loading') {\n            document.addEventListener(\n                'readystatechange',\n                () => {\n                    this.initTabTrapping();\n                },\n                { once: true }\n            );\n            return;\n        }\n        if (this.trappingInited) return;\n        this.trappingInited = true;\n        /* c8 ignore next 4 */\n        if (this.document.body.shadowRoot) {\n            this.canTabTrap = false;\n            return;\n        }\n        this.document.body.attachShadow({ mode: 'open' });\n        /* c8 ignore next 3 */\n        if (!this.document.body.shadowRoot) {\n            return;\n        }\n        const root = this.document.body.shadowRoot as ShadowRoot;\n        root.innerHTML = `\n            <style>\n            :host {\n                position: relative;\n            }\n            #actual {\n                position: relative;\n                height: calc(100% - var(--swc-body-margins-block, 0px));\n                z-index: 0;\n                min-height: calc(100vh - var(--swc-body-margins-block, 0px));\n            }\n            #holder {\n                display: none;\n                align-items: center;\n                justify-content: center;\n                flex-flow: column;\n                width: 100%;\n                height: 100%;\n                position: absolute;\n                top: 0;\n                left: 0;\n            }\n            [name=\"open\"]::slotted(*) {\n                pointer-events: all;\n            }\n            #actual[aria-hidden] + #holder {\n                display: flex;\n            }\n            </style>\n            <div id=\"actual\"><slot></slot></div>\n            <div id=\"holder\"><slot name=\"open\"></slot></div>\n        `;\n        this.tabTrapper = root.querySelector('#actual') as HTMLElement;\n        this.overlayHolder = root.querySelector('#holder') as HTMLElement;\n        this.tabTrapper.attachShadow({ mode: 'open' });\n        if (this.tabTrapper.shadowRoot) {\n            this.tabTrapper.shadowRoot.innerHTML = '<slot></slot>';\n        }\n        this.overlayHolder.addEventListener(\n            'contextmenu',\n            this.forwardContextmenuEvent,\n            true\n        );\n        requestAnimationFrame(() => {\n            this.applyBodyMargins();\n            const observer = new ResizeObserver(() => {\n                this.applyBodyMargins();\n            });\n            observer.observe(document.body);\n        });\n    }\n\n    private _bodyMarginsApplied = false;\n\n    private applyBodyMargins(): void {\n        const { marginLeft, marginRight, marginTop, marginBottom } =\n            getComputedStyle(document.body);\n        const allZero =\n            parseFloat(marginLeft) === 0 &&\n            parseFloat(marginRight) === 0 &&\n            parseFloat(marginTop) === 0 &&\n            parseFloat(marginBottom) === 0;\n        if (allZero && !this._bodyMarginsApplied) {\n            return;\n        }\n        this.tabTrapper.style.setProperty(\n            '--swc-body-margins-inline',\n            `calc(${marginLeft} + ${marginRight})`\n        );\n        this.tabTrapper.style.setProperty(\n            '--swc-body-margins-block',\n            `calc(${marginTop} + ${marginBottom})`\n        );\n        this._bodyMarginsApplied = !allZero;\n    }\n\n    private startTabTrapping(): void {\n        this.initTabTrapping();\n        /* c8 ignore next 3 */\n        if (!this.canTabTrap) {\n            return;\n        }\n        this.tabTrapper.tabIndex = -1;\n        this.tabTrapper.setAttribute('aria-hidden', 'true');\n    }\n\n    private stopTabTrapping(): void {\n        /* c8 ignore next 3 */\n        if (!this.canTabTrap || !this.trappingInited) {\n            return;\n        }\n        this.tabTrapper.removeAttribute('tabindex');\n        this.tabTrapper.removeAttribute('aria-hidden');\n    }\n\n    private forwardContextmenuEvent = async (\n        event: MouseEvent\n    ): Promise<void> => {\n        const topOverlay = this.overlays[this.overlays.length - 1];\n        if (\n            !this.trappingInited ||\n            topOverlay.interaction !== 'modal' ||\n            event.target !== this.overlayHolder\n        ) {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        await this.closeTopOverlay();\n        getDeepElementFromPoint(event.clientX, event.clientY)?.dispatchEvent(\n            new MouseEvent('contextmenu', event)\n        );\n    };\n\n    private get document(): Document {\n        return this.root.ownerDocument /* c8 ignore next */ || document;\n    }\n\n    private get topOverlay(): ActiveOverlay | undefined {\n        return this.overlays.slice(-1)[0];\n    }\n\n    private findOverlayForContent(\n        overlayContent: HTMLElement\n    ): ActiveOverlay | undefined {\n        for (const item of this.overlays) {\n            if (overlayContent === item.overlayContent) {\n                return item;\n            }\n        }\n        return undefined;\n    }\n\n    private addEventListeners(): void {\n        if (this._eventsAreBound) return;\n        this._eventsAreBound = true;\n        this.document.addEventListener('click', this.handleMouseCapture, true);\n        this.document.addEventListener('click', this.handleMouse);\n        this.document.addEventListener('keydown', this.handleKeydown);\n        this.document.addEventListener(\n            'sp-overlay-close',\n            this.handleOverlayClose as EventListener\n        );\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    handleOverlayClose = (event: OverlayCloseEvent): void => {\n        const { root } = event;\n        if (!root) return;\n        this.closeOverlaysForRoot(root);\n    };\n\n    private isClickOverlayActiveForTrigger(trigger: HTMLElement): boolean {\n        return this.overlays.some(\n            (item) => trigger === item.trigger && item.interaction === 'click'\n        );\n    }\n\n    public async openOverlay(details: OverlayOpenDetail): Promise<boolean> {\n        this.addEventListeners();\n        if (this.findOverlayForContent(details.content)) {\n            return false;\n        }\n        if (details.notImmediatelyClosable) {\n            this._doesNotCloseOnFirstClick = true;\n        }\n        if (details.interaction === 'modal') {\n            this.startTabTrapping();\n        }\n\n        const contentWithLifecycle =\n            details.content as unknown as ManagedOverlayContent;\n        const { trigger } = details;\n        if (contentWithLifecycle.overlayWillOpenCallback) {\n            contentWithLifecycle.overlayWillOpenCallback({ trigger });\n        }\n\n        if (details.delayed) {\n            const cancelledPromise = this.overlayTimer.openTimer(\n                details.content\n            );\n            const promises = [cancelledPromise];\n            if (details.abortPromise) {\n                promises.push(details.abortPromise);\n            }\n            const cancelled = await Promise.race(promises);\n            if (cancelled) {\n                if (contentWithLifecycle.overlayOpenCancelledCallback) {\n                    contentWithLifecycle.overlayOpenCancelledCallback({\n                        trigger,\n                    });\n                }\n                return cancelled;\n            }\n        }\n\n        if (details.root) {\n            this.closeOverlaysForRoot(details.root);\n        }\n        if (details.interaction === 'click') {\n            this.closeAllHoverOverlays();\n        } else if (\n            details.interaction === 'hover' &&\n            this.isClickOverlayActiveForTrigger(details.trigger)\n        ) {\n            // Don't show a hover popover if the click popover is already active\n            return true;\n        }\n\n        const activeOverlay = ActiveOverlay.create(details);\n\n        if (this.overlays.length) {\n            const topOverlay = this.overlays[this.overlays.length - 1];\n            topOverlay.obscure(activeOverlay.interaction);\n        }\n\n        document.body.appendChild(activeOverlay);\n\n        /**\n         * The following work to make the new overlay the \"top\" of the stack\n         * has to happen AFTER the current call stack completes in case there\n         * is work there in to remove the previous \"top\" overlay.\n         */\n        await nextFrame();\n        this.overlays.push(activeOverlay);\n        await activeOverlay.updateComplete;\n        this.addOverlayEventListeners(activeOverlay);\n        if (typeof contentWithLifecycle.open !== 'undefined') {\n            await nextFrame();\n            // Without the rAF Firefox gets here to early\n            // and is not able trigger the animation.\n            contentWithLifecycle.open = true;\n        }\n        let cb: () => Promise<void> | void = () => {\n            return;\n        };\n        if (contentWithLifecycle.overlayOpenCallback) {\n            const { trigger } = activeOverlay;\n            const { overlayOpenCallback } = contentWithLifecycle;\n            cb = async () => await overlayOpenCallback({ trigger });\n        }\n        await activeOverlay.openCallback(cb);\n        return false;\n    }\n\n    public addOverlayEventListeners(activeOverlay: ActiveOverlay): void {\n        activeOverlay.addEventListener('close', (() => {\n            this.hideAndCloseOverlay(\n                activeOverlay,\n                true // animated?\n            );\n        }) as EventListener);\n        switch (activeOverlay.interaction) {\n            case 'replace':\n                this.addReplaceOverlayEventListeners(activeOverlay);\n                break;\n            case 'inline':\n                this.addInlineOverlayEventListeners(activeOverlay);\n                break;\n        }\n    }\n\n    public addReplaceOverlayEventListeners(activeOverlay: ActiveOverlay): void {\n        activeOverlay.addEventListener('keydown', (event: KeyboardEvent) => {\n            const { code } = event;\n            /* c8 ignore next */\n            if (code !== 'Tab') return;\n\n            event.stopPropagation();\n            this.closeOverlay(activeOverlay.overlayContent);\n            activeOverlay.tabbingAway = true;\n            activeOverlay.trigger.focus();\n            activeOverlay.trigger.dispatchEvent(\n                new KeyboardEvent('keydown', event)\n            );\n        });\n    }\n\n    public addInlineOverlayEventListeners(activeOverlay: ActiveOverlay): void {\n        activeOverlay.trigger.addEventListener(\n            'keydown',\n            activeOverlay.handleInlineTriggerKeydown\n        );\n        activeOverlay.addEventListener('keydown', (event: KeyboardEvent) => {\n            const { code, shiftKey } = event;\n            /* c8 ignore next */\n            if (code !== 'Tab') return;\n\n            activeOverlay.tabbingAway = true;\n            if (shiftKey) {\n                const returnFocusElement = document.createElement('span');\n                returnFocusElement.tabIndex = -1;\n                if (activeOverlay.trigger.hasAttribute('slot')) {\n                    returnFocusElement.slot = activeOverlay.trigger.slot;\n                }\n                activeOverlay.trigger.insertAdjacentElement(\n                    'afterend',\n                    returnFocusElement\n                );\n                returnFocusElement.focus();\n                returnFocusElement.remove();\n                return;\n            }\n\n            event.stopPropagation();\n            const triggerWithLifecycle =\n                activeOverlay.trigger as unknown as ManagedOverlayContent;\n            if (typeof triggerWithLifecycle.open !== 'undefined') {\n                triggerWithLifecycle.open = false;\n            }\n            this.closeOverlay(activeOverlay.overlayContent);\n            activeOverlay.trigger.focus();\n        });\n    }\n\n    public closeOverlay(content: HTMLElement): void {\n        this.overlayTimer.close(content);\n        requestAnimationFrame(() => {\n            const overlayFromContent = this.findOverlayForContent(content);\n            const overlaysToClose = [overlayFromContent];\n            overlaysToClose.push(\n                ...findOverlaysRootedInOverlay(\n                    overlayFromContent,\n                    this.overlays\n                )\n            );\n            overlaysToClose.forEach((overlay) =>\n                this.hideAndCloseOverlay(overlay)\n            );\n        });\n    }\n\n    private handleMouseCapture = (event: MouseEvent): void => {\n        const topOverlay = this.topOverlay;\n        if (\n            !event.target ||\n            !topOverlay ||\n            !topOverlay.overlayContent ||\n            hasModifier(event) ||\n            !isLeftClick(event)\n        ) {\n            this.preventMouseRootClose = true;\n            return;\n        }\n\n        if (event.target instanceof Node) {\n            const path = event.composedPath();\n            if (path.indexOf(topOverlay.overlayContent) >= 0) {\n                this.preventMouseRootClose = true;\n                return;\n            }\n            this.preventMouseRootClose = false;\n        }\n    };\n\n    private closeAllHoverOverlays(): void {\n        for (const overlay of this.overlays) {\n            if (overlay.interaction === 'hover') {\n                this.hideAndCloseOverlay(overlay, false);\n            }\n        }\n    }\n\n    private closeOverlaysForRoot(root: HTMLElement): void {\n        const overlaysToClose: ActiveOverlay[] = [];\n        for (const overlay of this.overlays) {\n            if (overlay.root && overlay.root === root) {\n                overlaysToClose.push(overlay);\n                overlaysToClose.push(\n                    ...findOverlaysRootedInOverlay(overlay, this.overlays)\n                );\n            }\n        }\n        overlaysToClose.forEach((overlay) =>\n            this.hideAndCloseOverlay(overlay, true, true)\n        );\n    }\n\n    private async manageFocusAfterCloseWhenOverlaysRemain(\n        returnBeforeFocus?: boolean,\n        previousTrigger?: HTMLElement\n    ): Promise<void> {\n        const topOverlay = this.overlays[this.overlays.length - 1];\n        topOverlay.feature();\n        // Push focus in the the next remaining overlay as needed when a `type=\"modal\"` overlay exists.\n        if (topOverlay.interaction === 'modal' || topOverlay.hasModalRoot) {\n            if (returnBeforeFocus) return;\n            await (previousTrigger || topOverlay).focus();\n        } else {\n            this.stopTabTrapping();\n        }\n    }\n\n    private manageFocusAfterCloseWhenLastOverlay(overlay: ActiveOverlay): void {\n        this.stopTabTrapping();\n        const isModal = overlay.interaction === 'modal';\n        const isReceivesFocus = overlay.receivesFocus === 'auto';\n        const isReplace = overlay.interaction === 'replace';\n        const isInline = overlay.interaction === 'inline';\n        const isTabbingAwayFromInlineOrReplace =\n            (isReplace || isInline) && !overlay.tabbingAway;\n        overlay.tabbingAway = false;\n        if (!isModal && !isReceivesFocus && !isTabbingAwayFromInlineOrReplace) {\n            return;\n        }\n        // Manage post closure focus when needed.\n        const overlayRoot = overlay.overlayContent.getRootNode() as ShadowRoot;\n        const overlayContentActiveElement = overlayRoot.activeElement;\n        let triggerRoot: ShadowRoot;\n        let triggerActiveElement: Element | null;\n        const contentContainsActiveElement = (): boolean =>\n            overlay.overlayContent.contains(overlayContentActiveElement);\n        const triggerRootContainsActiveElement = (): boolean => {\n            triggerRoot = overlay.trigger.getRootNode() as ShadowRoot;\n            triggerActiveElement = triggerRoot.activeElement;\n            return triggerRoot.contains(triggerActiveElement);\n        };\n        const triggerHostIsActiveElement = (): boolean =>\n            triggerRoot.host && triggerRoot.host === triggerActiveElement;\n        // Return focus to the trigger as long as the user hasn't actively focused\n        // something outside of the current overlay interface; trigger, root, host.\n        if (\n            isModal ||\n            contentContainsActiveElement() ||\n            triggerRootContainsActiveElement() ||\n            triggerHostIsActiveElement()\n        ) {\n            overlay.trigger.focus();\n        }\n    }\n\n    private async hideAndCloseOverlay(\n        overlay?: ActiveOverlay,\n        animated?: boolean,\n        returnBeforeFocus?: boolean\n    ): Promise<void> {\n        if (!overlay) {\n            return;\n        }\n        const contentWithLifecycle =\n            overlay.overlayContent as unknown as ManagedOverlayContent;\n        if (\n            typeof contentWithLifecycle.overlayWillCloseCallback !== 'undefined'\n        ) {\n            const { trigger } = overlay;\n            if (contentWithLifecycle.overlayWillCloseCallback({ trigger })) {\n                return;\n            }\n        }\n        await overlay.hide(animated);\n        if (typeof contentWithLifecycle.open !== 'undefined') {\n            contentWithLifecycle.open = false;\n        }\n        if (contentWithLifecycle.overlayCloseCallback) {\n            const { trigger } = overlay;\n            await contentWithLifecycle.overlayCloseCallback({ trigger });\n        }\n\n        if (overlay.state != 'dispose') return;\n\n        const index = this.overlays.indexOf(overlay);\n        if (index >= 0) {\n            this.overlays.splice(index, 1);\n        }\n\n        if (this.overlays.length) {\n            await this.manageFocusAfterCloseWhenOverlaysRemain(\n                returnBeforeFocus || overlay.interaction === 'hover',\n                overlay.trigger\n            );\n        } else {\n            this.manageFocusAfterCloseWhenLastOverlay(overlay);\n        }\n\n        await overlay.updateComplete;\n        overlay.remove();\n        overlay.dispose();\n\n        overlay.trigger.dispatchEvent(\n            new CustomEvent<OverlayOpenCloseDetail>('sp-closed', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n                detail: {\n                    interaction: overlay.interaction,\n                },\n            })\n        );\n    }\n\n    private closeTopOverlay(): Promise<void> {\n        return this.hideAndCloseOverlay(this.topOverlay, true);\n    }\n\n    /**\n     * A \"longpress\" occurs before the \"click\" that creates it has occured.\n     * In that way the first click will still be part of the \"longpress\" and\n     * not part of closing the overlay.\n     */\n    private _doesNotCloseOnFirstClick = false;\n\n    private handleMouse = (event: Event): void => {\n        if (this._doesNotCloseOnFirstClick) {\n            this._doesNotCloseOnFirstClick = false;\n            return;\n        }\n        if (this.preventMouseRootClose || event.defaultPrevented) {\n            return;\n        }\n        const overlaysToClose = [];\n        /**\n         * Find the first overlay that should be closed by this and include it in the\n         * array of overlays for closure.\n         *\n         * Event path dictates closure while the click event:\n         * - did not occur within the overlay content of the overlay\n         * AND was\n         * - not triggered by something in the click event's composed path\n         * OR\n         * - not a \"hover\" overlay\n         * Select the overlay for closure\n         */\n        let index = this.overlays.length;\n        while (index && overlaysToClose.length === 0) {\n            index -= 1;\n            const overlay = this.overlays[index];\n            const path = event.composedPath();\n            const eventPathDictatesClosure =\n                (!path.includes(overlay.trigger) ||\n                    overlay.interaction !== 'hover') &&\n                !path.includes(overlay.overlayContent);\n            if (eventPathDictatesClosure) {\n                overlaysToClose.push(overlay);\n            }\n        }\n        let root: HTMLElement | undefined = this.topOverlay?.root;\n        let overlay = parentOverlayOf(root);\n        while (root && overlay) {\n            overlaysToClose.push(overlay);\n            overlay = parentOverlayOf(root);\n            root = overlay?.root;\n        }\n        if (overlay) {\n            overlaysToClose.push(overlay);\n        }\n        overlaysToClose.forEach((overlay) => this.hideAndCloseOverlay(overlay));\n    };\n\n    private handleKeydown = (event: KeyboardEvent): void => {\n        if (event.code === 'Escape') {\n            this.closeTopOverlay();\n        }\n    };\n\n    private handleResize = (): void => {\n        if (this.handlingResize) return;\n\n        this.handlingResize = true;\n        requestAnimationFrame(async () => {\n            const promises = this.overlays.map((overlay) =>\n                overlay.updateOverlayPosition()\n            );\n            await Promise.all(promises);\n            this.handlingResize = false;\n        });\n    };\n}\n"],
  "mappings": "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",
  "names": ["overlay", "trigger"]
}
