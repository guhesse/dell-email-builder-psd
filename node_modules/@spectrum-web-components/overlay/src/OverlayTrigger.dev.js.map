{
  "version": 3,
  "sources": ["OverlayTrigger.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport type { LongpressEvent } from '@spectrum-web-components/action-button';\nimport { firstFocusableIn } from '@spectrum-web-components/shared/src/first-focusable-in.js';\nimport {\n    isAndroid,\n    isIOS,\n} from '@spectrum-web-components/shared/src/platform.js';\n\nimport {\n    OverlayOpenCloseDetail,\n    OverlayOptions,\n    OverlayTriggerInteractions,\n    Placement,\n    TriggerInteractions,\n} from './overlay-types';\nimport { openOverlay } from './loader.dev.js'\nimport overlayTriggerStyles from './overlay-trigger.css.js';\n\nexport type OverlayContentTypes = 'click' | 'hover' | 'longpress';\n\ntype closeOverlay =\n    | 'closeClickOverlay'\n    | 'closeHoverOverlay'\n    | 'closeLongpressOverlay';\n\nexport const LONGPRESS_INSTRUCTIONS = {\n    touch: 'Double tap and long press for additional options',\n    keyboard: 'Press Space or Alt+Down Arrow for additional options',\n    mouse: 'Click and hold for additional options',\n};\n\n/**\n * @element overlay-trigger\n *\n * @slot trigger - The content that will trigger the various overlays\n * @slot hover-content - The content that will be displayed on hover\n * @slot click-content - The content that will be displayed on click\n * @slot longpress-content - The content that will be displayed on click\n *\n * @fires sp-opened - Announces that the overlay has been opened\n * @fires sp-closed - Announces that the overlay has been closed\n */\nexport class OverlayTrigger extends SpectrumElement {\n    private closeClickOverlay?: Promise<() => void>;\n    private closeLongpressOverlay?: Promise<() => void>;\n    private closeHoverOverlay?: Promise<() => void>;\n\n    public static override get styles(): CSSResultArray {\n        return [overlayTriggerStyles];\n    }\n\n    /**\n     * @type {\"auto\" | \"auto-start\" | \"auto-end\" | \"top\" | \"bottom\" | \"right\" | \"left\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"none\"}\n     * @attr\n     */\n    @property({ reflect: true })\n    public placement: Placement = 'bottom';\n\n    @property()\n    public type?: OverlayTriggerInteractions;\n\n    @property({ type: Number, reflect: true })\n    public offset = 6;\n\n    @property({ reflect: true })\n    public open?: OverlayContentTypes;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @state()\n    public hasLongpressContent = false;\n\n    private longpressDescriptor?: HTMLElement;\n    private clickContent?: HTMLElement;\n    private longpressContent?: HTMLElement;\n    private hoverContent?: HTMLElement;\n    private targetContent?: HTMLElement;\n    private overlaidContent?: HTMLElement;\n\n    private _longpressId = `longpress-describedby-descriptor`;\n\n    private handleClose(event?: CustomEvent<OverlayOpenCloseDetail>): void {\n        if (\n            event &&\n            event.detail.interaction !== this.open &&\n            event.detail.interaction !== this.type\n        ) {\n            return;\n        }\n        this.removeAttribute('open');\n    }\n\n    protected override render(): TemplateResult {\n        // Keyboard event availability documented in README.md\n        /* eslint-disable lit-a11y/click-events-have-key-events */\n        return html`\n            <slot\n                id=\"trigger\"\n                @click=${this.onTrigger}\n                @longpress=${this.onTrigger}\n                @mouseenter=${this.onTrigger}\n                @mouseleave=${this.onTrigger}\n                @focusin=${this.onTrigger}\n                @focusout=${this.onTrigger}\n                @sp-closed=${this.handleClose}\n                @slotchange=${this.onTargetSlotChange}\n                name=\"trigger\"\n            ></slot>\n            <div id=\"overlay-content\">\n                <slot\n                    @slotchange=${this.onClickSlotChange}\n                    name=\"click-content\"\n                ></slot>\n                <slot\n                    @slotchange=${this.onLongpressSlotChange}\n                    name=\"longpress-content\"\n                ></slot>\n                <slot\n                    @slotchange=${this.onHoverSlotChange}\n                    name=\"hover-content\"\n                ></slot>\n                <slot name=${this._longpressId}></slot>\n            </div>\n        `;\n        /* eslint-enable lit-a11y/click-events-have-key-events */\n    }\n\n    protected override updated(changes: PropertyValues<this>): void {\n        super.updated(changes);\n        if (this.disabled && changes.has('disabled')) {\n            this.closeAllOverlays();\n            return;\n        }\n        if (changes.has('open')) {\n            this.manageOpen();\n        }\n        if (changes.has('hasLongpressContent')) {\n            this.manageLongpressDescriptor();\n        }\n    }\n\n    protected manageLongpressDescriptor(): void {\n        const trigger = this.querySelector(\n            '[slot=\"trigger\"]'\n        ) as SpectrumElement;\n        const ariaDescribedby = trigger.getAttribute('aria-describedby');\n        let descriptors = ariaDescribedby ? ariaDescribedby.split(/\\s+/) : [];\n\n        if (this.hasLongpressContent) {\n            if (!this.longpressDescriptor) {\n                this.longpressDescriptor = document.createElement(\n                    'div'\n                ) as HTMLElement;\n\n                this.longpressDescriptor.id = this._longpressId;\n                this.longpressDescriptor.slot = this._longpressId;\n            }\n            const messageType = isIOS() || isAndroid() ? 'touch' : 'keyboard';\n            this.longpressDescriptor.textContent =\n                LONGPRESS_INSTRUCTIONS[messageType];\n            this.appendChild(this.longpressDescriptor);\n            descriptors.push(this._longpressId);\n        } else {\n            if (this.longpressDescriptor) this.longpressDescriptor.remove();\n            descriptors = descriptors.filter(\n                (descriptor) => descriptor !== this._longpressId\n            );\n        }\n        if (descriptors.length) {\n            trigger.setAttribute('aria-describedby', descriptors.join(' '));\n        } else {\n            trigger.removeAttribute('aria-describedby');\n        }\n    }\n\n    private closeAllOverlays(): void {\n        if (this.abortOverlay) this.abortOverlay(true);\n        (\n            [\n                'closeClickOverlay',\n                'closeHoverOverlay',\n                'closeLongpressOverlay',\n            ] as closeOverlay[]\n        ).forEach(async (name) => {\n            const canClose = this[name] as Promise<() => void>;\n            if (canClose == null) return;\n            delete this[name];\n            (await canClose)();\n        });\n        this.overlaidContent = undefined;\n    }\n\n    private manageOpen(): void {\n        const openHandlers: Record<OverlayContentTypes | 'none', () => void> = {\n            click: () => this.onTriggerClick(),\n            hover: () => this.onTriggerMouseEnter(),\n            longpress: () => this.onTriggerLongpress(),\n            none: () => this.closeAllOverlays(),\n        };\n        openHandlers[this.open ?? 'none']();\n    }\n\n    private async openOverlay(\n        target: HTMLElement,\n        interaction: TriggerInteractions,\n        content: HTMLElement,\n        options: OverlayOptions\n    ): Promise<() => void> {\n        this.openStatePromise = new Promise(\n            (res) => (this.openStateResolver = res)\n        );\n        this.addEventListener(\n            'sp-opened',\n            () => {\n                this.openStateResolver();\n            },\n            { once: true }\n        );\n        this.overlaidContent = content;\n        return OverlayTrigger.openOverlay(\n            target,\n            interaction,\n            content,\n            options\n        );\n    }\n\n    public static openOverlay = async (\n        target: HTMLElement,\n        interaction: TriggerInteractions,\n        content: HTMLElement,\n        options: OverlayOptions\n    ): Promise<() => void> => {\n        return openOverlay(target, interaction, content, options);\n    };\n\n    private get overlayOptions(): OverlayOptions {\n        return {\n            offset: this.offset,\n            placement: this.placement,\n            receivesFocus:\n                !this.type || this.type === 'inline' || this.open === 'hover'\n                    ? undefined\n                    : 'auto',\n        };\n    }\n\n    private onTrigger(event: CustomEvent<LongpressEvent>): void {\n        const mouseIsEnteringHoverContent =\n            event.type === 'mouseleave' &&\n            this.open === 'hover' &&\n            (event as unknown as MouseEvent).relatedTarget ===\n                this.overlaidContent;\n        if (mouseIsEnteringHoverContent && this.overlaidContent) {\n            this.overlaidContent.addEventListener(\n                'mouseleave',\n                (event: MouseEvent) => {\n                    const mouseIsEnteringTrigger =\n                        event.relatedTarget === this.targetContent;\n                    if (mouseIsEnteringTrigger) {\n                        return;\n                    }\n                    this.onTrigger(\n                        event as unknown as CustomEvent<LongpressEvent>\n                    );\n                },\n                { once: true }\n            );\n            return;\n        }\n        if (this.disabled) return;\n\n        switch (event.type) {\n            case 'mouseenter':\n            case 'focusin':\n                if (!this.open && this.hoverContent) {\n                    this.open = 'hover';\n                }\n                return;\n            case 'mouseleave':\n            case 'focusout':\n                if (this.open === 'hover') {\n                    this.handleClose();\n                }\n                return;\n            case 'click':\n                if (this.clickContent) {\n                    this.open = event.type;\n                }\n                return;\n            case 'longpress':\n                if (this.longpressContent) {\n                    this._longpressEvent = event;\n                    this.open = event.type;\n                }\n                return;\n        }\n    }\n\n    private prepareToFocusOverlayContent(overlayContent: HTMLElement): void {\n        if (this.type !== 'modal') {\n            return;\n        }\n        const firstFocusable = firstFocusableIn(overlayContent);\n        if (!firstFocusable) {\n            overlayContent.tabIndex = 0;\n        }\n    }\n\n    public async onTriggerClick(): Promise<void> {\n        if (\n            !this.targetContent ||\n            !this.clickContent ||\n            this.closeClickOverlay\n        ) {\n            return;\n        }\n        const { targetContent, clickContent } = this;\n        this.closeAllOverlays();\n        this.prepareToFocusOverlayContent(clickContent);\n        if (window.__swc.DEBUG) {\n            window.__swc.ignoreWarningLevels.deprecation = true;\n        }\n        this.closeClickOverlay = this.openOverlay(\n            targetContent,\n            this.type ? this.type : 'click',\n            clickContent,\n            this.overlayOptions\n        );\n        if (window.__swc.DEBUG) {\n            window.__swc.ignoreWarningLevels.deprecation = false;\n        }\n    }\n\n    private _longpressEvent?: CustomEvent<LongpressEvent>;\n\n    private async onTriggerLongpress(): Promise<void> {\n        if (\n            !this.targetContent ||\n            !this.longpressContent ||\n            this.closeLongpressOverlay\n        ) {\n            return;\n        }\n        const { targetContent, longpressContent } = this;\n        this.closeAllOverlays();\n        this.prepareToFocusOverlayContent(longpressContent);\n        const notImmediatelyClosable =\n            this._longpressEvent?.detail?.source !== 'keyboard';\n        if (window.__swc.DEBUG) {\n            window.__swc.ignoreWarningLevels.deprecation = true;\n        }\n        this.closeLongpressOverlay = this.openOverlay(\n            targetContent,\n            this.type ? this.type : 'longpress',\n            longpressContent,\n            {\n                ...this.overlayOptions,\n                receivesFocus: 'auto',\n                notImmediatelyClosable,\n            }\n        );\n        if (window.__swc.DEBUG) {\n            window.__swc.ignoreWarningLevels.deprecation = false;\n        }\n        this._longpressEvent = undefined;\n    }\n\n    private abortOverlay: (cancelled: boolean) => void = () => {\n        return;\n    };\n\n    public async onTriggerMouseEnter(): Promise<void> {\n        if (\n            !this.targetContent ||\n            !this.hoverContent ||\n            this.closeHoverOverlay\n        ) {\n            return;\n        }\n        const abortPromise: Promise<boolean> = new Promise((res) => {\n            this.abortOverlay = res;\n        });\n        const { targetContent, hoverContent } = this;\n        if (window.__swc.DEBUG) {\n            window.__swc.ignoreWarningLevels.deprecation = true;\n        }\n        this.closeHoverOverlay = this.openOverlay(\n            targetContent,\n            'hover',\n            hoverContent,\n            {\n                abortPromise,\n                ...this.overlayOptions,\n            }\n        );\n        if (window.__swc.DEBUG) {\n            window.__swc.ignoreWarningLevels.deprecation = false;\n        }\n    }\n\n    private onClickSlotChange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.clickContent = this.extractSlotContentFromEvent(event);\n        this.manageOpen();\n    }\n\n    private onLongpressSlotChange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.longpressContent = this.extractSlotContentFromEvent(event);\n        this.hasLongpressContent =\n            !!this.longpressContent || !!this.closeLongpressOverlay;\n        this.manageOpen();\n    }\n\n    private onHoverSlotChange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.hoverContent = this.extractSlotContentFromEvent(event);\n        this.manageOpen();\n    }\n\n    private onTargetSlotChange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.targetContent = this.extractSlotContentFromEvent(event);\n    }\n\n    private extractSlotContentFromEvent(event: Event): HTMLElement | undefined {\n        const slot = event.target as HTMLSlotElement;\n        const nodes = slot.assignedNodes({ flatten: true });\n        return nodes.find((node) => node instanceof HTMLElement) as HTMLElement;\n    }\n\n    private openStatePromise = Promise.resolve();\n    private openStateResolver!: () => void;\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.openStatePromise;\n        return complete;\n    }\n\n    public override disconnectedCallback(): void {\n        this.closeAllOverlays();\n        super.disconnectedCallback();\n    }\n}\n"],
  "mappings": "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",
  "names": ["event"]
}
