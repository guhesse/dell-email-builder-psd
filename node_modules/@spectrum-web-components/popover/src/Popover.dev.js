"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import {
  html,
  nothing,
  SpectrumElement
} from "@spectrum-web-components/base";
import { property } from "@spectrum-web-components/base/src/decorators.js";
import popoverStyles from "./popover.css.js";
export class Popover extends SpectrumElement {
  constructor() {
    super(...arguments);
    this.dialog = false;
    this.open = false;
    this.placement = "none";
    this.tip = false;
  }
  static get styles() {
    return [popoverStyles];
  }
  renderTip() {
    return html`
            <div id="tip">
                <svg
                    xmlns="http://www.w3.org/svg/2000"
                    class="tip"
                    viewBox="0 0 24 12"
                >
                    <path
                        class="triangle"
                        d="M 0.7071067811865476 0 L 11.414213562373096 10.707106781186548 L 22.121320343559645 0"
                    ></path>
                </svg>
            </div>
        `;
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener(
      "sp-overlay-query",
      this.onOverlayQuery
    );
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener(
      "sp-overlay-query",
      this.onOverlayQuery
    );
  }
  onOverlayQuery(event) {
    if (!event.target)
      return;
    const target = event.target;
    if (target !== this)
      return;
    const tipElement = this.shadowRoot.querySelector("#tip");
    if (tipElement) {
      event.detail.overlayContentTipElement = tipElement;
    }
  }
  render() {
    return html`
            <slot></slot>
            ${this.tip ? this.renderTip() : nothing}
        `;
  }
}
__decorateClass([
  property({ type: Boolean, reflect: true })
], Popover.prototype, "dialog", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], Popover.prototype, "open", 2);
__decorateClass([
  property({ reflect: true })
], Popover.prototype, "placement", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], Popover.prototype, "tip", 2);
//# sourceMappingURL=Popover.dev.js.map
