{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "sp-overlay.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sp-overlay",
          "declaration": {
            "name": "Overlay",
            "module": "/src/Overlay.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "overlay-trigger.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "overlay-trigger",
          "declaration": {
            "name": "OverlayTrigger",
            "module": "/src/OverlayTrigger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "sync/overlay-trigger.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayTrigger",
          "declaration": {
            "name": "OverlayTrigger",
            "module": "sync/overlay-trigger.js"
          }
        },
        {
          "kind": "js",
          "name": "OverlayOptionsV1",
          "declaration": {
            "name": "OverlayOptionsV1",
            "module": "sync/overlay-trigger.js"
          }
        },
        {
          "kind": "js",
          "name": "TriggerInteractions",
          "declaration": {
            "name": "TriggerInteractions",
            "module": "sync/overlay-trigger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/AbstractOverlay.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "overlayTimer",
          "default": "new OverlayTimer()"
        },
        {
          "kind": "function",
          "name": "noop",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BeforetoggleClosedEvent",
          "members": [
            {
              "kind": "field",
              "name": "currentState",
              "type": {
                "text": "string"
              },
              "default": "'open'"
            },
            {
              "kind": "field",
              "name": "newState",
              "type": {
                "text": "string"
              },
              "default": "'closed'"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/AbstractOverlay.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BeforetoggleOpenEvent",
          "members": [
            {
              "kind": "field",
              "name": "currentState",
              "type": {
                "text": "string"
              },
              "default": "'closed'"
            },
            {
              "kind": "field",
              "name": "newState",
              "type": {
                "text": "string"
              },
              "default": "'open'"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/AbstractOverlay.ts"
          }
        },
        {
          "kind": "function",
          "name": "guaranteedAllTransitionend",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "description": "Target of the \"transition\" listeners."
            },
            {
              "name": "action",
              "type": {
                "text": "Function"
              },
              "description": "Method to trigger the \"transition\"."
            },
            {
              "name": "cb",
              "type": {
                "text": "Function"
              },
              "description": "Callback to trigger when the \"transition\" has ended."
            }
          ],
          "description": "Apply a \"transitionend\" listener to an element that may not transition but\nguarantee the callback will be fired either way."
        },
        {
          "kind": "function",
          "name": "nextFrame",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          }
        },
        {
          "kind": "function",
          "name": "forcePaint",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "class",
          "description": "Abstract Overlay base class so that property tyings and imperative API\ninterfaces can be held separate from the actual class definition.",
          "name": "AbstractOverlay",
          "members": [
            {
              "kind": "method",
              "name": "applyFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "_targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "_focusEl",
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "delayed",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "dialogEl",
              "type": {
                "text": "HTMLDialogElement & {\n        showPopover(): void;\n        hidePopover(): void;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "dispose",
              "default": "noop"
            },
            {
              "kind": "method",
              "name": "ensureOnDOM",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "_targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "OpenableElement[]"
              }
            },
            {
              "kind": "method",
              "name": "makeTransition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<HTMLElement | null>"
                }
              },
              "parameters": [
                {
                  "name": "_targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manageDelay",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "_targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manageDialogOpen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "managePopoverOpen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "managePosition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number | [number, number]"
              },
              "privacy": "protected",
              "default": "6"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "placementController",
              "type": {
                "text": "PlacementController"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'true' | 'false' | 'auto'"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "OverlayState"
              }
            },
            {
              "kind": "field",
              "name": "_state",
              "type": {
                "text": "OverlayState"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "triggerElement",
              "type": {
                "text": "HTMLElement | VirtualTrigger | null"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "OverlayTypes"
              }
            },
            {
              "kind": "field",
              "name": "willPreventClose",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "manuallyKeepOpen",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "open",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<() => void>"
                }
              },
              "parameters": [
                {
                  "name": "trigger",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "interaction",
                  "type": {
                    "text": "TriggerInteractionsV1"
                  }
                },
                {
                  "name": "content",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "optionsV1",
                  "type": {
                    "text": "OverlayOptionsV1"
                  }
                }
              ],
              "description": "Overloaded imperative API entry point that allows for both the pre-0.37.0\nargument signature as well as the post-0.37.0 signature. This allows for\nconsumers to continue to leverage it as they had been in previous releases\nwhile also surfacing the more feature-rich API that has been made available."
            },
            {
              "kind": "method",
              "name": "open",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<Overlay>"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "OverlayOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "open",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<Overlay | (() => void)>"
                }
              },
              "parameters": [
                {
                  "name": "triggerOrContent",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "interactionOrOptions",
                  "type": {
                    "text": "| TriggerInteractionsV1\n            | OverlayOptions\n            | undefined"
                  }
                },
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "optionsV1",
                  "optional": true,
                  "type": {
                    "text": "OverlayOptionsV1"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "SpectrumElement",
            "package": "@spectrum-web-components/base"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "overlayTimer",
          "declaration": {
            "name": "overlayTimer",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "noop",
          "declaration": {
            "name": "noop",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "BeforetoggleClosedEvent",
          "declaration": {
            "name": "BeforetoggleClosedEvent",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "BeforetoggleOpenEvent",
          "declaration": {
            "name": "BeforetoggleOpenEvent",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "guaranteedAllTransitionend",
          "declaration": {
            "name": "guaranteedAllTransitionend",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "nextFrame",
          "declaration": {
            "name": "nextFrame",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "forcePaint",
          "declaration": {
            "name": "forcePaint",
            "module": "src/AbstractOverlay.js"
          }
        },
        {
          "kind": "js",
          "name": "AbstractOverlay",
          "declaration": {
            "name": "AbstractOverlay",
            "module": "src/AbstractOverlay.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Overlay.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "LONGPRESS_INSTRUCTIONS",
          "type": {
            "text": "object"
          },
          "default": "{\n    touch: 'Double tap and long press for additional options',\n    keyboard: 'Press Space or Alt+Down Arrow for additional options',\n    mouse: 'Click and hold for additional options',\n}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "Overlay",
          "members": [
            {
              "kind": "field",
              "name": "abortController",
              "type": {
                "text": "AbortController"
              }
            },
            {
              "kind": "field",
              "name": "delayed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "An Overlay that is `delayed` will wait until a warm-up period of 1000ms\nhas completed before opening. Once the warmup period has completed, all\nsubsequent Overlays will open immediately. When no Overlays are opened,\na cooldown period of 1000ms will begin. Once the cooldown has completed,\nthe next Overlay to be opened will be subject to the warm-up period if\nprovided that option.",
              "attribute": "delayed"
            },
            {
              "kind": "field",
              "name": "dialogEl",
              "type": {
                "text": "HTMLDialogElement & {\n        showPopover(): void;\n        hidePopover(): void;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the overlay is currently functional or not",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "OpenableElement[]"
              }
            },
            {
              "kind": "field",
              "name": "parentOverlayToForceClose",
              "type": {
                "text": "Overlay | undefined"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "hasNonVirtualTrigger",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "longpressState",
              "type": {
                "text": "'null' | 'potential' | 'opening' | 'pressed'"
              },
              "privacy": "protected",
              "default": "'null'"
            },
            {
              "kind": "field",
              "name": "longressTimeout",
              "type": {
                "text": "ReturnType<typeof setTimeout>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "ReturnType<typeof setTimeout> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number | [number, number]"
              },
              "default": "6",
              "description": "The `offset` property accepts either a single number, to\ndefine the offset of the Overlay along the main axis from\nthe trigger, or 2-tuple, to define the offset along the\nmain axis and the cross axis. This option has no effect\nwhen there is no trigger element.",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "placementController",
              "privacy": "protected",
              "default": "new PlacementController(this)"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the Overlay is projected onto the \"top layer\" or not.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_open",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "openCount",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "1"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\""
              },
              "description": "Instruct the Overlay where to place itself in\nrelationship to the trigger element.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'true' | 'false' | 'auto'"
              },
              "default": "'auto'",
              "description": "Whether to pass focus to the overlay once opened, or\nto the appropriate value based on the \"type\" of the overlay\nwhen set to `\"auto\"`.",
              "attribute": "receives-focus"
            },
            {
              "kind": "field",
              "name": "releaseAriaDescribedby",
              "privacy": "private",
              "default": "noop"
            },
            {
              "kind": "field",
              "name": "releaseLongpressDescribedby",
              "privacy": "private",
              "default": "noop"
            },
            {
              "kind": "field",
              "name": "slotEl",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "OverlayState"
              }
            },
            {
              "kind": "field",
              "name": "_state",
              "type": {
                "text": "OverlayState"
              },
              "default": "'closed'"
            },
            {
              "kind": "field",
              "name": "tipPadding",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "tip-padding"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string | undefined"
              },
              "description": "An optional ID reference for the trigger element combined with the optional\ninteraction (click | hover | longpress) by which the overlay shold open\nthe overlay with an `@`: e.g. `trigger@click` opens the overlay when an\nelement with the ID \"trigger\" is clicked.",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "triggerElement",
              "type": {
                "text": "HTMLElement | VirtualTrigger | null"
              },
              "default": "null",
              "description": "An element reference for the trigger element that the overlay should relate to."
            },
            {
              "kind": "field",
              "name": "triggerInteraction",
              "type": {
                "text": "'click' | 'longpress' | 'hover' | undefined"
              },
              "description": "The specific interaction to listen for on the `triggerElement` to open the overlay."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"auto\" | \"hint\" | \"manual\" | \"modal\" | \"page\""
              },
              "default": "'auto'",
              "description": "Configures the open/close heuristics of the Overlay.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "wasOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "elementResolver",
              "privacy": "private",
              "default": "new ElementResolutionController(this)"
            },
            {
              "kind": "field",
              "name": "usesDialog",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "popoverValue",
              "type": {
                "text": "'auto' | 'manual' | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "requiresPosition",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "managePosition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "managePopoverOpen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "applyFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "focusEl",
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "closeOnFocusOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "manageOpen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "oldOpen",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "unbindEvents",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "bindEvents",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "bindClickEvents",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "triggerElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bindLongpressEvents",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "triggerElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bindHoverEvents",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "triggerElement",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manageTriggerElement",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "triggerElement",
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "elementIds",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "prepareLongpressDescription",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "trigger",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prepareAriaDescribedby",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handlePointerdown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handlePointerup",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleKeyup",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "preventNextToggle",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "An overlay with a `click` interaction should not close on click `triggerElement`.\nWhen a click is initiated (`pointerdown`), apply `preventNextToggle` when the\noverlay is `open` to prevent from toggling the overlay when the click event\npropagates later in the interaction."
            },
            {
              "kind": "field",
              "name": "handlePointerdownForClick",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "focusedin",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "pointerentered",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "handlePointerenter",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleOverlayPointerenter",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handlePointerleave",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleOverlayPointerleave",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "doPointerleave",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleLongpress",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBeforetoggle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { newState: string }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBrowserClose",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "manuallyKeepOpen",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleSlotchange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "shouldPreventClose",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "dialogStyleMap",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "renderDialog",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderPopover",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "description": "announces that an overlay has completed any entry animations",
              "name": "sp-opened"
            },
            {
              "description": "announce that an overlay has compelted any exit animations",
              "name": "sp-closed"
            }
          ],
          "attributes": [
            {
              "name": "delayed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "An Overlay that is `delayed` will wait until a warm-up period of 1000ms\nhas completed before opening. Once the warmup period has completed, all\nsubsequent Overlays will open immediately. When no Overlays are opened,\na cooldown period of 1000ms will begin. Once the cooldown has completed,\nthe next Overlay to be opened will be subject to the warm-up period if\nprovided that option.",
              "fieldName": "delayed"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the overlay is currently functional or not",
              "fieldName": "disabled"
            },
            {
              "name": "offset",
              "type": {
                "text": "number | [number, number]"
              },
              "default": "6",
              "description": "The `offset` property accepts either a single number, to\ndefine the offset of the Overlay along the main axis from\nthe trigger, or 2-tuple, to define the offset along the\nmain axis and the cross axis. This option has no effect\nwhen there is no trigger element.",
              "fieldName": "offset"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the Overlay is projected onto the \"top layer\" or not.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\""
              },
              "description": "Instruct the Overlay where to place itself in\nrelationship to the trigger element.",
              "fieldName": "placement"
            },
            {
              "name": "receives-focus",
              "type": {
                "text": "'true' | 'false' | 'auto'"
              },
              "default": "'auto'",
              "description": "Whether to pass focus to the overlay once opened, or\nto the appropriate value based on the \"type\" of the overlay\nwhen set to `\"auto\"`.",
              "fieldName": "receivesFocus"
            },
            {
              "name": "tip-padding",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "tipPadding"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string | undefined"
              },
              "description": "An optional ID reference for the trigger element combined with the optional\ninteraction (click | hover | longpress) by which the overlay shold open\nthe overlay with an `@`: e.g. `trigger@click` opens the overlay when an\nelement with the ID \"trigger\" is clicked.",
              "fieldName": "trigger"
            },
            {
              "name": "type",
              "type": {
                "text": "\"auto\" | \"hint\" | \"manual\" | \"modal\" | \"page\""
              },
              "default": "'auto'",
              "description": "Configures the open/close heuristics of the Overlay.",
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "OverlayFeatures",
            "module": "src/Overlay.ts"
          },
          "tagName": "sp-overlay",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LONGPRESS_INSTRUCTIONS",
          "declaration": {
            "name": "LONGPRESS_INSTRUCTIONS",
            "module": "src/Overlay.js"
          }
        },
        {
          "kind": "js",
          "name": "Overlay",
          "declaration": {
            "name": "Overlay",
            "module": "src/Overlay.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/OverlayDialog.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "OverlayDialog",
          "members": [
            {
              "kind": "method",
              "name": "manageDialogOpen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "dialogMakeTransition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<HTMLElement | null>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dialogApplyFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "focusEl",
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "event"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              }
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayDialog",
          "declaration": {
            "name": "OverlayDialog",
            "module": "src/OverlayDialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/OverlayNoPopover.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "OverlayNoPopover",
          "members": [
            {
              "kind": "method",
              "name": "managePopoverOpen",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "manageDelay",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "ensureOnDOM",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "_targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "makeTransition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<HTMLElement | null>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "event"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              }
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayNoPopover",
          "declaration": {
            "name": "OverlayNoPopover",
            "module": "src/OverlayNoPopover.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/OverlayPopover.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "OverlayPopover",
          "members": [
            {
              "kind": "method",
              "name": "manageDelay",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "shouldHidePopover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "A popover should be hidden _after_ it is no longer on top-layer because\nthe position metrics will have changed from when it was originally positioned."
            },
            {
              "kind": "method",
              "name": "shouldShowPopover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "ensureOnDOM",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "makeTransition",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<HTMLElement | null>"
                }
              },
              "parameters": [
                {
                  "name": "targetOpenState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "event"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              }
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayPopover",
          "declaration": {
            "name": "OverlayPopover",
            "module": "src/OverlayPopover.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/OverlayStack.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "overlayStack",
          "default": "new OverlayStack()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "overlayStack",
          "declaration": {
            "name": "overlayStack",
            "module": "src/OverlayStack.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/OverlayTrigger.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OverlayTrigger",
          "slots": [
            {
              "description": "The content that will trigger the various overlays",
              "name": "trigger"
            },
            {
              "description": "The content that will be displayed on hover",
              "name": "hover-content"
            },
            {
              "description": "The content that will be displayed on click",
              "name": "click-content"
            },
            {
              "description": "The content that will be displayed on click",
              "name": "longpress-content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "'click hover longpress'",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\""
              },
              "privacy": "public",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "OverlayTriggerInteractions | undefined"
              },
              "privacy": "public",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "6",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "OverlayContentTypes | undefined"
              },
              "privacy": "public",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clickContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "clickPlacement",
              "type": {
                "text": "Placement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "longpressContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "longpressPlacement",
              "type": {
                "text": "Placement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hoverContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hoverPlacement",
              "type": {
                "text": "Placement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "targetContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "clickOverlayElement",
              "type": {
                "text": "Overlay"
              }
            },
            {
              "kind": "field",
              "name": "longpressOverlayElement",
              "type": {
                "text": "Overlay"
              }
            },
            {
              "kind": "field",
              "name": "hoverOverlayElement",
              "type": {
                "text": "Overlay"
              }
            },
            {
              "kind": "method",
              "name": "getAssignedElementsFromSlot",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement[]"
                }
              },
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerContent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotContent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBeforetoggle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "BeforetoggleOpenEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSlot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderClickOverlay",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHoverOverlay",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderLongpressOverlay",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              }
            }
          ],
          "events": [
            {
              "description": "Announces that the overlay has been opened",
              "name": "sp-opened"
            },
            {
              "description": "Announces that the overlay has been closed",
              "name": "sp-closed"
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\""
              },
              "fieldName": "placement",
              "attribute": "placement"
            },
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "'click hover longpress'",
              "fieldName": "content"
            },
            {
              "name": "type",
              "type": {
                "text": "OverlayTriggerInteractions | undefined"
              },
              "fieldName": "type"
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "6",
              "fieldName": "offset"
            },
            {
              "name": "open",
              "type": {
                "text": "OverlayContentTypes | undefined"
              },
              "fieldName": "open"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "SpectrumElement",
            "package": "@spectrum-web-components/base"
          },
          "tagName": "overlay-trigger",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayTrigger",
          "declaration": {
            "name": "OverlayTrigger",
            "module": "src/OverlayTrigger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/PlacementController.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "placementUpdatedSymbol"
        },
        {
          "kind": "class",
          "description": "",
          "name": "PlacementController",
          "members": [
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "() => void | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "initialHeight",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isConstrained",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement & { elements: OpenableElement[] }"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "OverlayOptionsV1"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "originalPlacements",
              "privacy": "private",
              "default": "new WeakMap<HTMLElement, Placement>()"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "placeOverlay",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "default": "this.target",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "options",
                  "default": "this.options",
                  "type": {
                    "text": "OverlayOptionsV1"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "allowPlacementUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "updatePlacement"
            },
            {
              "kind": "method",
              "name": "computePlacement",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "field",
              "name": "resetOverlayPosition",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "placementUpdatedSymbol",
          "declaration": {
            "name": "placementUpdatedSymbol",
            "module": "src/PlacementController.js"
          }
        },
        {
          "kind": "js",
          "name": "PlacementController",
          "declaration": {
            "name": "PlacementController",
            "module": "src/PlacementController.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/VirtualTrigger.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VirtualTrigger",
          "members": [
            {
              "kind": "field",
              "name": "x",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "x"
            },
            {
              "kind": "field",
              "name": "y",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "y"
            },
            {
              "kind": "method",
              "name": "updateBoundingClientRect",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getBoundingClientRect",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "DOMRect"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VirtualTrigger",
          "declaration": {
            "name": "VirtualTrigger",
            "module": "src/VirtualTrigger.js"
          }
        }
      ]
    }
  ]
}
