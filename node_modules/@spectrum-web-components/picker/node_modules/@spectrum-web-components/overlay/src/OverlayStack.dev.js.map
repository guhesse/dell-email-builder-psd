{
  "version": 3,
  "sources": ["OverlayStack.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { Overlay } from './Overlay.dev.js'\n\nconst supportsPopover = 'showPopover' in document.createElement('div');\n\nclass OverlayStack {\n    private get document(): Document {\n        return this.root.ownerDocument /* c8 ignore next */ || document;\n    }\n\n    private pointerdownPath?: EventTarget[];\n\n    private root: HTMLElement = document.body;\n\n    stack: Overlay[] = [];\n\n    constructor() {\n        this.bindEvents();\n    }\n\n    bindEvents(): void {\n        this.document.addEventListener('pointerdown', this.handlePointerdown);\n        this.document.addEventListener('pointerup', this.handlePointerup);\n        this.document.addEventListener('keydown', this.handleKeydown);\n    }\n\n    private closeOverlay(overlay: Overlay): void {\n        const overlayIndex = this.stack.indexOf(overlay);\n        if (overlayIndex > -1) {\n            this.stack.splice(overlayIndex, 1);\n        }\n        overlay.open = false;\n    }\n\n    /**\n     * Cach the `pointerdownTarget` for later testing\n     *\n     * @param event {ClickEvent}\n     */\n    handlePointerdown = (event: Event): void => {\n        this.pointerdownPath = event.composedPath();\n    };\n\n    /**\n     * Close all overlays that are not ancestors of this click event\n     *\n     * @param event {ClickEvent}\n     */\n    handlePointerup = (): void => {\n        if (!this.stack.length) return;\n        if (!this.pointerdownPath?.length) return;\n\n        // Test against the composed path in `pointerdown` in case the visitor moved their\n        // pointer during the course of the interaction.\n        const composedPath = this.pointerdownPath;\n        this.pointerdownPath = undefined;\n        const nonAncestorOverlays = this.stack.filter((overlay) => {\n            const inStack = composedPath.find(\n                (el) => el === overlay || el === overlay?.triggerElement\n            );\n            return !inStack && !overlay.shouldPreventClose();\n        }) as Overlay[];\n        nonAncestorOverlays.reverse();\n        nonAncestorOverlays.forEach((overlay) => {\n            this.closeOverlay(overlay);\n            let parentToClose = overlay.parentOverlayToForceClose;\n            while (parentToClose) {\n                this.closeOverlay(parentToClose);\n                parentToClose = parentToClose.parentOverlayToForceClose;\n            }\n        });\n    };\n\n    handleBeforetoggle = (event: Event): void => {\n        const { target, newState: open } = event as Event & {\n            newState: string;\n        };\n        if (open === 'open') return;\n        this.closeOverlay(target as Overlay);\n    };\n\n    private handleKeydown = (event: KeyboardEvent): void => {\n        if (event.code !== 'Escape') return;\n        const last = this.stack.at(-1);\n        if (last?.type === 'page') {\n            event.preventDefault();\n            return;\n        }\n        if (supportsPopover) return;\n        if (!this.stack.length) return;\n\n        if (!last) return;\n        this.closeOverlay(last);\n    };\n\n    /**\n     * Get an array of Overlays that all share the same trigger element.\n     *\n     * @param triggerElement {HTMLELement}\n     * @returns {Overlay[]}\n     */\n    overlaysByTriggerElement(triggerElement: HTMLElement): Overlay[] {\n        return this.stack.filter(\n            (overlay) => overlay.triggerElement === triggerElement\n        );\n    }\n\n    /**\n     * When overlays are added manage the open state of exisiting overlays appropriately:\n     * - 'modal': should close other overlays\n     * - 'page': should close other overlays\n     * - 'hint': shouldn't close other overlays\n     * - 'auto': should close other 'auto' overlays and other 'hint' overlays, but not 'manual' overlays\n     * - 'manual': shouldn't close other overlays\n     */\n    add(overlay: Overlay): void {\n        if (this.stack.includes(overlay)) {\n            const overlayIndex = this.stack.indexOf(overlay);\n            if (overlayIndex > -1) {\n                this.stack.splice(overlayIndex, 1);\n                this.stack.push(overlay);\n            }\n            return;\n        }\n        if (\n            overlay.type === 'auto' ||\n            overlay.type === 'modal' ||\n            overlay.type === 'page'\n        ) {\n            // manage closing open overlays\n            const queryPathEventName = 'sp-overlay-query-path';\n            const queryPathEvent = new Event(queryPathEventName, {\n                composed: true,\n                bubbles: true,\n            });\n            overlay.addEventListener(\n                queryPathEventName,\n                (event: Event) => {\n                    const path = event.composedPath();\n                    this.stack.forEach((overlayEl) => {\n                        const inPath = path.find((el) => el === overlayEl);\n                        if (!inPath && overlayEl.type !== 'manual') {\n                            this.closeOverlay(overlayEl);\n                        }\n                    });\n                },\n                { once: true }\n            );\n            overlay.dispatchEvent(queryPathEvent);\n        } else if (overlay.type === 'hint') {\n            this.stack.forEach((overlayEl) => {\n                if (overlayEl.type === 'hint') {\n                    this.closeOverlay(overlayEl);\n                }\n            });\n        }\n        requestAnimationFrame(() => {\n            this.stack.push(overlay);\n            overlay.addEventListener('beforetoggle', this.handleBeforetoggle, {\n                once: true,\n            });\n        });\n    }\n\n    remove(overlay: Overlay): void {\n        this.closeOverlay(overlay);\n    }\n}\n\nexport const overlayStack = new OverlayStack();\n"],
  "mappings": ";AAaA,MAAM,kBAAkB,iBAAiB,SAAS,cAAc,KAAK;AAErE,MAAM,aAAa;AAAA,EAWf,cAAc;AAJd,SAAQ,OAAoB,SAAS;AAErC,iBAAmB,CAAC;AAyBpB;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAoB,CAAC,UAAuB;AACxC,WAAK,kBAAkB,MAAM,aAAa;AAAA,IAC9C;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkB,MAAY;AA1DlC;AA2DQ,UAAI,CAAC,KAAK,MAAM;AAAQ;AACxB,UAAI,GAAC,UAAK,oBAAL,mBAAsB;AAAQ;AAInC,YAAM,eAAe,KAAK;AAC1B,WAAK,kBAAkB;AACvB,YAAM,sBAAsB,KAAK,MAAM,OAAO,CAAC,YAAY;AACvD,cAAM,UAAU,aAAa;AAAA,UACzB,CAAC,OAAO,OAAO,WAAW,QAAO,mCAAS;AAAA,QAC9C;AACA,eAAO,CAAC,WAAW,CAAC,QAAQ,mBAAmB;AAAA,MACnD,CAAC;AACD,0BAAoB,QAAQ;AAC5B,0BAAoB,QAAQ,CAAC,YAAY;AACrC,aAAK,aAAa,OAAO;AACzB,YAAI,gBAAgB,QAAQ;AAC5B,eAAO,eAAe;AAClB,eAAK,aAAa,aAAa;AAC/B,0BAAgB,cAAc;AAAA,QAClC;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,8BAAqB,CAAC,UAAuB;AACzC,YAAM,EAAE,QAAQ,UAAU,KAAK,IAAI;AAGnC,UAAI,SAAS;AAAQ;AACrB,WAAK,aAAa,MAAiB;AAAA,IACvC;AAEA,SAAQ,gBAAgB,CAAC,UAA+B;AACpD,UAAI,MAAM,SAAS;AAAU;AAC7B,YAAM,OAAO,KAAK,MAAM,GAAG,EAAE;AAC7B,WAAI,6BAAM,UAAS,QAAQ;AACvB,cAAM,eAAe;AACrB;AAAA,MACJ;AACA,UAAI;AAAiB;AACrB,UAAI,CAAC,KAAK,MAAM;AAAQ;AAExB,UAAI,CAAC;AAAM;AACX,WAAK,aAAa,IAAI;AAAA,IAC1B;AA5EI,SAAK,WAAW;AAAA,EACpB;AAAA,EAZA,IAAY,WAAqB;AAC7B,WAAO,KAAK,KAAK,iBAAsC;AAAA,EAC3D;AAAA,EAYA,aAAmB;AACf,SAAK,SAAS,iBAAiB,eAAe,KAAK,iBAAiB;AACpE,SAAK,SAAS,iBAAiB,aAAa,KAAK,eAAe;AAChE,SAAK,SAAS,iBAAiB,WAAW,KAAK,aAAa;AAAA,EAChE;AAAA,EAEQ,aAAa,SAAwB;AACzC,UAAM,eAAe,KAAK,MAAM,QAAQ,OAAO;AAC/C,QAAI,eAAe,IAAI;AACnB,WAAK,MAAM,OAAO,cAAc,CAAC;AAAA,IACrC;AACA,YAAQ,OAAO;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqEA,yBAAyB,gBAAwC;AAC7D,WAAO,KAAK,MAAM;AAAA,MACd,CAAC,YAAY,QAAQ,mBAAmB;AAAA,IAC5C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,SAAwB;AACxB,QAAI,KAAK,MAAM,SAAS,OAAO,GAAG;AAC9B,YAAM,eAAe,KAAK,MAAM,QAAQ,OAAO;AAC/C,UAAI,eAAe,IAAI;AACnB,aAAK,MAAM,OAAO,cAAc,CAAC;AACjC,aAAK,MAAM,KAAK,OAAO;AAAA,MAC3B;AACA;AAAA,IACJ;AACA,QACI,QAAQ,SAAS,UACjB,QAAQ,SAAS,WACjB,QAAQ,SAAS,QACnB;AAEE,YAAM,qBAAqB;AAC3B,YAAM,iBAAiB,IAAI,MAAM,oBAAoB;AAAA,QACjD,UAAU;AAAA,QACV,SAAS;AAAA,MACb,CAAC;AACD,cAAQ;AAAA,QACJ;AAAA,QACA,CAAC,UAAiB;AACd,gBAAM,OAAO,MAAM,aAAa;AAChC,eAAK,MAAM,QAAQ,CAAC,cAAc;AAC9B,kBAAM,SAAS,KAAK,KAAK,CAAC,OAAO,OAAO,SAAS;AACjD,gBAAI,CAAC,UAAU,UAAU,SAAS,UAAU;AACxC,mBAAK,aAAa,SAAS;AAAA,YAC/B;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,QACA,EAAE,MAAM,KAAK;AAAA,MACjB;AACA,cAAQ,cAAc,cAAc;AAAA,IACxC,WAAW,QAAQ,SAAS,QAAQ;AAChC,WAAK,MAAM,QAAQ,CAAC,cAAc;AAC9B,YAAI,UAAU,SAAS,QAAQ;AAC3B,eAAK,aAAa,SAAS;AAAA,QAC/B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,0BAAsB,MAAM;AACxB,WAAK,MAAM,KAAK,OAAO;AACvB,cAAQ,iBAAiB,gBAAgB,KAAK,oBAAoB;AAAA,QAC9D,MAAM;AAAA,MACV,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,SAAwB;AAC3B,SAAK,aAAa,OAAO;AAAA,EAC7B;AACJ;AAEO,aAAM,eAAe,IAAI,aAAa;",
  "names": []
}
