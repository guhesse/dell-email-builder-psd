import type { Placement } from '@floating-ui/dom';
import type { VirtualTrigger } from './VirtualTrigger.js';
export declare type Constructor<T = Record<string, unknown>> = {
    new (...args: any[]): T;
    prototype: T;
};
export { Placement };
export declare type OverlayTypes = 'auto' | 'hint' | 'manual' | 'modal' | 'page';
export declare type TriggerInteractions = OverlayTypes;
export declare type TriggerInteractionsV1 = 'click' | 'longpress' | 'hover' | 'custom' | 'replace' | 'inline' | 'modal';
export declare type OverlayTriggerInteractions = Extract<TriggerInteractions, 'inline' | 'modal' | 'replace'>;
export interface OverlayOpenCloseDetail {
    interaction: TriggerInteractions;
    reason?: 'external-click';
}
export interface OverlayCloseReasonDetail {
    reason?: 'external-click';
}
export declare type OverlayOptions = {
    delayed?: boolean;
    notImmediatelyClosable?: boolean;
    offset?: number | [number, number];
    placement?: Placement;
    receivesFocus?: 'auto' | 'true' | 'false';
    trigger?: HTMLElement | VirtualTrigger;
    type?: 'modal' | 'page' | 'hint' | 'auto' | 'manual';
};
export declare type OverlayOptionsV1 = {
    root?: HTMLElement;
    delayed?: boolean;
    placement?: Placement;
    offset?: number;
    receivesFocus?: 'true' | 'false' | 'auto';
    notImmediatelyClosable?: boolean;
    abortPromise?: Promise<boolean>;
    virtualTrigger?: VirtualTrigger;
};
declare global {
    interface GlobalEventHandlersEventMap {
        'sp-open': CustomEvent<OverlayOpenCloseDetail>;
        'sp-close': CustomEvent<OverlayOpenCloseDetail>;
    }
}
export declare type OpenableElement = HTMLElement & {
    open: boolean;
    tipElement?: HTMLElement;
    updateComplete?: Promise<void>;
};
export declare type OverlayState = 'closed' | 'opening' | 'opened' | 'closing';
