{
  "version": 3,
  "sources": ["SplitButton.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    DefaultElementSize,\n    html,\n    PropertyValues,\n    SizedMixin,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\n\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { ButtonVariants } from '@spectrum-web-components/button';\nimport { PickerBase } from '@spectrum-web-components/picker';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-more.js';\nimport chevronStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\nimport styles from './split-button.css.js';\n\nconst chevronClass = {\n    s: 'spectrum-UIIcon-ChevronDown75',\n    m: 'spectrum-UIIcon-ChevronDown100',\n    l: 'spectrum-UIIcon-ChevronDown200',\n    xl: 'spectrum-UIIcon-ChevronDown300',\n};\n\nexport type SplitButtonTypes = 'field' | 'more';\n\n/**\n * @element sp-split-button\n *\n * @slot - menu items to be listed in the Button\n * @slot tooltip - Tooltip to to be applied to the the main Button\n **/\nexport class SplitButton extends SizedMixin(PickerBase) {\n    public static override get styles(): CSSResultArray {\n        return [styles, chevronStyles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public left = false;\n\n    /**\n     * The visual variant to apply to this button.\n     */\n    @property({ reflect: true })\n    public variant: ButtonVariants = 'accent';\n\n    @property({ type: String })\n    public type: SplitButtonTypes = 'field';\n\n    @query('.trigger')\n    private trigger!: HTMLButtonElement;\n\n    protected override listRole: 'listbox' | 'menu' = 'menu';\n    protected override itemRole = 'menuitem';\n\n    public override get focusElement(): HTMLElement {\n        if (this.open) {\n            return this.optionsMenu;\n        }\n        if (this.left) {\n            return this.trigger;\n        }\n        return this.button;\n    }\n\n    private passClick(): void {\n        const target =\n            this.type === 'more'\n                ? this.menuItems[0]\n                : this.selectedItem || this.menuItems[0];\n        if (target) {\n            target.click();\n        }\n    }\n\n    protected override get buttonContent(): TemplateResult[] {\n        return [\n            html`\n                <div\n                    id=\"label\"\n                    role=\"presentation\"\n                    class=${ifDefined(this.value ? undefined : 'placeholder')}\n                >\n                    ${this.selectedItem?.itemText || ''}\n                </div>\n                <slot name=\"tooltip\"></slot>\n            `,\n        ];\n    }\n\n    protected override update(changes: PropertyValues<this>): void {\n        if (changes.has('type')) {\n            if (this.type === 'more') {\n                this.selects = undefined;\n            } else {\n                this.selects = 'single';\n            }\n        }\n        super.update(changes);\n    }\n\n    protected override render(): TemplateResult {\n        const treatment = ['cta', 'accent'].includes(this.variant)\n            ? 'fill'\n            : 'outline';\n        const buttons: TemplateResult[] = [\n            html`\n                <sp-button\n                    aria-label=${ifDefined(this.label || undefined)}\n                    id=\"button\"\n                    class=\"button ${this.variant}\"\n                    @click=${this.passClick}\n                    ?disabled=${this.disabled}\n                    variant=${this.variant}\n                    treatment=${treatment}\n                    size=${this.size}\n                >\n                    ${this.buttonContent}\n                </sp-button>\n            `,\n            html`\n                <sp-button\n                    aria-haspopup=\"true\"\n                    aria-expanded=${this.open ? 'true' : 'false'}\n                    aria-controls=${ifDefined(this.open ? 'menu' : undefined)}\n                    class=\"button trigger ${this.variant}\"\n                    @blur=${this.handleButtonBlur}\n                    @pointerdown=${this.handleButtonPointerdown}\n                    @focus=${this.handleButtonFocus}\n                    @click=${this.handleButtonClick}\n                    @keydown=${{\n                        handleEvent: this.handleEnterKeydown,\n                        capture: true,\n                    }}\n                    ?disabled=${this.disabled}\n                    aria-labelledby=\"button\"\n                    variant=${this.variant}\n                    treatment=${treatment}\n                    size=${this.size}\n                >\n                    ${this.type === 'field'\n                        ? html`\n                              <sp-icon-chevron100\n                                  class=\"icon ${chevronClass[\n                                      this.size as DefaultElementSize\n                                  ]}\"\n                                  slot=\"icon\"\n                              ></sp-icon-chevron100>\n                          `\n                        : html`\n                              <sp-icon-more\n                                  class=\"icon\"\n                                  slot=\"icon\"\n                              ></sp-icon-more>\n                          `}\n                </sp-button>\n            `,\n        ];\n        if (this.left) {\n            buttons.reverse();\n        }\n        return html`\n            ${buttons} ${this.renderMenu}\n        `;\n    }\n\n    protected override bindButtonKeydownListener(): void {\n        this.trigger.addEventListener('keydown', this.handleKeydown);\n    }\n\n    protected override async manageSelection(): Promise<void> {\n        await this.manageSplitButtonItems();\n        await super.manageSelection();\n    }\n\n    private async manageSplitButtonItems(): Promise<void> {\n        if (!this.menuItems.length) {\n            await this.optionsMenu.updateComplete;\n            if (!this.menuItems.length) {\n                return;\n            }\n        }\n\n        if (this.type === 'more') {\n            this.menuItems[0].hidden = true;\n            this.menuItems.forEach((el) => (el.selected = false));\n            this.selectedItem = this.menuItems[0];\n        } else {\n            this.selectedItem = this.selectedItem || this.menuItems[0];\n        }\n        this.value = this.selectedItem.value;\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "SizedMixin", "property", "query", "ifDefined", "PickerBase", "chevronStyles", "styles", "chevronClass", "target", "_a", "changes", "treatment", "buttons", "el", "__decorateClass"]
}
