{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport type { ElementSize } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/split-button/sp-split-button.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport type { ButtonVariants } from '@spectrum-web-components/button';\nimport type { SplitButtonTypes } from '@spectrum-web-components/split-button/src/SplitButton.js';\n\nexport interface SplitButtonMenuOptions {\n    firstItemHandler?: (event?: Event) => void;\n    secondItemHandler?: (event?: Event) => void;\n    thirdItemHandler?: (event?: Event) => void;\n}\n\nconst menu = ({\n    firstItemHandler = function () {\n        return;\n    },\n    secondItemHandler = function () {\n        return;\n    },\n    thirdItemHandler = function () {\n        return;\n    },\n}: SplitButtonMenuOptions): TemplateResult => html`\n    <sp-menu-item @click=${firstItemHandler}>Option 1</sp-menu-item>\n    <sp-menu-item @click=${secondItemHandler}>\n        Option Really Extended\n    </sp-menu-item>\n    <sp-menu-item @click=${thirdItemHandler}>Short</sp-menu-item>\n`;\n\nexport interface Properties extends SplitButtonMenuOptions {\n    disabled?: boolean;\n    invalid?: boolean;\n    left?: boolean;\n    open?: boolean;\n    size?: ElementSize;\n    type?: SplitButtonTypes;\n    variant?: ButtonVariants;\n}\n\nexport const args = {\n    disabled: false,\n    invalid: false,\n    left: false,\n    open: false,\n    type: 'field' as SplitButtonTypes,\n    variant: 'accent' as ButtonVariants,\n};\n\nexport const argTypes = {\n    disabled: {\n        name: 'disabled',\n        type: { name: 'boolean', required: false },\n        description:\n            'Disable this control. It will not receive focus or events.',\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    invalid: {\n        name: 'invalid',\n        type: { name: 'boolean', required: false },\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    left: {\n        name: 'left',\n        type: { name: 'boolean', required: false },\n        description: 'Whether the split begins on the left.',\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    open: {\n        name: 'open',\n        type: { name: 'boolean', required: false },\n        description: 'Whether the picker menu is open.',\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    type: {\n        name: 'type',\n        type: { name: 'string', required: false },\n        description:\n            'Whether the split button shows the chosen action from the overlay menu. The `more` type maintains its original value.',\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: 'field' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: ['field', 'more'],\n        },\n    },\n    variant: {\n        name: 'variant',\n        type: { name: 'string', required: false },\n        description: 'The visual variant to apply to the button.',\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: 'cta' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: [\n                'accent',\n                'primary',\n                'secondary',\n                'negative',\n                'black',\n                'white',\n            ],\n        },\n    },\n};\n\nexport const splitbutton = (\n    properties: Properties = {}\n): TemplateResult => html`\n    <sp-split-button\n        ?left=${!!properties.left}\n        size=${properties.size || 'm'}\n        variant=${properties.variant || 'cta'}\n        type=${properties.type || 'field'}\n        ?open=${!!properties.open}\n        ?disabled=${properties.disabled}\n    >\n        ${menu(properties)}\n    </sp-split-button>\n`;\n\nconst left = true;\n\nexport const renderSplitButtonSet = (\n    properties: Properties = {}\n): TemplateResult => html`\n    ${splitbutton(properties)}\n    ${splitbutton({\n        ...properties,\n        left,\n    })}\n`;\n"],
  "mappings": ";AAYA,SAAS,YAA4B;AAGrC,OAAO;AACP,OAAO;AAUP,MAAM,OAAO,CAAC;AAAA,EACV,mBAAmB,WAAY;AAC3B;AAAA,EACJ;AAAA,EACA,oBAAoB,WAAY;AAC5B;AAAA,EACJ;AAAA,EACA,mBAAmB,WAAY;AAC3B;AAAA,EACJ;AACJ,MAA8C;AAAA,2BACnB,gBAAgB;AAAA,2BAChB,iBAAiB;AAAA;AAAA;AAAA,2BAGjB,gBAAgB;AAAA;AAapC,aAAM,OAAO;AAAA,EAChB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AACb;AAEO,aAAM,WAAW;AAAA,EACpB,UAAU;AAAA,IACN,MAAM;AAAA,IACN,MAAM,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IACzC,aACI;AAAA,IACJ,OAAO;AAAA,MACH,MAAM,EAAE,SAAS,UAAU;AAAA,MAC3B,cAAc,EAAE,SAAS,MAAM;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL,MAAM;AAAA,IACN,MAAM,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IACzC,OAAO;AAAA,MACH,MAAM,EAAE,SAAS,UAAU;AAAA,MAC3B,cAAc,EAAE,SAAS,MAAM;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,IACF,MAAM;AAAA,IACN,MAAM,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IACzC,aAAa;AAAA,IACb,OAAO;AAAA,MACH,MAAM,EAAE,SAAS,UAAU;AAAA,MAC3B,cAAc,EAAE,SAAS,MAAM;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,IACF,MAAM;AAAA,IACN,MAAM,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IACzC,aAAa;AAAA,IACb,OAAO;AAAA,MACH,MAAM,EAAE,SAAS,UAAU;AAAA,MAC3B,cAAc,EAAE,SAAS,MAAM;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,IACF,MAAM;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACxC,aACI;AAAA,IACJ,OAAO;AAAA,MACH,MAAM,EAAE,SAAS,SAAS;AAAA,MAC1B,cAAc,EAAE,SAAS,QAAQ;AAAA,IACrC;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,MAAM;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL,MAAM;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACxC,aAAa;AAAA,IACb,OAAO;AAAA,MACH,MAAM,EAAE,SAAS,SAAS;AAAA,MAC1B,cAAc,EAAE,SAAS,MAAM;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,aAAM,cAAc,CACvB,aAAyB,CAAC,MACT;AAAA;AAAA,gBAEL,CAAC,CAAC,WAAW,IAAI;AAAA,eAClB,WAAW,QAAQ,GAAG;AAAA,kBACnB,WAAW,WAAW,KAAK;AAAA,eAC9B,WAAW,QAAQ,OAAO;AAAA,gBACzB,CAAC,CAAC,WAAW,IAAI;AAAA,oBACb,WAAW,QAAQ;AAAA;AAAA,UAE7B,KAAK,UAAU,CAAC;AAAA;AAAA;AAI1B,MAAM,OAAO;AAEN,aAAM,uBAAuB,CAChC,aAAyB,CAAC,MACT;AAAA,MACf,YAAY,UAAU,CAAC;AAAA,MACvB,YAAY;AAAA,EACV,GAAG;AAAA,EACH;AACJ,CAAC,CAAC;AAAA;",
  "names": []
}
