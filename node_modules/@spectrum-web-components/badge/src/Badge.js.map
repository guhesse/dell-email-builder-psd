{
  "version": 3,
  "sources": ["Badge.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport { ObserveSlotText } from '@spectrum-web-components/shared/src/observe-slot-text.js';\nimport { ObserveSlotPresence } from '@spectrum-web-components/shared/src/observe-slot-presence.js';\nimport styles from './badge.css.js';\n\nexport const BADGE_VARIANTS = [\n    'accent',\n    'neutral',\n    'informative',\n    'positive',\n    'negative',\n    'fuchsia',\n    'indigo',\n    'magenta',\n    'purple',\n    'seafoam',\n    'yellow',\n] as const;\nexport type BadgeVariant = typeof BADGE_VARIANTS[number];\nexport const FIXED_VALUES_DEPRECATED = ['top', 'bottom', 'left', 'right'];\nexport const FIXED_VALUES = [\n    'inline-start',\n    'inline-end',\n    'block-start',\n    'block-end',\n] as const;\nexport type FixedValues =\n    | typeof FIXED_VALUES[number]\n    | typeof FIXED_VALUES_DEPRECATED[number];\n\n/**\n * @element sp-badge\n *\n * @slot - Text label of the badge\n * @slot icon - Optional icon that appears to the left of the label\n */\nexport class Badge extends SizedMixin(\n    ObserveSlotText(ObserveSlotPresence(SpectrumElement, '[slot=\"icon\"]'), ''),\n    {\n        noDefaultSize: true,\n    }\n) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ reflect: true })\n    public get fixed(): FixedValues | undefined {\n        return this._fixed;\n    }\n\n    public set fixed(fixed: FixedValues | undefined) {\n        if (fixed === this.fixed) return;\n        const oldValue = this.fixed;\n        if (window.__swc.DEBUG) {\n            if (fixed && FIXED_VALUES_DEPRECATED.includes(fixed)) {\n                window.__swc.warn(\n                    this,\n                    `The following values for \"fixed\" in <${this.localName}> have been deprecated. They will be removed in a future release.`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/badge/#fixed',\n                    {\n                        issues: [...FIXED_VALUES_DEPRECATED],\n                    }\n                );\n            }\n        }\n        this._fixed = fixed;\n        if (fixed) {\n            this.setAttribute('fixed', fixed);\n        } else {\n            this.removeAttribute('fixed');\n        }\n        this.requestUpdate('fixed', oldValue);\n    }\n\n    private _fixed?: FixedValues;\n\n    @property({ type: String, reflect: true })\n    public variant: BadgeVariant = 'informative';\n\n    protected get hasIcon(): boolean {\n        return this.slotContentIsPresent;\n    }\n\n    protected override render(): TemplateResult {\n        if (window.__swc.DEBUG) {\n            if (!BADGE_VARIANTS.includes(this.variant)) {\n                window.__swc.warn(\n                    this,\n                    `<${this.localName}> element expect the \"variant\" attribute to be one of the following:`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/badge/#variants',\n                    {\n                        issues: [...BADGE_VARIANTS],\n                    }\n                );\n            }\n        }\n        return html`\n            ${this.hasIcon\n                ? html`\n                      <slot\n                          name=\"icon\"\n                          ?icon-only=${!this.slotHasContent}\n                      ></slot>\n                  `\n                : nothing}\n            <div class=\"label\">\n                <slot></slot>\n            </div>\n        `;\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EACA,WAAAC,EACA,cAAAC,EACA,mBAAAC,MAEG,gCACP,OAAS,YAAAC,MAAgB,kDAEzB,OAAS,mBAAAC,MAAuB,2DAChC,OAAS,uBAAAC,MAA2B,+DACpC,OAAOC,MAAY,iBAEZ,aAAM,eAAiB,CAC1B,SACA,UACA,cACA,WACA,WACA,UACA,SACA,UACA,SACA,UACA,QACJ,EAEa,wBAA0B,CAAC,MAAO,SAAU,OAAQ,OAAO,EAC3D,aAAe,CACxB,eACA,aACA,cACA,WACJ,EAWO,aAAM,cAAcL,EACvBG,EAAgBC,EAAoBH,EAAiB,eAAe,EAAG,EAAE,EACzE,CACI,cAAe,EACnB,CACJ,CAAE,CALK,kCA0CH,KAAO,QAAwB,cApC/B,WAA2B,QAAyB,CAChD,MAAO,CAACI,CAAM,CAClB,CAGA,IAAW,OAAiC,CACxC,OAAO,KAAK,MAChB,CAEA,IAAW,MAAMC,EAAgC,CAC7C,GAAIA,IAAU,KAAK,MAAO,OAC1B,MAAMC,EAAW,KAAK,MAatB,KAAK,OAASD,EACVA,EACA,KAAK,aAAa,QAASA,CAAK,EAEhC,KAAK,gBAAgB,OAAO,EAEhC,KAAK,cAAc,QAASC,CAAQ,CACxC,CAOA,IAAc,SAAmB,CAC7B,OAAO,KAAK,oBAChB,CAEmB,QAAyB,CAaxC,OAAOT;AAAA,cACD,KAAK,QACDA;AAAA;AAAA;AAAA,uCAGqB,CAAC,KAAK,cAAc;AAAA;AAAA,oBAGzCC,CAAO;AAAA;AAAA;AAAA;AAAA,SAKrB,CACJ,CAhEeS,EAAA,CADVN,EAAS,CAAE,QAAS,EAAK,CAAC,GAVlB,MAWE,qBA+BJM,EAAA,CADNN,EAAS,CAAE,KAAM,OAAQ,QAAS,EAAK,CAAC,GAzChC,MA0CF",
  "names": ["html", "nothing", "SizedMixin", "SpectrumElement", "property", "ObserveSlotText", "ObserveSlotPresence", "styles", "fixed", "oldValue", "__decorateClass"]
}
