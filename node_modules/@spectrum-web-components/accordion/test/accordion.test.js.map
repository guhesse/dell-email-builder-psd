{
  "version": 3,
  "sources": ["accordion.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\n\nimport '@spectrum-web-components/accordion/sp-accordion.js';\nimport { Default } from '../stories/accordion.stories.js';\nimport { Accordion, AccordionItem } from '@spectrum-web-components/accordion';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { spy } from 'sinon';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('Accordion', () => {\n    testForLitDevWarnings(async () => await fixture<Accordion>(Default()));\n    it('renders with items accessibly', async () => {\n        const el = await fixture<Accordion>(Default());\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('does not accept focus when empty', async () => {\n        const el = await fixture<Accordion>(\n            html`\n                <sp-accordion></sp-accordion>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(document.activeElement === el).to.be.false;\n\n        el.focus();\n        await elementUpdated(el);\n\n        expect(document.activeElement === el).to.be.false;\n    });\n    it('does not accept keyboard events when items are not present', async () => {\n        const errorSpy = spy();\n        const el = await fixture<Accordion>(\n            html`\n                <sp-accordion>\n                    <sp-accordion-item disabled label=\"Heading 2\">\n                        <div>Item 2</div>\n                    </sp-accordion-item>\n                </sp-accordion>\n            `\n        );\n\n        await elementUpdated(el);\n        const item = el.querySelector('sp-accordion-item') as AccordionItem;\n        window.addEventListener('error', () => errorSpy());\n\n        el.focus();\n        item.remove();\n        await elementUpdated(el);\n        el.dispatchEvent(\n            new KeyboardEvent('keydown', {\n                code: 'ArrowDown',\n            })\n        );\n\n        expect(errorSpy.callCount).to.equal(0);\n    });\n    it('does not accept focus when all children [disabled]', async () => {\n        const el = await fixture<Accordion>(\n            html`\n                <sp-accordion>\n                    <sp-accordion-item disabled label=\"Heading 1\">\n                        <div>Item 1</div>\n                    </sp-accordion-item>\n                    <sp-accordion-item disabled label=\"Heading 2\">\n                        <div>Item 2</div>\n                    </sp-accordion-item>\n                </sp-accordion>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(document.activeElement === el).to.be.false;\n\n        el.focus();\n        await elementUpdated(el);\n\n        expect(document.activeElement === el).to.be.false;\n    });\n    it('only allows one open item by default', async () => {\n        const el = await fixture<Accordion>(Default());\n        await elementUpdated(el);\n        const firstItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(1)'\n        ) as AccordionItem;\n        const secondItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(2)'\n        ) as AccordionItem;\n\n        const firstButton = firstItem.focusElement;\n        const secondButton = secondItem.focusElement;\n\n        firstButton.click();\n        await elementUpdated(el);\n        let openItems = el.querySelectorAll('sp-accordion-item[open]');\n        expect(openItems.length).to.equal(1);\n\n        secondButton.click();\n        await elementUpdated(el);\n        openItems = el.querySelectorAll('sp-accordion-item[open]');\n        expect(openItems.length).to.equal(1);\n    });\n    it('can have `toggle` events canceled', async () => {\n        const el = await fixture<Accordion>(Default());\n        await elementUpdated(el);\n        const firstItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(1)'\n        ) as AccordionItem;\n        const secondItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(2)'\n        ) as AccordionItem;\n\n        const firstButton = firstItem.focusElement;\n        const secondButton = secondItem.focusElement;\n\n        firstButton.click();\n        await elementUpdated(el);\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.false;\n\n        el.addEventListener('sp-accordion-item-toggle', (event: Event) =>\n            event.preventDefault()\n        );\n\n        secondButton.click();\n        await elementUpdated(el);\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.false;\n    });\n    it('allows more than one open item when `[allow-multiple]`', async () => {\n        const el = await fixture<Accordion>(Default());\n        el.allowMultiple = true;\n        await elementUpdated(el);\n\n        const firstItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(1)'\n        ) as AccordionItem;\n        const secondItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(2)'\n        ) as AccordionItem;\n\n        const firstButton = firstItem.focusElement;\n        const secondButton = secondItem.focusElement;\n\n        firstButton.click();\n        await elementUpdated(el);\n\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.false;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.true;\n    });\n    it('ensures that the correct item is open and that items can be closed', async () => {\n        const el = await fixture<Accordion>(Default());\n\n        await elementUpdated(el);\n        const firstItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(1)'\n        ) as AccordionItem;\n        const secondItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(2)'\n        ) as AccordionItem;\n\n        const firstButton = firstItem.focusElement;\n        const secondButton = secondItem.focusElement;\n\n        firstButton.click();\n        await elementUpdated(el);\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.false;\n\n        secondButton.click();\n        await elementUpdated(el);\n        expect(firstItem.open).to.be.false;\n        expect(secondItem.open).to.be.true;\n\n        secondButton.click();\n        await elementUpdated(el);\n        expect(firstItem.open).to.be.false;\n        expect(secondItem.open).to.be.false;\n    });\n\n    it('ensures that the correct item is open and that items can be closed when [allow-multiple]', async () => {\n        const el = await fixture<Accordion>(Default());\n        el.allowMultiple = true;\n        await elementUpdated(el);\n\n        const firstItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(1)'\n        ) as AccordionItem;\n        const secondItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(2)'\n        ) as AccordionItem;\n\n        const firstButton = firstItem.focusElement;\n        const secondButton = secondItem.focusElement;\n\n        firstButton.click();\n        await elementUpdated(el);\n\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.false;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.true;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(firstItem.open).to.be.true;\n        expect(secondItem.open).to.be.false;\n    });\n    it('handles focus and keyboard input and ignores disabled items', async () => {\n        const el = await fixture<Accordion>(\n            html`\n                <sp-accordion allow-multiple>\n                    <sp-accordion-item disabled label=\"Heading 1\">\n                        <div>Item 1</div>\n                    </sp-accordion-item>\n                    <sp-accordion-item label=\"Heading 2\">\n                        <div>Item 2</div>\n                    </sp-accordion-item>\n                    <sp-accordion-item label=\"Heading 3\">\n                        <div>Item 3</div>\n                    </sp-accordion-item>\n                    <sp-accordion-item label=\"Heading 4\">\n                        <div>Item 4</div>\n                    </sp-accordion-item>\n                    <sp-accordion-item label=\"Heading 5\">\n                        <div>Item 5</div>\n                    </sp-accordion-item>\n                    <sp-accordion-item disabled label=\"Heading 6\">\n                        <div>Item 6</div>\n                    </sp-accordion-item>\n                </sp-accordion>\n            `\n        );\n\n        await elementUpdated(el);\n\n        const secondItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(2)'\n        ) as AccordionItem;\n        const thirdItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(3)'\n        ) as AccordionItem;\n        const fourthItem = el.querySelector(\n            'sp-accordion-item:nth-of-type(4)'\n        ) as AccordionItem;\n        const isSafari = /^((?!chrome|android).)*safari/i.test(\n            navigator.userAgent\n        );\n        const tab = isSafari ? 'Alt+Tab' : 'Tab';\n        const shiftTab = isSafari ? 'Alt+Shift+Tab' : 'Shift+Tab';\n\n        el.focus();\n\n        await elementUpdated(el);\n        expect(document.activeElement === secondItem).to.be.true;\n\n        await sendKeys({\n            press: tab,\n        });\n\n        expect(document.activeElement === thirdItem).to.be.true;\n\n        await sendKeys({\n            press: tab,\n        });\n\n        expect(document.activeElement === fourthItem).to.be.true;\n\n        await sendKeys({\n            press: shiftTab,\n        });\n        await sendKeys({\n            press: shiftTab,\n        });\n\n        expect(document.activeElement === secondItem).to.be.true;\n\n        document.body.focus();\n\n        el.focus();\n        expect(document.activeElement === secondItem).to.be.true;\n\n        await sendKeys({\n            press: shiftTab,\n        });\n        await elementUpdated(el);\n\n        const outsideFocused = document.activeElement as HTMLElement;\n\n        expect(typeof outsideFocused).not.to.equal(AccordionItem);\n        expect(typeof outsideFocused).not.to.equal(Accordion);\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
