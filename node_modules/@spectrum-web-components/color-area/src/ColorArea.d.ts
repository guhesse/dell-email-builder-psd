import { CSSResultArray, PropertyValues, SpectrumElement, TemplateResult } from '@spectrum-web-components/base';
import '@spectrum-web-components/color-handle/sp-color-handle.js';
import { ColorValue } from '@spectrum-web-components/reactive-controllers/src/Color.js';
/**
 * @element sp-color-area
 * @slot gradient - a custom gradient visually outlining the available color values
 * @fires input - The value of the Color Area has changed.
 * @fires change - An alteration to the value of the Color Area has been committed by the user.
 */
export declare class ColorArea extends SpectrumElement {
    static get styles(): CSSResultArray;
    dir: 'ltr' | 'rtl';
    disabled: boolean;
    focused: boolean;
    label: string | undefined;
    labelX: string;
    labelY: string;
    private handle;
    private languageResolver;
    private colorController;
    get hue(): number;
    set hue(value: number);
    get value(): ColorValue;
    get color(): ColorValue;
    set color(color: ColorValue);
    private activeAxis;
    get x(): number;
    set x(x: number);
    private _x;
    get y(): number;
    set y(y: number);
    private _y;
    step: number;
    inputX: HTMLInputElement;
    inputY: HTMLInputElement;
    private altered;
    private activeKeys;
    private _valueChanged;
    focus(focusOptions?: FocusOptions): void;
    private forwardFocus;
    private handleFocus;
    private handleBlur;
    private handleKeydown;
    private handleKeypress;
    private handleKeyup;
    private handleInput;
    private handleChange;
    private boundingClientRect;
    private _pointerDown;
    private handlePointerdown;
    private handlePointermove;
    private handlePointerup;
    /**
     * Returns the value under the cursor
     * @param: PointerEvent on slider
     * @return: Slider value that correlates to the position under the pointer
     */
    private calculateHandlePosition;
    private handleAreaPointerdown;
    protected render(): TemplateResult;
    protected firstUpdated(changed: PropertyValues): void;
    protected updated(changed: PropertyValues): void;
    private observer?;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
