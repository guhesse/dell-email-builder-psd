{
  "version": 3,
  "sources": ["ColorArea.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { streamingListener } from '@spectrum-web-components/base/src/streaming-listener.js';\nimport { SWCResizeObserverEntry, WithSWCResizeObserver } from './types';\nimport type { ColorHandle } from '@spectrum-web-components/color-handle';\nimport '@spectrum-web-components/color-handle/sp-color-handle.js';\nimport {\n    ColorController,\n    ColorValue,\n} from '@spectrum-web-components/reactive-controllers/src/Color.js';\nimport { LanguageResolutionController } from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\nimport {\n    isAndroid,\n    isIOS,\n} from '@spectrum-web-components/shared/src/platform.js';\n\nimport styles from './color-area.css.js';\n\n/**\n * @element sp-color-area\n * @slot gradient - a custom gradient visually outlining the available color values\n * @fires input - The value of the Color Area has changed.\n * @fires change - An alteration to the value of the Color Area has been committed by the user.\n */\nexport class ColorArea extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ type: String, reflect: true })\n    public override dir!: 'ltr' | 'rtl';\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: Boolean, reflect: true })\n    public focused = false;\n\n    @property({ type: String })\n    public label: string | undefined;\n\n    @property({ type: String, attribute: 'label-x' })\n    public labelX = 'saturation';\n\n    @property({ type: String, attribute: 'label-y' })\n    public labelY = 'luminosity';\n\n    @query('.handle')\n    private handle!: ColorHandle;\n\n    private languageResolver = new LanguageResolutionController(this);\n\n    private colorController = new ColorController(this, {\n        extractColorFromState: () => ({\n            h: this.hue,\n            s: this.x,\n            v: this.y,\n        }),\n        applyColorToState: ({ s, v }) => {\n            this.x = s;\n            this.y = v;\n        },\n    });\n\n    @property({ type: Number })\n    public get hue(): number {\n        return this.colorController.hue;\n    }\n\n    public set hue(value: number) {\n        this.colorController.hue = value;\n    }\n\n    @property({ type: String })\n    public get value(): ColorValue {\n        return this.colorController.color;\n    }\n\n    @property({ type: String })\n    public get color(): ColorValue {\n        return this.colorController.color;\n    }\n\n    public set color(color: ColorValue) {\n        this.colorController.color = color;\n    }\n\n    @property({ attribute: false })\n    private activeAxis = 'x';\n\n    @property({ type: Number })\n    public get x(): number {\n        return this._x;\n    }\n\n    public set x(x: number) {\n        if (x === this.x) {\n            return;\n        }\n        const oldValue = this.x;\n        if (this.inputX) {\n            // Use the native `input[type='range']` control to validate this value after `firstUpdate`\n            this.inputX.value = x.toString();\n            this._x = this.inputX.valueAsNumber;\n        } else {\n            this._x = x;\n        }\n        this.requestUpdate('x', oldValue);\n    }\n\n    private _x = 1;\n\n    @property({ type: Number })\n    public get y(): number {\n        return this._y;\n    }\n\n    public set y(y: number) {\n        if (y === this.y) {\n            return;\n        }\n        const oldValue = this.y;\n        if (this.inputY) {\n            // Use the native `input[type='range']` control to validate this value after `firstUpdate`\n            this.inputY.value = y.toString();\n            this._y = this.inputY.valueAsNumber;\n        } else {\n            this._y = y;\n        }\n        this.requestUpdate('y', oldValue);\n    }\n\n    private _y = 1;\n\n    @property({ type: Number })\n    public step = 0.01;\n\n    @query('[name=\"x\"]')\n    public inputX!: HTMLInputElement;\n\n    @query('[name=\"y\"]')\n    public inputY!: HTMLInputElement;\n\n    private altered = 0;\n\n    private activeKeys = new Set();\n\n    private _valueChanged = false;\n\n    public override focus(focusOptions: FocusOptions = {}): void {\n        super.focus(focusOptions);\n        this.forwardFocus();\n    }\n\n    private forwardFocus(): void {\n        this.focused = this.hasVisibleFocusInTree();\n        if (this.activeAxis === 'x') {\n            this.inputX.focus();\n        } else {\n            this.inputY.focus();\n        }\n    }\n\n    private handleFocus(): void {\n        this.focused = true;\n        this._valueChanged = false;\n    }\n\n    private handleBlur(): void {\n        if (this._pointerDown) {\n            return;\n        }\n        this.altered = 0;\n        this.focused = false;\n        this._valueChanged = false;\n    }\n\n    private handleKeydown(event: KeyboardEvent): void {\n        const { code } = event;\n        this.focused = true;\n        this.altered = [event.shiftKey, event.ctrlKey, event.altKey].filter(\n            (key) => !!key\n        ).length;\n        const isArrowKey =\n            code.search('Arrow') === 0 ||\n            code.search('Page') === 0 ||\n            code.search('Home') === 0 ||\n            code.search('End') === 0;\n        if (isArrowKey) {\n            event.preventDefault();\n            this.activeKeys.add(code);\n            this.handleKeypress();\n        }\n    }\n\n    private handleKeypress(): void {\n        let deltaX = 0;\n        let deltaY = 0;\n        const step = Math.max(this.step, this.altered * 5 * this.step);\n        this.activeKeys.forEach((code) => {\n            switch (code) {\n                case 'ArrowUp':\n                    deltaY = step;\n                    break;\n                case 'ArrowDown':\n                    deltaY = step * -1;\n                    break;\n                case 'ArrowLeft':\n                    deltaX = this.step * (this.isLTR ? -1 : 1);\n                    break;\n                case 'ArrowRight':\n                    deltaX = this.step * (this.isLTR ? 1 : -1);\n                    break;\n                case 'PageUp':\n                    deltaY = step * 10;\n                    break;\n                case 'PageDown':\n                    deltaY = step * -10;\n                    break;\n                case 'Home':\n                    deltaX = step * (this.isLTR ? -10 : 10);\n                    break;\n                case 'End':\n                    deltaX = step * (this.isLTR ? 10 : -10);\n                    break;\n                /* c8 ignore next 2 */\n                default:\n                    break;\n            }\n        });\n        if (deltaX != 0) {\n            this.activeAxis = 'x';\n            this.inputX.focus();\n        } else if (deltaY != 0) {\n            this.activeAxis = 'y';\n            this.inputY.focus();\n        }\n        this.x = Math.min(1, Math.max(this.x + deltaX, 0));\n        this.y = Math.min(1, Math.max(this.y + deltaY, 0));\n\n        this.colorController.savePreviousColor();\n        this.colorController.applyColorFromState();\n\n        if (deltaX != 0 || deltaY != 0) {\n            this._valueChanged = true;\n            this.dispatchEvent(\n                new Event('input', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            const applyDefault = this.dispatchEvent(\n                new Event('change', {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true,\n                })\n            );\n            if (!applyDefault) {\n                this.colorController.restorePreviousColor();\n            }\n        }\n    }\n\n    private handleKeyup(event: KeyboardEvent): void {\n        event.preventDefault();\n        const { code } = event;\n        this.activeKeys.delete(code);\n    }\n\n    private handleInput(event: Event & { target: HTMLInputElement }): void {\n        const { valueAsNumber, name } = event.target;\n\n        this[name as 'x' | 'y'] = valueAsNumber;\n        this.colorController.applyColorFromState();\n    }\n\n    private handleChange(event: Event & { target: HTMLInputElement }): void {\n        this.handleInput(event);\n        this.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n    }\n\n    private boundingClientRect!: DOMRect;\n    private _pointerDown = false;\n\n    private handlePointerdown(event: PointerEvent): void {\n        if (event.button !== 0) {\n            event.preventDefault();\n            return;\n        }\n        this._pointerDown = true;\n        this.colorController.savePreviousColor();\n        this.boundingClientRect = this.getBoundingClientRect();\n        (event.target as HTMLElement).setPointerCapture(event.pointerId);\n        if (event.pointerType === 'mouse') {\n            this.focused = true;\n        }\n    }\n\n    private handlePointermove(event: PointerEvent): void {\n        const [x, y] = this.calculateHandlePosition(event);\n\n        this._valueChanged = false;\n\n        this.x = x;\n        this.y = 1 - y;\n        this.colorController.applyColorFromState();\n        this.dispatchEvent(\n            new Event('input', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n    }\n\n    private handlePointerup(event: PointerEvent): void {\n        event.preventDefault();\n        this._pointerDown = false;\n        (event.target as HTMLElement).releasePointerCapture(event.pointerId);\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n        this.inputX.focus();\n        if (event.pointerType === 'mouse') {\n            this.focused = false;\n        }\n        if (!applyDefault) {\n            this.colorController.restorePreviousColor();\n        }\n    }\n\n    /**\n     * Returns the value under the cursor\n     * @param: PointerEvent on slider\n     * @return: Slider value that correlates to the position under the pointer\n     */\n    private calculateHandlePosition(event: PointerEvent): [number, number] {\n        /* c8 ignore next 3 */\n        if (!this.boundingClientRect) {\n            return [this.x, this.y];\n        }\n        const rect = this.boundingClientRect;\n        const minOffsetX = rect.left;\n        const minOffsetY = rect.top;\n        const offsetX = event.clientX;\n        const offsetY = event.clientY;\n        const width = rect.width;\n        const height = rect.height;\n\n        const percentX = Math.max(\n            0,\n            Math.min(1, (offsetX - minOffsetX) / width)\n        );\n        const percentY = Math.max(\n            0,\n            Math.min(1, (offsetY - minOffsetY) / height)\n        );\n\n        return [this.isLTR ? percentX : 1 - percentX, percentY];\n    }\n\n    private handleAreaPointerdown(event: PointerEvent): void {\n        if (event.button !== 0) {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        this.handle.dispatchEvent(new PointerEvent('pointerdown', event));\n        this.handlePointermove(event);\n    }\n\n    protected override render(): TemplateResult {\n        const { width = 0, height = 0 } = this.boundingClientRect || {};\n\n        if (window.__swc.DEBUG) {\n            if (this.label) {\n                window.__swc.warn(\n                    this,\n                    `The \"label\" property in <${this.localName}> has been deprecated and will be removed in a future release. Please leverage \"labelX\" and \"labelY\" instead.`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/color-area/#labels',\n                    { level: 'deprecation' }\n                );\n            }\n        }\n\n        const isMobile = isAndroid() || isIOS();\n        const defaultAriaLabel = 'Color Picker';\n        const ariaLabel = this.label\n            ? `${this.label} ${defaultAriaLabel}`\n            : defaultAriaLabel;\n        const ariaRoleDescription = ifDefined(\n            isMobile ? undefined : '2d slider'\n        );\n\n        const ariaLabelX = this.labelX;\n        const ariaLabelY = this.labelY;\n        const ariaValueX = new Intl.NumberFormat(\n            this.languageResolver.language,\n            {\n                style: 'percent',\n                unitDisplay: 'narrow',\n            }\n        ).format(this.x);\n        const ariaValueY = new Intl.NumberFormat(\n            this.languageResolver.language,\n            {\n                style: 'percent',\n                unitDisplay: 'narrow',\n            }\n        ).format(this.y);\n\n        return html`\n            <div\n                @pointerdown=${this.handleAreaPointerdown}\n                class=\"gradient\"\n                style=\"background:\n                    linear-gradient(to top, black 0%, hsla(${this\n                    .hue}, 100%, 0.01%, 0) 100%),\n                    linear-gradient(to right, white 0%, hsla(${this\n                    .hue}, 100%, 0.01%, 0) 100%), hsl(${this.hue}, 100%, 50%);\"\n            >\n                <slot name=\"gradient\"></slot>\n            </div>\n\n            <sp-color-handle\n                tabindex=${ifDefined(this.focused ? undefined : '0')}\n                @focus=${this.forwardFocus}\n                ?focused=${this.focused}\n                class=\"handle\"\n                color=${this.colorController.getHslString()}\n                ?disabled=${this.disabled}\n                style=${`transform: translate(${\n                    (this.isLTR ? this.x : 1 - this.x) * width\n                }px, ${height - this.y * height}px);`}\n                ${streamingListener({\n                    start: ['pointerdown', this.handlePointerdown],\n                    streamInside: ['pointermove', this.handlePointermove],\n                    end: [\n                        ['pointerup', 'pointercancel', 'pointerleave'],\n                        this.handlePointerup,\n                    ],\n                })}\n            ></sp-color-handle>\n\n            <fieldset\n                class=\"fieldset\"\n                aria-label=${ifDefined(isMobile ? ariaLabel : undefined)}\n            >\n                <div role=\"presentation\">\n                    <input\n                        type=\"range\"\n                        class=\"slider\"\n                        name=\"x\"\n                        aria-label=${isMobile ? ariaLabelX : ariaLabel}\n                        aria-roledescription=${ariaRoleDescription}\n                        aria-orientation=\"horizontal\"\n                        aria-valuetext=${isMobile\n                            ? ariaValueX\n                            : `${ariaValueX}, ${ariaLabelX}${\n                                  this._valueChanged\n                                      ? ''\n                                      : `, ${ariaValueY}, ${ariaLabelY}`\n                              }`}\n                        min=\"0\"\n                        max=\"1\"\n                        step=${this.step}\n                        tabindex=\"-1\"\n                        .value=${String(this.x)}\n                        @input=${this.handleInput}\n                        @change=${this.handleChange}\n                    />\n                </div>\n                <div role=\"presentation\">\n                    <input\n                        type=\"range\"\n                        class=\"slider\"\n                        name=\"y\"\n                        aria-label=${isMobile ? ariaLabelY : ariaLabel}\n                        aria-roledescription=${ariaRoleDescription}\n                        aria-orientation=\"vertical\"\n                        aria-valuetext=${isMobile\n                            ? ariaValueY\n                            : `${ariaValueY}, ${ariaLabelY}${\n                                  this._valueChanged\n                                      ? ''\n                                      : `, ${ariaValueX}, ${ariaLabelX}`\n                              }`}\n                        orient=\"vertical\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=${this.step}\n                        tabindex=\"-1\"\n                        .value=${String(this.y)}\n                        @input=${this.handleInput}\n                        @change=${this.handleChange}\n                    />\n                </div>\n            </fieldset>\n        `;\n    }\n\n    protected override firstUpdated(changed: PropertyValues): void {\n        super.firstUpdated(changed);\n        this.boundingClientRect = this.getBoundingClientRect();\n\n        this.addEventListener('focus', this.handleFocus);\n        this.addEventListener('blur', this.handleBlur);\n        this.addEventListener('keyup', this.handleKeyup);\n        this.addEventListener('keydown', this.handleKeydown);\n    }\n\n    protected override updated(changed: PropertyValues): void {\n        super.updated(changed);\n        if (this.x !== this.inputX.valueAsNumber) {\n            this._x = this.inputX.valueAsNumber;\n        }\n        if (this.y !== this.inputY.valueAsNumber) {\n            this._y = this.inputY.valueAsNumber;\n        }\n        if (changed.has('focused') && this.focused) {\n            // Lazily bind the `input[type=\"range\"]` elements in shadow roots\n            // so that browsers with certain settings (Webkit) aren't allowed\n            // multiple tab stops within the Color Area.\n            const parentX = this.inputX.parentElement as HTMLDivElement;\n            const parentY = this.inputY.parentElement as HTMLDivElement;\n            if (!parentX.shadowRoot && !parentY.shadowRoot) {\n                parentX.attachShadow({ mode: 'open' });\n                parentY.attachShadow({ mode: 'open' });\n                const slot = '<div tabindex=\"-1\"><slot></slot></div>';\n                (parentX.shadowRoot as unknown as ShadowRoot).innerHTML = slot;\n                (parentY.shadowRoot as unknown as ShadowRoot).innerHTML = slot;\n            }\n        }\n    }\n\n    private observer?: WithSWCResizeObserver['ResizeObserver'];\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        if (\n            !this.observer &&\n            (window as unknown as WithSWCResizeObserver).ResizeObserver\n        ) {\n            this.observer = new (\n                window as unknown as WithSWCResizeObserver\n            ).ResizeObserver((entries: SWCResizeObserverEntry[]) => {\n                for (const entry of entries) {\n                    this.boundingClientRect = entry.contentRect;\n                }\n                this.requestUpdate();\n            });\n        }\n        this.observer?.observe(this);\n    }\n\n    public override disconnectedCallback(): void {\n        this.observer?.unobserve(this);\n        super.disconnectedCallback();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
