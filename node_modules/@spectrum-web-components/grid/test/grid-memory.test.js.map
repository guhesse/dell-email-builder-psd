{
  "version": 3,
  "sources": ["grid-memory.test.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { expect, fixture, nextFrame } from '@open-wc/testing';\nimport { html, render } from '@spectrum-web-components/base';\nimport { Default } from '../stories/grid.stories';\n\nasync function usedHeapMB(): Promise<number> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const memorySample = performance.measureUserAgentSpecificMemory();\n    return (await memorySample).bytes / (1024 * 1024);\n}\n\ndescribe('Grid memory usage', () => {\n    it('releases references on disconnect', async function () {\n        if (!window.gc || !('measureUserAgentSpecificMemory' in performance))\n            this.skip();\n\n        this.timeout(10000);\n\n        const iterations = 50;\n        let active = false;\n\n        const el = await fixture<HTMLElement>(\n            html`\n                <div></div>\n            `\n        );\n\n        async function toggle(\n            forced: boolean | undefined = undefined\n        ): Promise<void> {\n            active = forced != null ? forced : !active;\n            render(active ? Default() : html``, el);\n            await nextFrame();\n            await nextFrame();\n        }\n\n        // \"shake things out\" to get a good first reading\n        for (let i = 0; i < 5; i++) {\n            await toggle();\n        }\n        await toggle(false);\n        const beforeMB = await usedHeapMB();\n\n        for (let i = 0; i < iterations; i++) {\n            await toggle();\n        }\n        await toggle(false);\n        const afterMB = await usedHeapMB();\n\n        /**\n         * An actually leak here shapes up to be more than 10MB per test,\n         * we could be more linient later, if needed, but the test currently\n         * shows less heap after the test cycle.\n         */\n        expect(\n            afterMB - beforeMB,\n            `before: ${beforeMB}, after: ${afterMB}`\n        ).to.be.lt(0);\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,QAAQ,SAAS,iBAAiB;AAC3C,SAAS,MAAM,cAAc;AAC7B,SAAS,eAAe;AAExB,eAAe,aAA8B;AAGzC,QAAM,eAAe,YAAY,+BAA+B;AAChE,UAAQ,MAAM,cAAc,SAAS,OAAO;AAChD;AAEA,SAAS,qBAAqB,MAAM;AAChC,KAAG,qCAAqC,iBAAkB;AACtD,QAAI,CAAC,OAAO,MAAM,EAAE,oCAAoC;AACpD,WAAK,KAAK;AAEd,SAAK,QAAQ,GAAK;AAElB,UAAM,aAAa;AACnB,QAAI,SAAS;AAEb,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA,IAGJ;AAEA,mBAAe,OACX,SAA8B,QACjB;AACb,eAAS,UAAU,OAAO,SAAS,CAAC;AACpC,aAAO,SAAS,QAAQ,IAAI,QAAQ,EAAE;AACtC,YAAM,UAAU;AAChB,YAAM,UAAU;AAAA,IACpB;AAGA,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,OAAO;AAAA,IACjB;AACA,UAAM,OAAO,KAAK;AAClB,UAAM,WAAW,MAAM,WAAW;AAElC,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YAAM,OAAO;AAAA,IACjB;AACA,UAAM,OAAO,KAAK;AAClB,UAAM,UAAU,MAAM,WAAW;AAOjC;AAAA,MACI,UAAU;AAAA,MACV,WAAW,QAAQ,YAAY,OAAO;AAAA,IAC1C,EAAE,GAAG,GAAG,GAAG,CAAC;AAAA,EAChB,CAAC;AACL,CAAC;",
  "names": []
}
