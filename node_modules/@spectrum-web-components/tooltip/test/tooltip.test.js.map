{
  "version": 3,
  "sources": ["tooltip.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport { Tooltip } from '@spectrum-web-components/tooltip';\nimport { OverlayDisplayQueryDetail } from '@spectrum-web-components/overlay';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    oneEvent,\n} from '@open-wc/testing';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('Tooltip', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Tooltip>(\n                html`\n                    <sp-tooltip>Help text.</sp-tooltip>\n                `\n            )\n    );\n    it('loads', async () => {\n        const el = await fixture<Tooltip>(\n            html`\n                <sp-tooltip>Help text.</sp-tooltip>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('self manages', async () => {\n        const button = await fixture<Button>(\n            html`\n                <sp-button>\n                    This is a button.\n                    <sp-tooltip self-managed>Help text.</sp-tooltip>\n                </sp-button>\n            `\n        );\n\n        const el = button.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n        await expect(button).to.be.accessible();\n\n        const opened = oneEvent(button, 'sp-opened');\n        button.focus();\n        await opened;\n        await elementUpdated(el);\n\n        expect(el.open).to.be.true;\n        await expect(button).to.be.accessible();\n\n        const closed = oneEvent(button, 'sp-closed');\n        button.blur();\n        await closed;\n        await elementUpdated(el);\n\n        expect(el.open).to.be.false;\n    });\n    it('allows pointer to enter the \"tooltip\" without closing the \"tooltip\"', async () => {\n        const button = await fixture<Button>(\n            html`\n                <sp-button>\n                    This is a button.\n                    <sp-tooltip self-managed placement=\"bottom\">\n                        Help text.\n                    </sp-tooltip>\n                </sp-button>\n            `\n        );\n\n        const el = button.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n        await expect(button).to.be.accessible();\n        let opened = oneEvent(button, 'sp-opened');\n        button.dispatchEvent(new PointerEvent('pointerenter'));\n        button.dispatchEvent(\n            new PointerEvent('pointerleave', {\n                relatedTarget: el,\n            })\n        );\n        el.dispatchEvent(\n            new PointerEvent('pointerleave', {\n                relatedTarget: button,\n            })\n        );\n        await opened;\n        await elementUpdated(el);\n\n        expect(el.open).to.be.true;\n        await expect(button).to.be.accessible();\n\n        let closed = oneEvent(button, 'sp-closed');\n        button.dispatchEvent(new PointerEvent('pointerleave'));\n        await closed;\n        await elementUpdated(el);\n\n        expect(el.open).to.be.false;\n\n        opened = oneEvent(button, 'sp-opened');\n        button.dispatchEvent(new PointerEvent('pointerenter'));\n        button.dispatchEvent(\n            new PointerEvent('pointerleave', {\n                relatedTarget: el,\n            })\n        );\n        await opened;\n        await elementUpdated(el);\n\n        closed = oneEvent(button, 'sp-closed');\n        el.dispatchEvent(new PointerEvent('pointerleave'));\n        await closed;\n        await elementUpdated(el);\n    });\n    it('cleans up when self manages', async () => {\n        const button = await fixture<Button>(\n            html`\n                <sp-button>\n                    This is a button.\n                    <sp-tooltip self-managed>Help text.</sp-tooltip>\n                </sp-button>\n            `\n        );\n\n        const el = button.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n\n        const opened = oneEvent(button, 'sp-opened');\n        button.focus();\n        await opened;\n        await elementUpdated(el);\n\n        expect(el.open).to.be.true;\n        let activeOverlay = document.querySelector('active-overlay');\n        expect(activeOverlay).to.not.be.null;\n\n        const closed = oneEvent(button, 'sp-closed');\n        button.remove();\n        await closed;\n\n        activeOverlay = document.querySelector('active-overlay');\n        expect(activeOverlay).to.be.null;\n    });\n    it('accepts variants', async () => {\n        const el = await fixture<Tooltip>(\n            html`\n                <sp-tooltip variant=\"negative\">Help text.</sp-tooltip>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('negative');\n        expect(el.getAttribute('variant')).to.equal('negative');\n\n        el.variant = 'info';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('info');\n        expect(el.getAttribute('variant')).to.equal('info');\n\n        el.setAttribute('variant', 'positive');\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('positive');\n        expect(el.getAttribute('variant')).to.equal('positive');\n\n        el.removeAttribute('variant');\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('');\n        expect(el.hasAttribute('variant')).to.be.false;\n    });\n    it('validates variants', async () => {\n        const el = await fixture<Tooltip>(\n            html`\n                <sp-tooltip variant=\"other\">Help text.</sp-tooltip>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('');\n        expect(el.hasAttribute('variant')).to.be.false;\n\n        el.variant = 'info';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('info');\n        expect(el.getAttribute('variant')).to.equal('info');\n\n        el.variant = 'info';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('info');\n        expect(el.getAttribute('variant')).to.equal('info');\n    });\n\n    it('answers tip query', async () => {\n        const el = await fixture<Tooltip>(\n            html`\n                <sp-tooltip placement=\"top\">Help text.</sp-tooltip>\n            `\n        );\n\n        await elementUpdated(el);\n\n        const overlayDetailQuery: OverlayDisplayQueryDetail = {};\n        const queryOverlayDetailEvent =\n            new CustomEvent<OverlayDisplayQueryDetail>('sp-overlay-query', {\n                bubbles: true,\n                composed: true,\n                detail: overlayDetailQuery,\n                cancelable: true,\n            });\n        el.dispatchEvent(queryOverlayDetailEvent);\n\n        expect(overlayDetailQuery.overlayContentTipElement).to.exist;\n        if (overlayDetailQuery.overlayContentTipElement) {\n            expect(overlayDetailQuery.overlayContentTipElement.id).to.equal(\n                'tip'\n            );\n        }\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
