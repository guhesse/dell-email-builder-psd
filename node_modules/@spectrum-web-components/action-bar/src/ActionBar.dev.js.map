{
  "version": 3,
  "sources": ["ActionBar.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport actionBarStyles from './action-bar.css.js';\nexport const actionBarVariants = ['sticky', 'fixed'];\n\n/**\n * @element sp-action-bar\n * @slot - Content to display with the Action Bar\n */\nexport class ActionBar extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [actionBarStyles];\n    }\n\n    /**\n     * When `flexible` the action bar sizes itself to its content\n     * rather than a specific width.\n     *\n     * @param {Boolean} flexible\n     */\n    @property({ type: Boolean, reflect: true })\n    public flexible = false;\n\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /**\n     * The variant applies specific styling when set to `sticky` or `fixed`.\n     * `variant` attribute is removed when not matching one of the above.\n     *\n     * @param {String} variant\n     */\n    @property({ type: String, reflect: true })\n    public set variant(variant: string) {\n        if (variant === this.variant) {\n            return;\n        }\n        if (actionBarVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n            return;\n        }\n        this.removeAttribute('variant');\n        this._variant = '';\n    }\n\n    public get variant(): string {\n        return this._variant;\n    }\n\n    private _variant = '';\n\n    public override render(): TemplateResult {\n        return html`\n            <sp-popover ?open=${this.open} id=\"popover\">\n                <slot></slot>\n            </sp-popover>\n        `;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EACA;AAAA,OAEG;AACP,SAAS,gBAAgB;AACzB,OAAO;AACP,OAAO,qBAAqB;AACrB,aAAM,oBAAoB,CAAC,UAAU,OAAO;AAM5C,aAAM,kBAAkB,gBAAgB;AAAA,EAAxC;AAAA;AAYH,SAAO,WAAW;AAGlB,SAAO,OAAO;AA0Bd,SAAQ,WAAW;AAAA;AAAA,EAxCnB,WAA2B,SAAyB;AAChD,WAAO,CAAC,eAAe;AAAA,EAC3B;AAAA,EAqBA,IAAW,QAAQ,SAAiB;AAChC,QAAI,YAAY,KAAK,SAAS;AAC1B;AAAA,IACJ;AACA,QAAI,kBAAkB,SAAS,OAAO,GAAG;AACrC,WAAK,aAAa,WAAW,OAAO;AACpC,WAAK,WAAW;AAChB;AAAA,IACJ;AACA,SAAK,gBAAgB,SAAS;AAC9B,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,IAAW,UAAkB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EAIgB,SAAyB;AACrC,WAAO;AAAA,gCACiB,KAAK;AAAA;AAAA;AAAA;AAAA,EAIjC;AACJ;AAtCW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAXjC,UAYF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAdjC,UAeF;AASI;AAAA,EADV,SAAS,EAAE,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,GAvBhC,UAwBE;",
  "names": []
}
