{
  "version": 3,
  "sources": ["sidenav-item.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport '@spectrum-web-components/sidenav/sp-sidenav.js';\nimport '@spectrum-web-components/sidenav/sp-sidenav-item.js';\nimport { SideNavItem } from '@spectrum-web-components/sidenav';\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\n\ndescribe('Sidenav Item', () => {\n    it('can exist disabled and with no parent', async () => {\n        let selected = false;\n        const onSidenavSelect = (): void => {\n            selected = true;\n        };\n        const el = await fixture<SideNavItem>(\n            html`\n                <sp-sidenav-item\n                    disabled\n                    value=\"Section 2\"\n                    label=\"Section 2\"\n                    @sidenav-select=${onSidenavSelect}\n                ></sp-sidenav-item>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(selected).to.be.false;\n\n        el.click();\n\n        await elementUpdated(el);\n\n        expect(selected).to.be.false;\n\n        el.disabled = false;\n\n        el.click();\n\n        await elementUpdated(el);\n\n        expect(selected).to.be.true;\n    });\n\n    it('clicking expands a sidenav item with children', async () => {\n        const el = await fixture<SideNavItem>(\n            html`\n                <sp-sidenav-item>\n                    <sp-sidenav-item\n                        value=\"Section 1\"\n                        label=\"Section 1\"\n                    ></sp-sidenav-item>\n                    <sp-sidenav-item\n                        value=\"Section 2\"\n                        label=\"Section 2\"\n                    ></sp-sidenav-item>\n                </sp-sidenav-item>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(el.shadowRoot).to.exist;\n        if (!el.shadowRoot) return;\n\n        let slot: HTMLSlotElement | null = el.shadowRoot.querySelector(\n            'slot[name=\"descendant\"]'\n        );\n        expect(slot).not.to.exist;\n\n        expect(el.expanded).to.be.false;\n\n        el.click();\n\n        await elementUpdated(el);\n\n        expect(el.expanded).to.be.true;\n\n        slot = el.shadowRoot.querySelector(\n            'slot[name=\"descendant\"]'\n        ) as HTMLSlotElement;\n        expect(slot).to.exist;\n        if (!slot) return;\n\n        expect(slot.assignedElements().length).to.equal(2);\n    });\n\n    it('populated `aria-current`', async () => {\n        const el = await fixture<SideNavItem>(\n            html`\n                <sp-sidenav value=\"Section 2\">\n                    <sp-sidenav-item\n                        href=\"https://opensource.adobe.com/spectrum-web-components/\"\n                        label=\"Section 1\"\n                        value=\"Section 1\"\n                    ></sp-sidenav-item>\n                    <sp-sidenav-item\n                        href=${window.location.href}\n                        label=\"Section 2\"\n                        value=\"Section 2\"\n                        selected\n                    ></sp-sidenav-item>\n                </sp-sidenav>\n            `\n        );\n\n        await elementUpdated(el);\n\n        const currentItem = el.querySelector(\n            'sp-sidenav-item:nth-child(2)'\n        ) as SideNavItem;\n        const otherItem = el.querySelector(\n            'sp-sidenav-item:nth-child(1)'\n        ) as SideNavItem;\n\n        await elementUpdated(currentItem);\n        await elementUpdated(otherItem);\n\n        expect(currentItem.focusElement.hasAttribute('aria-current'), 'current')\n            .to.be.true;\n        expect(otherItem.focusElement.hasAttribute('aria-current'), 'other').to\n            .be.false;\n    });\n});\n"],
  "mappings": ";AAYA,OAAO;AACP,OAAO;AAEP,SAAS,gBAAgB,QAAQ,SAAS,YAAY;AAEtD,SAAS,gBAAgB,MAAM;AAC3B,KAAG,yCAAyC,YAAY;AACpD,QAAI,WAAW;AACf,UAAM,kBAAkB,MAAY;AAChC,iBAAW;AAAA,IACf;AACA,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA,sCAK0B;AAAA;AAAA;AAAA,IAG9B;AAEA,UAAM,eAAe,EAAE;AAEvB,WAAO,QAAQ,EAAE,GAAG,GAAG;AAEvB,OAAG,MAAM;AAET,UAAM,eAAe,EAAE;AAEvB,WAAO,QAAQ,EAAE,GAAG,GAAG;AAEvB,OAAG,WAAW;AAEd,OAAG,MAAM;AAET,UAAM,eAAe,EAAE;AAEvB,WAAO,QAAQ,EAAE,GAAG,GAAG;AAAA,EAC3B,CAAC;AAED,KAAG,iDAAiD,YAAY;AAC5D,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYJ;AAEA,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,UAAU,EAAE,GAAG;AACzB,QAAI,CAAC,GAAG;AAAY;AAEpB,QAAI,OAA+B,GAAG,WAAW;AAAA,MAC7C;AAAA,IACJ;AACA,WAAO,IAAI,EAAE,IAAI,GAAG;AAEpB,WAAO,GAAG,QAAQ,EAAE,GAAG,GAAG;AAE1B,OAAG,MAAM;AAET,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,QAAQ,EAAE,GAAG,GAAG;AAE1B,WAAO,GAAG,WAAW;AAAA,MACjB;AAAA,IACJ;AACA,WAAO,IAAI,EAAE,GAAG;AAChB,QAAI,CAAC;AAAM;AAEX,WAAO,KAAK,iBAAiB,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAAA,EACrD,CAAC;AAED,KAAG,4BAA4B,YAAY;AACvC,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAQmB,OAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOvC;AAEA,UAAM,eAAe,EAAE;AAEvB,UAAM,cAAc,GAAG;AAAA,MACnB;AAAA,IACJ;AACA,UAAM,YAAY,GAAG;AAAA,MACjB;AAAA,IACJ;AAEA,UAAM,eAAe,WAAW;AAChC,UAAM,eAAe,SAAS;AAE9B,WAAO,YAAY,aAAa,aAAa,cAAc,GAAG,SAAS,EAClE,GAAG,GAAG;AACX,WAAO,UAAU,aAAa,aAAa,cAAc,GAAG,OAAO,EAAE,GAChE,GAAG;AAAA,EACZ,CAAC;AACL,CAAC;",
  "names": []
}
