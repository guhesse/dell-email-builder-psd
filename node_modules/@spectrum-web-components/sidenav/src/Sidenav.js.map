{
  "version": 3,
  "sources": ["Sidenav.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\nimport sidenavStyles from './sidenav.css.js';\nimport { Focusable } from '@spectrum-web-components/shared';\nimport { SideNavItem } from './SidenavItem.js';\nimport { SideNavHeading } from './SidenavHeading.js';\n\nexport interface SidenavSelectDetail {\n    value: string;\n}\n\n/**\n * @element sp-sidenav\n *\n * @slot - the Sidenav Items to display\n * @fires change - Announces a change in the `value` property of the navigation element.\n * This change can be \"canceled\" via `event.preventDefault()`.\n */\nexport class SideNav extends Focusable {\n    public static override get styles(): CSSResultArray {\n        return [sidenavStyles];\n    }\n\n    private items = new Set<SideNavItem>();\n\n    public startTrackingSelectionForItem(item: SideNavItem): void {\n        this.items.add(item);\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    public stopTrackingSelectionForItem(item: SideNavItem): void {\n        this.items.delete(item);\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    rovingTabindexController = new RovingTabindexController<SideNavItem>(this, {\n        focusInIndex: (elements: SideNavItem[]) => {\n            return elements.findIndex((el) => {\n                return this.value\n                    ? !el.disabled &&\n                          !this.isDisabledChild(el) &&\n                          el.value === this.value\n                    : !el.disabled && !this.isDisabledChild(el);\n            });\n        },\n        direction: 'vertical',\n        elements: () => [...this.querySelectorAll('sp-sidenav-item')],\n        isFocusableElement: (el: SideNavItem) =>\n            !el.disabled && !this.isDisabledChild(el),\n    });\n\n    @property({ type: Boolean, reflect: true, attribute: 'manage-tab-index' })\n    public manageTabIndex = false;\n\n    @property({ reflect: true })\n    public value: string | undefined = undefined;\n\n    private handleSelect(\n        event: CustomEvent<SidenavSelectDetail> & { target: SideNavItem }\n    ): void {\n        event.stopPropagation();\n        if (this.value === event.detail.value) {\n            return;\n        }\n        const oldValue = this.value;\n        this.value = event.detail.value;\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n        if (!applyDefault) {\n            this.value = oldValue;\n            event.target.selected = false;\n            event.preventDefault();\n        } else {\n            this.items.forEach((item) => item.handleSideNavSelect(event));\n        }\n    }\n\n    public override focus(): void {\n        this.rovingTabindexController.focus();\n    }\n\n    public override blur(): void {\n        if (this.focusElement === this) {\n            return;\n        }\n\n        super.blur();\n    }\n\n    public override click(): void {\n        if (this.focusElement === this) {\n            return;\n        }\n\n        super.click();\n    }\n\n    public override get focusElement(): SideNavItem | SideNav {\n        return this.rovingTabindexController.focusInElement || this;\n    }\n\n    private isDisabledChild(child: SideNavItem): boolean {\n        if (child.disabled) {\n            return true;\n        }\n        let parent = child.parentElement as\n            | SideNavItem\n            | SideNav\n            | SideNavHeading;\n        while (\n            parent instanceof SideNavHeading ||\n            (!(parent as SideNavItem).disabled &&\n                parent instanceof SideNavItem &&\n                parent.expanded)\n        ) {\n            parent = parent.parentElement as\n                | SideNavItem\n                | SideNav\n                | SideNavHeading;\n        }\n        return parent !== this;\n    }\n\n    private handleSlotchange(): void {\n        if (this.manageTabIndex) {\n            this.rovingTabindexController.manage();\n        } else {\n            this.rovingTabindexController.unmanage();\n        }\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <nav @sidenav-select=${this.handleSelect}>\n                <slot\n                    name=\"descendant\"\n                    @slotchange=${this.handleSlotchange}\n                ></slot>\n            </nav>\n        `;\n    }\n\n    protected override willUpdate(): void {\n        if (!this.hasUpdated) {\n            const selectedChild = this.querySelector(\n                '[selected]'\n            ) as SideNavItem;\n            if (selectedChild) {\n                this.value = selectedChild.value;\n            }\n        }\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('manageTabIndex')) {\n            if (this.manageTabIndex) {\n                this.rovingTabindexController.manage();\n            } else {\n                this.rovingTabindexController.unmanage();\n            }\n        }\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-sidenav:select': CustomEvent<SidenavSelectDetail>;\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,MAGG,gCACP,OAAS,YAAAC,MAAgB,kDACzB,OAAS,4BAAAC,MAAgC,sEAEzC,OAAOC,MAAmB,mBAC1B,OAAS,aAAAC,MAAiB,kCAC1B,OAAS,eAAAC,MAAmB,mBAC5B,OAAS,kBAAAC,MAAsB,sBAaxB,aAAM,gBAAgBF,CAAU,CAAhC,kCAKH,KAAQ,MAAQ,IAAI,IAYpB,8BAA2B,IAAIF,EAAsC,KAAM,CACvE,aAAeK,GACJA,EAAS,UAAWC,GAChB,KAAK,MACN,CAACA,EAAG,UACA,CAAC,KAAK,gBAAgBA,CAAE,GACxBA,EAAG,QAAU,KAAK,MACtB,CAACA,EAAG,UAAY,CAAC,KAAK,gBAAgBA,CAAE,CACjD,EAEL,UAAW,WACX,SAAU,IAAM,CAAC,GAAG,KAAK,iBAAiB,iBAAiB,CAAC,EAC5D,mBAAqBA,GACjB,CAACA,EAAG,UAAY,CAAC,KAAK,gBAAgBA,CAAE,CAChD,CAAC,EAGD,KAAO,eAAiB,GAGxB,KAAO,MAA4B,OApCnC,WAA2B,QAAyB,CAChD,MAAO,CAACL,CAAa,CACzB,CAIO,8BAA8BM,EAAyB,CAC1D,KAAK,MAAM,IAAIA,CAAI,EACnB,KAAK,yBAAyB,kBAAkB,CACpD,CAEO,6BAA6BA,EAAyB,CACzD,KAAK,MAAM,OAAOA,CAAI,EACtB,KAAK,yBAAyB,kBAAkB,CACpD,CAwBQ,aACJC,EACI,CAEJ,GADAA,EAAM,gBAAgB,EAClB,KAAK,QAAUA,EAAM,OAAO,MAC5B,OAEJ,MAAMC,EAAW,KAAK,MACtB,KAAK,MAAQD,EAAM,OAAO,MACL,KAAK,cACtB,IAAI,MAAM,SAAU,CAChB,QAAS,GACT,SAAU,GACV,WAAY,EAChB,CAAC,CACL,EAMI,KAAK,MAAM,QAASD,GAASA,EAAK,oBAAoBC,CAAK,CAAC,GAJ5D,KAAK,MAAQC,EACbD,EAAM,OAAO,SAAW,GACxBA,EAAM,eAAe,EAI7B,CAEgB,OAAc,CAC1B,KAAK,yBAAyB,MAAM,CACxC,CAEgB,MAAa,CACrB,KAAK,eAAiB,MAI1B,MAAM,KAAK,CACf,CAEgB,OAAc,CACtB,KAAK,eAAiB,MAI1B,MAAM,MAAM,CAChB,CAEA,IAAoB,cAAsC,CACtD,OAAO,KAAK,yBAAyB,gBAAkB,IAC3D,CAEQ,gBAAgBE,EAA6B,CACjD,GAAIA,EAAM,SACN,MAAO,GAEX,IAAIC,EAASD,EAAM,cAInB,KACIC,aAAkBP,GACjB,CAAEO,EAAuB,UACtBA,aAAkBR,GAClBQ,EAAO,UAEXA,EAASA,EAAO,cAKpB,OAAOA,IAAW,IACtB,CAEQ,kBAAyB,CACzB,KAAK,eACL,KAAK,yBAAyB,OAAO,EAErC,KAAK,yBAAyB,SAAS,CAE/C,CAEmB,QAAyB,CACxC,OAAOb;AAAA,mCACoB,KAAK;AAAA;AAAA;AAAA,kCAGN,KAAK;AAAA;AAAA;AAAA,SAInC,CAEmB,YAAmB,CAClC,GAAI,CAAC,KAAK,WAAY,CAClB,MAAMc,EAAgB,KAAK,cACvB,YACJ,EACIA,IACA,KAAK,MAAQA,EAAc,MAEnC,CACJ,CAEmB,QAAQC,EAA+B,CACtD,MAAM,QAAQA,CAAO,EACjBA,EAAQ,IAAI,gBAAgB,IACxB,KAAK,eACL,KAAK,yBAAyB,OAAO,EAErC,KAAK,yBAAyB,SAAS,EAGnD,CACJ,CApHWC,EAAA,CADNf,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,kBAAmB,CAAC,GAjChE,QAkCF,8BAGAe,EAAA,CADNf,EAAS,CAAE,QAAS,EAAK,CAAC,GApClB,QAqCF",
  "names": ["html", "property", "RovingTabindexController", "sidenavStyles", "Focusable", "SideNavItem", "SideNavHeading", "elements", "el", "item", "event", "oldValue", "child", "parent", "selectedChild", "changes", "__decorateClass"]
}
