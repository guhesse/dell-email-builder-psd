"use strict";var o=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var d=(r,a,e,t)=>{for(var i=t>1?void 0:t?v(a,e):a,l=r.length-1,n;l>=0;l--)(n=r[l])&&(i=(t?n(a,e,i):n(i))||i);return t&&i&&o(a,e,i),i};import{html as u}from"@spectrum-web-components/base";import{property as s}from"@spectrum-web-components/base/src/decorators.js";import{RovingTabindexController as c}from"@spectrum-web-components/reactive-controllers/src/RovingTabindex.js";import m from"./sidenav.css.js";import{Focusable as h}from"@spectrum-web-components/shared";import{SideNavItem as p}from"./SidenavItem.js";import{SideNavHeading as b}from"./SidenavHeading.js";export class SideNav extends h{constructor(){super(...arguments);this.items=new Set;this.rovingTabindexController=new c(this,{focusInIndex:e=>e.findIndex(t=>this.value?!t.disabled&&!this.isDisabledChild(t)&&t.value===this.value:!t.disabled&&!this.isDisabledChild(t)),direction:"vertical",elements:()=>[...this.querySelectorAll("sp-sidenav-item")],isFocusableElement:e=>!e.disabled&&!this.isDisabledChild(e)});this.manageTabIndex=!1;this.value=void 0}static get styles(){return[m]}startTrackingSelectionForItem(e){this.items.add(e),this.rovingTabindexController.clearElementCache()}stopTrackingSelectionForItem(e){this.items.delete(e),this.rovingTabindexController.clearElementCache()}handleSelect(e){if(e.stopPropagation(),this.value===e.detail.value)return;const t=this.value;this.value=e.detail.value,this.dispatchEvent(new Event("change",{bubbles:!0,composed:!0,cancelable:!0}))?this.items.forEach(l=>l.handleSideNavSelect(e)):(this.value=t,e.target.selected=!1,e.preventDefault())}focus(){this.rovingTabindexController.focus()}blur(){this.focusElement!==this&&super.blur()}click(){this.focusElement!==this&&super.click()}get focusElement(){return this.rovingTabindexController.focusInElement||this}isDisabledChild(e){if(e.disabled)return!0;let t=e.parentElement;for(;t instanceof b||!t.disabled&&t instanceof p&&t.expanded;)t=t.parentElement;return t!==this}handleSlotchange(){this.manageTabIndex?this.rovingTabindexController.manage():this.rovingTabindexController.unmanage()}render(){return u`
            <nav @sidenav-select=${this.handleSelect}>
                <slot
                    name="descendant"
                    @slotchange=${this.handleSlotchange}
                ></slot>
            </nav>
        `}willUpdate(){if(!this.hasUpdated){const e=this.querySelector("[selected]");e&&(this.value=e.value)}}updated(e){super.updated(e),e.has("manageTabIndex")&&(this.manageTabIndex?this.rovingTabindexController.manage():this.rovingTabindexController.unmanage())}}d([s({type:Boolean,reflect:!0,attribute:"manage-tab-index"})],SideNav.prototype,"manageTabIndex",2),d([s({reflect:!0})],SideNav.prototype,"value",2);
//# sourceMappingURL=Sidenav.js.map
