"use strict";import{MutationController as g}from"@lit-labs/observers/mutation_controller.js";const t=Symbol("slotContentIsPresent");export function ObserveSlotPresence(o,r){var l;const s=Array.isArray(r)?r:[r];class i extends o{constructor(...e){super(e);this[l]=new Map;this.managePresenceObservedSlot=()=>{let e=!1;s.forEach(n=>{const a=!!this.querySelector(n),c=this[t].get(n)||!1;e=e||c!==a,this[t].set(n,!!this.querySelector(n))}),e&&this.updateComplete.then(()=>{this.requestUpdate()})};new g(this,{config:{childList:!0,subtree:!0},callback:()=>{this.managePresenceObservedSlot()}}),this.managePresenceObservedSlot()}get slotContentIsPresent(){if(s.length===1)return this[t].get(s[0])||!1;throw new Error("Multiple selectors provided to `ObserveSlotPresence` use `getSlotContentPresence(selector: string)` instead.")}getSlotContentPresence(e){if(this[t].has(e))return this[t].get(e)||!1;throw new Error(`The provided selector \`${e}\` is not being observed.`)}}return l=t,i}
//# sourceMappingURL=observe-slot-presence.js.map
