{
  "version": 3,
  "sources": ["observe-slot-presence.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { ReactiveElement } from '@spectrum-web-components/base';\nimport { MutationController } from '@lit-labs/observers/mutation_controller.js';\n\nconst slotContentIsPresent = Symbol('slotContentIsPresent');\n\ntype Constructor<T = Record<string, unknown>> = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    new (...args: any[]): T;\n    prototype: T;\n};\n\nexport interface SlotPresenceObservingInterface {\n    slotContentIsPresent: boolean;\n    getSlotContentPresence(selector: string): boolean;\n    managePresenceObservedSlot(): void;\n}\n\nexport function ObserveSlotPresence<T extends Constructor<ReactiveElement>>(\n    constructor: T,\n    lightDomSelector: string | string[]\n): T & Constructor<SlotPresenceObservingInterface> {\n    const lightDomSelectors = Array.isArray(lightDomSelector)\n        ? lightDomSelector\n        : [lightDomSelector];\n    class SlotPresenceObservingElement\n        extends constructor\n        implements SlotPresenceObservingInterface\n    {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        constructor(...args: any[]) {\n            super(args);\n\n            new MutationController(this, {\n                config: {\n                    childList: true,\n                    subtree: true,\n                },\n                callback: () => {\n                    this.managePresenceObservedSlot();\n                },\n            });\n\n            this.managePresenceObservedSlot();\n        }\n\n        /**\n         *  @private\n         */\n        public get slotContentIsPresent(): boolean {\n            if (lightDomSelectors.length === 1) {\n                return (\n                    this[slotContentIsPresent].get(lightDomSelectors[0]) ||\n                    false\n                );\n            } else {\n                throw new Error(\n                    'Multiple selectors provided to `ObserveSlotPresence` use `getSlotContentPresence(selector: string)` instead.'\n                );\n            }\n        }\n        private [slotContentIsPresent]: Map<string, boolean> = new Map();\n\n        public getSlotContentPresence(selector: string): boolean {\n            if (this[slotContentIsPresent].has(selector)) {\n                return this[slotContentIsPresent].get(selector) || false;\n            }\n            throw new Error(\n                `The provided selector \\`${selector}\\` is not being observed.`\n            );\n        }\n\n        public managePresenceObservedSlot = (): void => {\n            let changes = false;\n            lightDomSelectors.forEach((selector) => {\n                const nextValue = !!this.querySelector(selector);\n                const previousValue =\n                    this[slotContentIsPresent].get(selector) || false;\n                changes = changes || previousValue !== nextValue;\n                this[slotContentIsPresent].set(\n                    selector,\n                    !!this.querySelector(selector)\n                );\n            });\n            if (changes) {\n                this.updateComplete.then(() => {\n                    this.requestUpdate();\n                });\n            }\n        };\n    }\n    return SlotPresenceObservingElement;\n}\n"],
  "mappings": "aAWA,OAAS,sBAAAA,MAA0B,6CAEnC,MAAMC,EAAuB,OAAO,sBAAsB,EAcnD,gBAAS,oBACZC,EACAC,EAC+C,CA9BnD,IAAAC,EA+BI,MAAMC,EAAoB,MAAM,QAAQF,CAAgB,EAClDA,EACA,CAACA,CAAgB,EACvB,MAAMG,UACMJ,CAEZ,CAEI,eAAeK,EAAa,CACxB,MAAMA,CAAI,EA8Bd,KAASH,GAA8C,IAAI,IAW3D,KAAO,2BAA6B,IAAY,CAC5C,IAAII,EAAU,GACdH,EAAkB,QAASI,GAAa,CACpC,MAAMC,EAAY,CAAC,CAAC,KAAK,cAAcD,CAAQ,EACzCE,EACF,KAAKV,GAAsB,IAAIQ,CAAQ,GAAK,GAChDD,EAAUA,GAAWG,IAAkBD,EACvC,KAAKT,GAAsB,IACvBQ,EACA,CAAC,CAAC,KAAK,cAAcA,CAAQ,CACjC,CACJ,CAAC,EACGD,GACA,KAAK,eAAe,KAAK,IAAM,CAC3B,KAAK,cAAc,CACvB,CAAC,CAET,EAxDI,IAAIR,EAAmB,KAAM,CACzB,OAAQ,CACJ,UAAW,GACX,QAAS,EACb,EACA,SAAU,IAAM,CACZ,KAAK,2BAA2B,CACpC,CACJ,CAAC,EAED,KAAK,2BAA2B,CACpC,CAKA,IAAW,sBAAgC,CACvC,GAAIK,EAAkB,SAAW,EAC7B,OACI,KAAKJ,GAAsB,IAAII,EAAkB,EAAE,GACnD,GAGJ,MAAM,IAAI,MACN,8GACJ,CAER,CAGO,uBAAuBI,EAA2B,CACrD,GAAI,KAAKR,GAAsB,IAAIQ,CAAQ,EACvC,OAAO,KAAKR,GAAsB,IAAIQ,CAAQ,GAAK,GAEvD,MAAM,IAAI,MACN,2BAA2BA,4BAC/B,CACJ,CAoBJ,CAnGJ,OAsEiBL,EAAAH,EA8BNK,CACX",
  "names": ["MutationController", "slotContentIsPresent", "constructor", "lightDomSelector", "_a", "lightDomSelectors", "SlotPresenceObservingElement", "args", "changes", "selector", "nextValue", "previousValue"]
}
