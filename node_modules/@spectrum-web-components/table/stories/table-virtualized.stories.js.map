{
  "version": 3,
  "sources": ["table-virtualized.stories.ts"],
  "sourcesContent": ["/* STORIES\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport '@spectrum-web-components/table/sp-table.js';\nimport '@spectrum-web-components/table/sp-table-checkbox-cell.js';\nimport '@spectrum-web-components/table/sp-table-head.js';\nimport '@spectrum-web-components/table/sp-table-head-cell.js';\nimport '@spectrum-web-components/table/sp-table-body.js';\nimport '@spectrum-web-components/table/sp-table-row.js';\nimport '@spectrum-web-components/table/sp-table-cell.js';\nimport { Item, makeItems, Properties, renderItem } from './index.js';\nimport type {\n    RangeChangedEvent,\n    SortedEventDetails,\n    Table,\n} from '@spectrum-web-components/table';\n\nexport default {\n    title: 'Table/Virtualized',\n    component: 'sp-table',\n    argTypes: {\n        onChange: { action: 'change' },\n        selected: {\n            name: 'selected',\n            description: 'The array of item values selected by the Table.',\n            type: { name: '', required: false },\n            control: 'text',\n        },\n        selects: {\n            name: 'selects',\n            description:\n                'If the Table accepts a \"single\" or \"multiple\" selection.',\n            control: {\n                type: 'inline-radio',\n                options: ['', 'single', 'multiple'],\n            },\n        },\n    },\n    args: {\n        selects: '',\n        selected: [],\n    },\n};\n\nclass VirtualTable extends SpectrumElement {\n    @property({ type: Array })\n    public items: {\n        name: string;\n        date: number;\n    }[] = makeItems(50);\n\n    constructor() {\n        super();\n        this.items.sort(this.compareItems('name', 'desc'));\n    }\n\n    compareItems =\n        (sortKey: 'name' | 'date', sortDirection: 'asc' | 'desc') =>\n        (\n            a: {\n                name: string;\n                date: number;\n            },\n            b: {\n                name: string;\n                date: number;\n            }\n        ): number => {\n            const doSortKey = sortKey;\n            if (!isNaN(Number(a[doSortKey]))) {\n                const first = Number(a[doSortKey]);\n                const second = Number(b[doSortKey]);\n                return sortDirection === 'asc'\n                    ? first - second\n                    : second - first;\n            } else {\n                const first = String(a[doSortKey]);\n                const second = String(b[doSortKey]);\n                return sortDirection === 'asc'\n                    ? first.localeCompare(second)\n                    : second.localeCompare(first);\n            }\n        };\n\n    protected override render(): TemplateResult {\n        return html`\n            <sp-table\n                aria-rowcount=\"50\"\n                .items=${this.items}\n                .renderItem=${renderItem}\n                size=\"m\"\n                scroller=\"true\"\n                style=\"height: 200px\"\n                @sorted=${(event: CustomEvent<SortedEventDetails>): void => {\n                    const { sortKey, sortDirection } = event.detail; // leveraged CustomEvent().detail, works across shadow boundaries\n                    const items = [...this.items];\n                    // depending on the column, sort asc or desc depending on the arrow direction\n                    items.sort(\n                        this.compareItems(\n                            sortKey as 'name' | 'date',\n                            sortDirection\n                        )\n                    );\n                    this.items = items;\n                }}\n            >\n                <sp-table-head>\n                    <sp-table-head-cell\n                        sortable\n                        sort-key=\"name\"\n                        sort-direction=\"desc\"\n                    >\n                        Column Title\n                    </sp-table-head-cell>\n                    <sp-table-head-cell sortable sort-key=\"date\">\n                        Column Title\n                    </sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                </sp-table-head>\n            </sp-table>\n        `;\n    }\n}\n\ncustomElements.define('virtual-table', VirtualTable);\n\nconst virtualItems = makeItems(50);\n\nexport const virtualized = (): TemplateResult => {\n    return html`\n        <virtual-table></virtual-table>\n    `;\n};\n\nexport const virtualizedSingle = (args: Properties): TemplateResult => {\n    const onChange =\n        (args.onChange as (eventData: {\n            first: number;\n            last: number;\n            type: string;\n        }) => void) ||\n        (() => {\n            return;\n        });\n\n    return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${({ target }: Event & { target: Table }) => {\n                const next = target.nextElementSibling as HTMLDivElement;\n                next.textContent = `Selected: ${JSON.stringify(\n                    target.selected\n                )}`;\n            }}\n            .items=${virtualItems}\n            .renderItem=${renderItem}\n            @visibilityChanged=${(event: RangeChangedEvent) =>\n                onChange({\n                    first: event.first,\n                    last: event.last,\n                    type: 'visibility',\n                })}\n            @rangeChanged=${(event: RangeChangedEvent) =>\n                onChange({\n                    first: event.first,\n                    last: event.last,\n                    type: 'range',\n                })}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n        <div>Selected: [\"49\"]</div>\n    `;\n};\nvirtualizedSingle.args = {\n    selects: 'single',\n    selected: ['49'],\n};\n\nexport const virtualizedMultiple = (args: Properties): TemplateResult => {\n    return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${({ target }: Event & { target: Table }) => {\n                const next = target.nextElementSibling as HTMLDivElement;\n                next.textContent = `Selected: ${JSON.stringify(\n                    target.selected,\n                    null,\n                    ' '\n                )}`;\n                const nextNext = next.nextElementSibling as HTMLDivElement;\n                nextNext.textContent = `Selected Count: ${target.selected.length}`;\n            }}\n            .items=${virtualItems}\n            .renderItem=${renderItem}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n        <div>Selected: [\"0\", \"48\"]</div>\n        <div>Selected Count: 2</div>\n    `;\n};\nvirtualizedMultiple.args = {\n    selects: 'multiple',\n    selected: ['0', '48'],\n};\n\nexport const virtualizedCustomValue = (args: Properties): TemplateResult => {\n    return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${args.onChange}\n            .items=${virtualItems}\n            .itemValue=${(item: Item) => 'applied-' + item.date}\n            .renderItem=${renderItem}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n            <sp-table-body></sp-table-body>\n        </sp-table>\n        <div>Selected: [\"0\", \"48\", \"applied-47\"]</div>\n        <div>Selected Count: 2</div>\n    `;\n};\nvirtualizedCustomValue.args = {\n    selected: ['0', '48', 'applied-47'],\n    selects: 'multiple',\n    onChange: ({ target }: Event & { target: Table }) => {\n        const next = target.nextElementSibling as HTMLDivElement;\n        next.textContent = `Selected: ${JSON.stringify(\n            target.selected,\n            null,\n            ' '\n        )}`;\n        const nextNext = next.nextElementSibling as HTMLDivElement;\n        nextNext.textContent = `Selected Count: ${target.selected.length}`;\n    },\n};\n\nexport const virtualizedCustomRow = (args: Properties): TemplateResult => {\n    virtualItems.splice(3, 1, { name: 'Scoobert', date: 2, _$rowType$: 1 });\n\n    return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${({ target }: Event & { target: Table }) => {\n                const next = target.nextElementSibling as HTMLDivElement;\n                next.textContent = `Selected: ${JSON.stringify(\n                    target.selected,\n                    null,\n                    ' '\n                )}`;\n                const nextNext = next.nextElementSibling as HTMLDivElement;\n                nextNext.textContent = `Selected Count: ${target.selected.length}`;\n            }}\n            scroller?=\"false\"\n            .items=${virtualItems}\n            .renderItem=${renderItem}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n        <div>Selected: [\"0\", \"48\"]</div>\n        <div>Selected Count: 2</div>\n    `;\n};\nvirtualizedCustomRow.args = {\n    selects: 'multiple',\n    selected: ['0', '48'],\n};\n\nexport const virtualizedNoScroller = (): TemplateResult => {\n    return html`\n        <sp-table size=\"m\" .items=${virtualItems} .renderItem=${renderItem}>\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n    `;\n};\n"],
  "mappings": "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",
  "names": []
}
