{
  "version": 3,
  "sources": ["TableRow.ts"],
  "sourcesContent": ["/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedElements,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport styles from './table-row.css.js';\nimport { TableCheckboxCell } from './TableCheckboxCell.js';\n\n/**\n * @element sp-table\n *\n * @fires sorted - Announces that `selected` of the table row has changed\n */\nexport class TableRow extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @queryAssignedElements({\n        selector: 'sp-table-checkbox-cell',\n        flatten: true,\n    })\n    checkboxCells!: TableCheckboxCell[];\n\n    @property({ reflect: true })\n    public role = 'row';\n\n    @property({ type: Boolean })\n    public selectable = false;\n\n    @property({ type: Boolean, reflect: true })\n    public selected = false;\n\n    @property({ type: String })\n    public value = '';\n\n    protected async handleChange(\n        event: Event & { target: TableCheckboxCell }\n    ): Promise<void> {\n        this.selected = event.target.checkbox.checked;\n\n        await 0;\n\n        if (event.defaultPrevented) {\n            this.selected = !this.selected;\n        }\n    }\n\n    protected handleSlotchange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        const assignedElements = target.assignedElements();\n        this.selectable = !!assignedElements.find(\n            (el) => el.localName === 'sp-table-checkbox-cell'\n        );\n    }\n\n    protected manageSelected(): void {\n        const [checkboxCell] = this.checkboxCells;\n        if (!checkboxCell) return;\n        checkboxCell.checked = this.selected;\n    }\n\n    protected handleClick(event: Event): void {\n        if (\n            event\n                .composedPath()\n                .find(\n                    (node) => (node as HTMLElement).localName === 'sp-checkbox'\n                )\n        ) {\n            return;\n        }\n        const [checkboxCell] = this.checkboxCells;\n        if (!checkboxCell) /* c8 ignore next */ return;\n        checkboxCell.click();\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot\n                @change=${this.handleChange}\n                @slotchange=${this.handleSlotchange}\n            ></slot>\n        `;\n    }\n\n    protected override willUpdate(changed: PropertyValues<this>): void {\n        if (changed.has('selected')) {\n            this.manageSelected();\n        }\n        if (changed.has('selectable')) {\n            if (this.selectable) {\n                this.addEventListener('click', this.handleClick);\n            } else {\n                this.removeEventListener('click', this.handleClick);\n            }\n        }\n    }\n}\n"],
  "mappings": "qNAWA,OAEI,QAAAA,EAEA,mBAAAC,MAEG,gCACP,OACI,YAAAC,EACA,yBAAAC,MACG,kDACP,OAAOC,MAAY,qBAQZ,aAAM,iBAAiBH,CAAgB,CAAvC,kCAYH,KAAO,KAAO,MAGd,KAAO,WAAa,GAGpB,KAAO,SAAW,GAGlB,KAAO,MAAQ,GApBf,WAA2B,QAAyB,CAChD,MAAO,CAACG,CAAM,CAClB,CAoBA,MAAgB,aACZC,EACa,CACb,KAAK,SAAWA,EAAM,OAAO,SAAS,QAEtC,KAAM,GAEFA,EAAM,mBACN,KAAK,SAAW,CAAC,KAAK,SAE9B,CAEU,iBAAiB,CACvB,OAAAC,CACJ,EAA8C,CAC1C,MAAMC,EAAmBD,EAAO,iBAAiB,EACjD,KAAK,WAAa,CAAC,CAACC,EAAiB,KAChCC,GAAOA,EAAG,YAAc,wBAC7B,CACJ,CAEU,gBAAuB,CAC7B,KAAM,CAACC,CAAY,EAAI,KAAK,cACxB,CAACA,IACLA,EAAa,QAAU,KAAK,SAChC,CAEU,YAAYJ,EAAoB,CACtC,GACIA,EACK,aAAa,EACb,KACIK,GAAUA,EAAqB,YAAc,aAClD,EAEJ,OAEJ,KAAM,CAACD,CAAY,EAAI,KAAK,cACxB,CAACA,GACLA,EAAa,MAAM,CACvB,CAEmB,QAAyB,CACxC,OAAOT;AAAA;AAAA,0BAEW,KAAK;AAAA,8BACD,KAAK;AAAA;AAAA,SAG/B,CAEmB,WAAWW,EAAqC,CAC3DA,EAAQ,IAAI,UAAU,GACtB,KAAK,eAAe,EAEpBA,EAAQ,IAAI,YAAY,IACpB,KAAK,WACL,KAAK,iBAAiB,QAAS,KAAK,WAAW,EAE/C,KAAK,oBAAoB,QAAS,KAAK,WAAW,EAG9D,CACJ,CA7EIC,EAAA,CAJCT,EAAsB,CACnB,SAAU,yBACV,QAAS,EACb,CAAC,GARQ,SAST,6BAGOS,EAAA,CADNV,EAAS,CAAE,QAAS,EAAK,CAAC,GAXlB,SAYF,oBAGAU,EAAA,CADNV,EAAS,CAAE,KAAM,OAAQ,CAAC,GAdlB,SAeF,0BAGAU,EAAA,CADNV,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAjBjC,SAkBF,wBAGAU,EAAA,CADNV,EAAS,CAAE,KAAM,MAAO,CAAC,GApBjB,SAqBF",
  "names": ["html", "SpectrumElement", "property", "queryAssignedElements", "styles", "event", "target", "assignedElements", "el", "checkboxCell", "node", "changed", "__decorateClass"]
}
