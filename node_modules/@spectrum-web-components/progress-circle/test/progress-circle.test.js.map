{
  "version": 3,
  "sources": ["progress-circle.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\n\nimport '@spectrum-web-components/progress-circle/sp-progress-circle.js';\nimport { ProgressCircle } from '@spectrum-web-components/progress-circle';\nimport { stub } from 'sinon';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('ProgressCircle', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<ProgressCircle>(html`\n                <sp-progress-circle label=\"Loading\"></sp-progress-circle>\n            `)\n    );\n    it('loads', async () => {\n        const el = await fixture<ProgressCircle>(html`\n            <sp-progress-circle label=\"Loading\"></sp-progress-circle>\n        `);\n\n        await elementUpdated(el);\n        expect(el).to.not.be.undefined;\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads - [indeterminate]', async () => {\n        const el = await fixture<ProgressCircle>(html`\n            <sp-progress-circle\n                indeterminate\n                label=\"Loading\"\n            ></sp-progress-circle>\n        `);\n\n        await elementUpdated(el);\n        expect(el).to.not.be.undefined;\n\n        await expect(el).to.be.accessible();\n    });\n    it('accepts label from `slot`', async () => {\n        const el = await fixture<ProgressCircle>(html`\n            <sp-progress-circle role=\"progressbar\">\n                Label From Slot\n            </sp-progress-circle>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.getAttribute('aria-label')).to.equal('Label From Slot');\n    });\n    it('accepts user `role`', async () => {\n        const el = await fixture<ProgressCircle>(html`\n            <sp-progress-circle\n                role=\"progressbar\"\n                label=\"With user role\"\n            ></sp-progress-circle>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.getAttribute('role')).to.equal('progressbar');\n    });\n    it('returns to indeterminate', async () => {\n        const el = await fixture<ProgressCircle>(html`\n            <sp-progress-circle\n                progress=\"50\"\n                label=\"Will be indeterminate\"\n            ></sp-progress-circle>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.true;\n        expect(el.getAttribute('aria-valuenow')).to.equal('50');\n\n        el.indeterminate = true;\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.false;\n    });\n    it('warns in Dev Mode when accessible attributes are not leveraged', async () => {\n        const consoleWarnStub = stub(console, 'warn');\n        const el = await fixture<ProgressCircle>(html`\n            <sp-progress-circle progress=\"50\"></sp-progress-circle>\n        `);\n\n        await elementUpdated(el);\n\n        expect(consoleWarnStub.called).to.be.true;\n        const spyCall = consoleWarnStub.getCall(0);\n        expect(\n            spyCall.args.at(0).includes('accessible'),\n            'confirm accessibility-centric message'\n        ).to.be.true;\n        expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n            data: {\n                localName: 'sp-progress-circle',\n                type: 'accessibility',\n                level: 'default',\n            },\n        });\n        consoleWarnStub.restore();\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,gBAAgB,QAAQ,SAAS,YAAY;AAEtD,OAAO;AAEP,SAAS,YAAY;AACrB,SAAS,6BAA6B;AAEtC,SAAS,kBAAkB,MAAM;AAC7B;AAAA,IACI,YACI,MAAM,QAAwB;AAAA;AAAA,aAE7B;AAAA,EACT;AACA,KAAG,SAAS,YAAY;AACpB,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA,SAExC;AAED,UAAM,eAAe,EAAE;AACvB,WAAO,EAAE,EAAE,GAAG,IAAI,GAAG;AAErB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,2BAA2B,YAAY;AACtC,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,SAKxC;AAED,UAAM,eAAe,EAAE;AACvB,WAAO,EAAE,EAAE,GAAG,IAAI,GAAG;AAErB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,6BAA6B,YAAY;AACxC,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA,SAIxC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,aAAa,YAAY,CAAC,EAAE,GAAG,MAAM,iBAAiB;AAAA,EACpE,CAAC;AACD,KAAG,uBAAuB,YAAY;AAClC,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,SAKxC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,aAAa,MAAM,CAAC,EAAE,GAAG,MAAM,aAAa;AAAA,EAC1D,CAAC;AACD,KAAG,4BAA4B,YAAY;AACvC,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,SAKxC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,aAAa,eAAe,CAAC,EAAE,GAAG,GAAG;AAC/C,WAAO,GAAG,aAAa,eAAe,CAAC,EAAE,GAAG,MAAM,IAAI;AAEtD,OAAG,gBAAgB;AAEnB,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,aAAa,eAAe,CAAC,EAAE,GAAG,GAAG;AAAA,EACnD,CAAC;AACD,KAAG,kEAAkE,YAAY;AAC7E,UAAM,kBAAkB,KAAK,SAAS,MAAM;AAC5C,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA,SAExC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,gBAAgB,MAAM,EAAE,GAAG,GAAG;AACrC,UAAM,UAAU,gBAAgB,QAAQ,CAAC;AACzC;AAAA,MACI,QAAQ,KAAK,GAAG,CAAC,EAAE,SAAS,YAAY;AAAA,MACxC;AAAA,IACJ,EAAE,GAAG,GAAG;AACR,WAAO,QAAQ,KAAK,GAAG,EAAE,GAAG,sBAAsB,EAAE,GAAG,KAAK,MAAM;AAAA,MAC9D,MAAM;AAAA,QACF,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IACJ,CAAC;AACD,oBAAgB,QAAQ;AAAA,EAC5B,CAAC;AACL,CAAC;",
  "names": []
}
