{
  "version": 3,
  "sources": ["TabsOverflow.ts"],
  "sourcesContent": ["/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    CSSResultArray,\n    html,\n    PropertyValueMap,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n    queryAssignedElements,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { classMap } from '@spectrum-web-components/base/src/directives.js';\nimport { ResizeController } from '@lit-labs/observers/resize-controller.js';\nimport { Tabs } from './Tabs.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport chevronIconStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\nimport tabSizes from './tabs-sizes.css.js';\nimport styles from './tabs-overflow.css.js';\n\ninterface TabsOverflowState {\n    canScrollLeft: boolean;\n    canScrollRight: boolean;\n}\n/**\n * @element sp-tabs-overflow\n */\nexport class TabsOverflow extends SizedMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [chevronIconStyles, styles, tabSizes];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    compact = false;\n\n    @property({ reflect: true })\n    public override dir!: 'ltr' | 'rtl';\n\n    @state()\n    private overflowState: TabsOverflowState = {\n        canScrollLeft: false,\n        canScrollRight: false,\n    };\n\n    @queryAssignedElements({ selector: 'sp-tabs', flatten: true })\n    private scrollContent!: Tabs[];\n\n    @query('.tabs-overflow-container')\n    private overflowContainer!: HTMLDivElement;\n\n    resizeController!: ResizeController;\n\n    public constructor() {\n        super();\n        this.resizeController = new ResizeController(this, {\n            target: this,\n            callback: (): void => {\n                this._updateScrollState();\n            },\n        });\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        // enable scroll event\n        const [tabs] = this.scrollContent;\n        if (tabs) {\n            tabs.enableTabsScroll = true;\n        }\n        this.resizeController.observe(this.overflowContainer);\n    }\n\n    private async _handleSlotChange(): Promise<void> {\n        const [tabsElement] = this.scrollContent;\n        await tabsElement?.updateComplete;\n        this._updateScrollState();\n    }\n\n    private _updateScrollState(): void {\n        const { scrollContent, overflowState } = this;\n\n        if (scrollContent) {\n            const [tabsElement] = this.scrollContent;\n            const { canScrollLeft, canScrollRight } =\n                tabsElement?.scrollState || {\n                    canScrollLeft: false,\n                    canScrollRight: false,\n                };\n\n            this.overflowState = {\n                ...overflowState,\n                canScrollLeft,\n                canScrollRight,\n            };\n        }\n    }\n\n    private _handleScrollClick(event: MouseEvent): void {\n        const currentTarget = event.currentTarget as HTMLElement;\n        const [tabsElement] = this.scrollContent;\n\n        const dist = tabsElement.clientWidth * 0.5;\n        const left = currentTarget.classList.contains('left-scroll')\n            ? -dist\n            : dist;\n        tabsElement.scrollTabs(left, 'smooth');\n    }\n\n    protected override updated(\n        changedProperties: PropertyValueMap<this>\n    ): void {\n        super.updated(changedProperties);\n        if (changedProperties.has('dir')) {\n            this._updateScrollState();\n        }\n    }\n\n    protected override render(): TemplateResult {\n        const { canScrollRight, canScrollLeft } = this.overflowState;\n        return html`\n            <div\n                class=${classMap({\n                    'tabs-overflow-container': true,\n                    'left-shadow': canScrollLeft,\n                    'right-shadow': canScrollRight,\n                })}\n            >\n                <sp-action-button\n                    class=${classMap({\n                        'left-scroll': true,\n                        show: canScrollLeft,\n                    })}\n                    quiet\n                    dir=\"rtl\"\n                    @click=${this._handleScrollClick}\n                >\n                    <sp-icon-chevron100\n                        slot=\"icon\"\n                        class=\"spectrum-UIIcon-ChevronLeft300\"\n                    ></sp-icon-chevron100>\n                </sp-action-button>\n                <sp-action-button\n                    class=${classMap({\n                        'right-scroll': true,\n                        show: canScrollRight,\n                    })}\n                    quiet\n                    @click=${this._handleScrollClick}\n                >\n                    <sp-icon-chevron100\n                        slot=\"icon\"\n                        class=\"spectrum-UIIcon-ChevronRight300\"\n                    ></sp-icon-chevron100>\n                </sp-action-button>\n                <slot\n                    @slotchange=${this._handleSlotChange}\n                    @sp-tabs-scroll=${this._updateScrollState}\n                ></slot>\n            </div>\n        `;\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "SizedMixin", "SpectrumElement", "property", "query", "queryAssignedElements", "state", "classMap", "ResizeController", "chevronIconStyles", "tabSizes", "styles", "changes", "tabs", "tabsElement", "scrollContent", "overflowState", "canScrollLeft", "canScrollRight", "event", "currentTarget", "dist", "left", "changedProperties", "__decorateClass"]
}
