{
  "version": 3,
  "sources": ["Tabs.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    css,\n    CSSResult,\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SizedMixin,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport {\n    classMap,\n    ifDefined,\n} from '@spectrum-web-components/base/src/directives.js';\nimport { IntersectionController } from '@lit-labs/observers/intersection-controller.js';\nimport { ResizeController } from '@lit-labs/observers/resize-controller.js';\nimport { Tab } from './Tab.js';\nimport { Focusable } from '@spectrum-web-components/shared';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\nimport tabStyles from './tabs.css.js';\nimport tabSizes from './tabs-sizes.css.js';\nimport { TabPanel } from './TabPanel.js';\n\n// Encapsulated for use both here and in TopNav\nexport const ScaledIndicator = {\n    baseSize: 100 as const,\n    noSelectionStyle: 'transform: translateX(0px) scaleX(0) scaleY(0)',\n\n    transformX(left: number, width: number): string {\n        const scale = width / this.baseSize;\n        return `transform: translateX(${left}px) scaleX(${scale});`;\n    },\n\n    transformY(top: number, height: number): string {\n        const scale = height / this.baseSize;\n        return `transform: translateY(${top}px) scaleY(${scale});`;\n    },\n\n    baseStyles(): CSSResult {\n        return css`\n            :host([direction='vertical-right']) #selection-indicator,\n            :host([direction='vertical']) #selection-indicator {\n                height: ${this.baseSize}px;\n            }\n            :host([dir][direction='horizontal']) #selection-indicator {\n                width: ${this.baseSize}px;\n            }\n        `;\n    },\n};\n\n/**\n * @element sp-tabs\n *\n * @slot - Tab elements to manage as a group\n * @slot tab-panel - Tab Panel elements related to the listed Tab elements\n * @csspart tablist - Container element for the slotted sp-tab elements\n *\n * @fires change - The selected Tab child has changed.\n */\nexport class Tabs extends SizedMixin(Focusable, { noDefaultSize: true }) {\n    public static override get styles(): CSSResultArray {\n        return [tabSizes, tabStyles, ScaledIndicator.baseStyles()];\n    }\n\n    /**\n     * Whether to activate a tab on keyboard focus or not.\n     *\n     * By default a tab is activated via a \"click\" interaction. This is specifically intended for when\n     * tab content cannot be displayed instantly, e.g. not all of the DOM content is available, etc.\n     * To learn more about \"Deciding When to Make Selection Automatically Follow Focus\", visit:\n     * https://w3c.github.io/aria-practices/#kbd_selection_follows_focus\n     */\n    @property({ type: Boolean })\n    public auto = false;\n\n    /**\n     * The tab items are displayed closer together.\n     */\n    @property({ type: Boolean, reflect: true })\n    public compact = false;\n\n    @property({ reflect: true })\n    public override dir!: 'ltr' | 'rtl';\n\n    @property({ reflect: true })\n    public direction: 'vertical' | 'vertical-right' | 'horizontal' =\n        'horizontal';\n\n    @property({ type: Boolean, reflect: true })\n    public emphasized = false;\n\n    @property()\n    public label = '';\n\n    @property({ type: Boolean })\n    public enableTabsScroll = false;\n\n    /**\n     * The tab list is displayed without a border.\n     */\n    @property({ type: Boolean, reflect: true })\n    public quiet = false;\n\n    @property({ attribute: false })\n    public selectionIndicatorStyle = ScaledIndicator.noSelectionStyle;\n\n    @property({ attribute: false })\n    public shouldAnimate = false;\n\n    @query('slot')\n    private slotEl!: HTMLSlotElement;\n\n    @query('#list')\n    private tabList!: HTMLDivElement;\n\n    @property({ reflect: true })\n    selected = '';\n\n    private set tabs(tabs: Tab[]) {\n        if (tabs === this.tabs) return;\n        this._tabs.forEach((tab) => {\n            this.resizeController.unobserve(tab);\n        });\n        tabs.forEach((tab) => {\n            this.resizeController.observe(tab);\n        });\n        this._tabs = tabs;\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    private get tabs(): Tab[] {\n        return this._tabs;\n    }\n\n    private _tabs: Tab[] = [];\n\n    constructor() {\n        super();\n        new IntersectionController(this, {\n            config: {\n                root: null,\n                rootMargin: '0px',\n                threshold: [0, 1],\n            },\n            callback: () => {\n                this.updateSelectionIndicator();\n            },\n        });\n    }\n\n    protected resizeController = new ResizeController(this, {\n        callback: () => {\n            this.updateSelectionIndicator();\n        },\n    });\n\n    rovingTabindexController = new RovingTabindexController<Tab>(this, {\n        focusInIndex: (elements) => {\n            let focusInIndex = 0;\n            const firstFocusableElement = elements.find((el, index) => {\n                const focusInElement = this.selected\n                    ? !el.disabled && el.value === this.selected\n                    : !el.disabled;\n                focusInIndex = index;\n                return focusInElement;\n            });\n            return firstFocusableElement ? focusInIndex : -1;\n        },\n        direction: () => 'both',\n        elementEnterAction: (el) => {\n            if (!this.auto) return;\n\n            this.shouldAnimate = true;\n            this.selectTarget(el);\n        },\n        elements: () => this.tabs,\n        isFocusableElement: (el) => !el.disabled,\n        listenerScope: () => this.tabList,\n    });\n\n    /**\n     * @private\n     */\n    public override get focusElement(): Tab | this {\n        return this.rovingTabindexController.focusInElement || this;\n    }\n\n    public scrollTabs(\n        delta: number,\n        behavior: ScrollBehavior = 'smooth'\n    ): void {\n        this.tabList?.scrollBy({\n            left: delta,\n            top: 0,\n            behavior,\n        });\n    }\n\n    public get scrollState(): Record<string, boolean> {\n        if (this.tabList) {\n            const { scrollLeft, clientWidth, scrollWidth } = this.tabList;\n            const canScrollLeft = Math.abs(scrollLeft) > 0;\n            const canScrollRight =\n                Math.ceil(Math.abs(scrollLeft)) < scrollWidth - clientWidth;\n            return {\n                canScrollLeft:\n                    this.dir === 'ltr' ? canScrollLeft : canScrollRight,\n                canScrollRight:\n                    this.dir === 'ltr' ? canScrollRight : canScrollLeft,\n            };\n        }\n        return {};\n    }\n\n    protected override manageAutoFocus(): void {\n        const tabs = [...this.children] as Tab[];\n        const tabUpdateCompletes = tabs.map((tab) => {\n            if (typeof tab.updateComplete !== 'undefined') {\n                return tab.updateComplete;\n            }\n            return Promise.resolve(true);\n        });\n        Promise.all(tabUpdateCompletes).then(() => super.manageAutoFocus());\n    }\n\n    protected managePanels({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        const panels = target.assignedElements() as TabPanel[];\n        panels.map((panel) => {\n            const { value, id } = panel;\n            const tab = this.querySelector(`[role=\"tab\"][value=\"${value}\"]`);\n            if (tab) {\n                tab.setAttribute('aria-controls', id);\n                panel.setAttribute('aria-labelledby', tab.id);\n            }\n            panel.selected = value === this.selected;\n        });\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div\n                class=${classMap({ scroll: this.enableTabsScroll })}\n                aria-label=${ifDefined(this.label ? this.label : undefined)}\n                @click=${this.onClick}\n                @keydown=${this.onKeyDown}\n                @scroll=${this.onTabsScroll}\n                id=\"list\"\n                role=\"tablist\"\n                part=\"tablist\"\n            >\n                <slot @slotchange=${this.onSlotChange}></slot>\n                <div\n                    id=\"selection-indicator\"\n                    class=${ifDefined(\n                        this.shouldAnimate ? undefined : 'first-position'\n                    )}\n                    style=${this.selectionIndicatorStyle}\n                    role=\"presentation\"\n                ></div>\n            </div>\n            <slot name=\"tab-panel\" @slotchange=${this.managePanels}></slot>\n        `;\n    }\n\n    protected override willUpdate(changes: PropertyValues): void {\n        if (!this.hasUpdated) {\n            const selectedChild = this.querySelector(\n                ':scope > [selected]'\n            ) as Tab;\n            if (selectedChild) {\n                this.selectTarget(selectedChild);\n            }\n        }\n\n        super.willUpdate(changes);\n        if (changes.has('selected')) {\n            if (this.tabs.length) {\n                this.updateCheckedState();\n            }\n            if (changes.get('selected')) {\n                const previous = this.querySelector(\n                    `[role=\"tabpanel\"][value=\"${changes.get('selected')}\"]`\n                ) as TabPanel;\n                if (previous) previous.selected = false;\n            }\n            const next = this.querySelector(\n                `[role=\"tabpanel\"][value=\"${this.selected}\"]`\n            ) as TabPanel;\n            if (next) next.selected = true;\n        }\n        if (changes.has('direction')) {\n            if (this.direction === 'horizontal') {\n                this.removeAttribute('aria-orientation');\n            } else {\n                this.setAttribute('aria-orientation', 'vertical');\n            }\n        }\n        if (changes.has('dir')) {\n            this.updateSelectionIndicator();\n        }\n        if (changes.has('disabled')) {\n            if (this.disabled) {\n                this.setAttribute('aria-disabled', 'true');\n            } else {\n                this.removeAttribute('aria-disabled');\n            }\n        }\n        if (\n            !this.shouldAnimate &&\n            typeof changes.get('shouldAnimate') !== 'undefined'\n        ) {\n            this.shouldAnimate = true;\n        }\n    }\n\n    private onTabsScroll = (): void => {\n        this.dispatchEvent(\n            new Event('sp-tabs-scroll', {\n                bubbles: true,\n                composed: true,\n            })\n        );\n    };\n\n    private onClick = (event: Event): void => {\n        if (this.disabled) {\n            return;\n        }\n        const target = event\n            .composedPath()\n            .find((el) => (el as Tab).parentElement === this) as Tab;\n        if (!target || target.disabled) {\n            return;\n        }\n        this.shouldAnimate = true;\n        this.selectTarget(target);\n    };\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        if (event.code === 'Enter' || event.code === 'Space') {\n            event.preventDefault();\n            const target = event.target as HTMLElement;\n            if (target) {\n                this.selectTarget(target);\n            }\n        }\n    };\n\n    private selectTarget(target: HTMLElement): void {\n        const value = target.getAttribute('value');\n        if (value) {\n            const selected = this.selected;\n            this.selected = value;\n            const applyDefault = this.dispatchEvent(\n                new Event('change', {\n                    cancelable: true,\n                })\n            );\n            if (!applyDefault) {\n                this.selected = selected;\n            }\n        }\n    }\n\n    private onSlotChange(): void {\n        this.tabs = this.slotEl\n            .assignedElements()\n            .filter((el) => el.getAttribute('role') === 'tab') as Tab[];\n        this.updateCheckedState();\n    }\n\n    private updateCheckedState = (): void => {\n        this.tabs.forEach((element) => {\n            element.removeAttribute('selected');\n        });\n\n        if (this.selected) {\n            const currentChecked = this.tabs.find(\n                (el) => el.value === this.selected\n            );\n\n            if (currentChecked) {\n                currentChecked.selected = true;\n            } else {\n                this.selected = '';\n            }\n        } else {\n            const firstTab = this.tabs[0];\n            if (firstTab) {\n                firstTab.setAttribute('tabindex', '0');\n            }\n        }\n\n        this.updateSelectionIndicator();\n    };\n\n    private updateSelectionIndicator = async (): Promise<void> => {\n        const selectedElement = this.tabs.find((el) => el.selected);\n        if (!selectedElement) {\n            this.selectionIndicatorStyle = ScaledIndicator.noSelectionStyle;\n            return;\n        }\n        await Promise.all([\n            selectedElement.updateComplete,\n            document.fonts ? document.fonts.ready : Promise.resolve(),\n        ]);\n        const { width, height } = selectedElement.getBoundingClientRect();\n\n        this.selectionIndicatorStyle =\n            this.direction === 'horizontal'\n                ? ScaledIndicator.transformX(selectedElement.offsetLeft, width)\n                : ScaledIndicator.transformY(selectedElement.offsetTop, height);\n    };\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        window.addEventListener('resize', this.updateSelectionIndicator);\n        if ('fonts' in document) {\n            (\n                document as unknown as {\n                    fonts: {\n                        addEventListener: (\n                            name: string,\n                            callback: () => void\n                        ) => void;\n                    };\n                }\n            ).fonts.addEventListener(\n                'loadingdone',\n                this.updateSelectionIndicator\n            );\n        }\n    }\n\n    public override disconnectedCallback(): void {\n        window.removeEventListener('resize', this.updateSelectionIndicator);\n        if ('fonts' in document) {\n            (\n                document as unknown as {\n                    fonts: {\n                        removeEventListener: (\n                            name: string,\n                            callback: () => void\n                        ) => void;\n                    };\n                }\n            ).fonts.removeEventListener(\n                'loadingdone',\n                this.updateSelectionIndicator\n            );\n        }\n        super.disconnectedCallback();\n    }\n}\n"],
  "mappings": "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",
  "names": ["css", "html", "SizedMixin", "property", "query", "classMap", "ifDefined", "IntersectionController", "ResizeController", "Focusable", "RovingTabindexController", "tabStyles", "tabSizes", "left", "width", "scale", "top", "height", "elements", "focusInIndex", "el", "index", "focusInElement", "event", "target", "element", "currentChecked", "firstTab", "selectedElement", "tabs", "tab", "delta", "behavior", "_a", "scrollLeft", "clientWidth", "scrollWidth", "canScrollLeft", "canScrollRight", "tabUpdateCompletes", "panel", "value", "id", "changes", "selectedChild", "previous", "next", "selected", "__decorateClass"]
}
