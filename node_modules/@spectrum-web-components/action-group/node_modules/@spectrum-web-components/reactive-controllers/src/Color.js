"use strict";import{TinyColor as l}from"@ctrl/tinycolor";export const extractHueAndSaturationRegExp=/^hs[v|l]a?\s?\((\d{1,3}\.?\d*?),?\s?(\d{1,3})/,replaceHueAndSaturationRegExp=/(^hs[v|l]a?\s?\()\d{1,3}\.?\d*?(,?\s?)\d{1,3}/,replaceHueRegExp=/(^hs[v|l]a?\()\d{1,3}/;const a=(h,t)=>t?h.toHexString():h.toHex();export class ColorController{constructor(t,{applyColorToState:o,extractColorFromState:e,maintains:r}){this.maintains="hue";this._hue=0;this.getColorProcesses={rgb:(t,o)=>o?t.toRgbString():t.toRgb(),prgb:(t,o)=>o?t.toPercentageRgbString():t.toPercentageRgb(),hex8:(t,o)=>o?t.toHex8String():t.toHex8(),name:t=>t.toName()||t.toRgbString(),hsl:(t,o)=>{if(this.maintains==="hue"){if(o)return t.toHslString().replace(replaceHueRegExp,`$1${this.hue}`);{const{s:e,l:r,a:s}=t.toHsl();return{h:this.hue,s:e,l:r,a:s}}}else{if(o)return t.toHslString().replace(replaceHueAndSaturationRegExp,`$1${this.hue}$2${this.saturation}`);{const{s:e,l:r,a:s}=t.toHsl();return{h:this.hue,s:e,l:r,a:s}}}},hsv:(t,o)=>{if(this.maintains==="hue"){if(o)return t.toHsvString().replace(replaceHueRegExp,`$1${this.hue}`);{const{s:e,v:r,a:s}=t.toHsv();return{h:this.hue,s:e,v:r,a:s}}}else{if(o)return t.toHsvString().replace(replaceHueAndSaturationRegExp,`$1${this.hue}$2${this.saturation}`);{const{s:e,v:r,a:s}=t.toHsv();return{h:this.hue,s:e,v:r,a:s}}}},hex:a,hex3:a,hex4:a,hex6:a};this._color=new l({h:0,s:1,v:1});this._previousColor=new l({h:0,s:1,v:1});this._format={format:"",isString:!1};this.host=t,this.applyColorToState=o,this.extractColorFromState=e,this.maintains=r||this.maintains}setColorProcess(t,o,e,r){this.maintains==="hue"?this.setColorMaintainHue(t,o,e,r):this.maintains==="saturation"&&this.setColorMaintainSaturation(t,o,e,r)}setColorMaintainHue(t,o,e,r){const{h:s,s:i,v:u}=this._color.toHsv();let c;if(r&&e.startsWith("hs")){const n=extractHueAndSaturationRegExp.exec(o);if(n!==null){const[,g]=n;c=Number(g)}}else if(!r&&e.startsWith("hs")){const n=t.originalInput;c=Object.values(n)[0]}this.hue=c||s,this.applyColorToState({h:s,s:i,v:u})}setColorMaintainSaturation(t,o,e,r){if(r&&e.startsWith("hs")){const s=extractHueAndSaturationRegExp.exec(o);if(s!==null){const[,i,u]=s;this.hue=Number(i),this.saturation=Number(u)}}else if(!r&&e.startsWith("hs")){const s=t.originalInput,i=Object.values(s);this.hue=i[0],this.saturation=i[1]}else{const{h:s}=t.toHsv();this.hue=s}this.applyColorToState(t.toHsv())}applyColorFromState(){this._color=new l(this.extractColorFromState(this))}get hue(){return this._hue}set hue(t){const o=Math.min(360,Math.max(0,t));if(o===this.hue)return;const e=this.hue,{s:r,v:s}=this._color.toHsv();this._color=new l({h:o,s:r,v:s}),this._hue=o,this.host.requestUpdate("hue",e)}get value(){return this.color}get color(){return this.getColorProcesses[this._format.format||"hex"](this._color,this._format.isString)}set color(t){if(t===this.color)return;const o=this._color;this._color=new l(t);const e=this._color.format;let r=typeof t=="string"||t instanceof String;e.startsWith("hex")&&(r=t.startsWith("#")),this._format={format:e,isString:r},this.setColorProcess(this._color,t,e,r),this.host.requestUpdate("color",o)}getColor(t){const o={hsl:"toHsl"};return this._color[o[t]]()}setColor(t){this._color=t;const o=typeof this._color.originalInput=="string"||this._color.originalInput instanceof String;this.setColorProcess(this._color,t,this._color.format,o)}getHslString(){return this._color.toHslString()}savePreviousColor(){this._previousColor=this._color.clone()}restorePreviousColor(){this.setColor(this._previousColor)}}
//# sourceMappingURL=Color.js.map
