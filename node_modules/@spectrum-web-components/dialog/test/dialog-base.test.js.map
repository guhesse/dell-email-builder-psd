{
  "version": 3,
  "sources": ["dialog-base.test.ts"],
  "sourcesContent": ["/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n} from '@open-wc/testing';\nimport { TemplateResult } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport '@spectrum-web-components/dialog/sp-dialog-base.js';\nimport { Theme } from '@spectrum-web-components/theme';\nimport { OverlayTrigger } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { alertDestructive } from '../stories/dialog.stories.js';\nimport { Button } from '@spectrum-web-components/button/src/Button.js';\nimport { DialogBase } from '@spectrum-web-components/dialog';\n\nasync function styledFixture<T extends Element>(\n    story: TemplateResult\n): Promise<T> {\n    const test = await fixture<Theme>(html`\n        <sp-theme theme=\"spectrum\" scale=\"medium\" color=\"dark\">\n            ${story}\n        </sp-theme>\n    `);\n    return test.children[0] as T;\n}\n\nconst overlayTrigger = (story: () => TemplateResult): TemplateResult => html`\n    <overlay-trigger type=\"modal\" placement=\"none\">\n        <sp-button slot=\"trigger\" variant=\"primary\">Toggle Dialog</sp-button>\n        ${story()}\n    </overlay-trigger>\n`;\n\ndescribe('dialog base', () => {\n    it('does not close by default with interacting with buttons', async () => {\n        const el = await styledFixture<OverlayTrigger>(\n            overlayTrigger(\n                () => html`\n                    <sp-dialog-base underlay slot=\"click-content\">\n                        ${alertDestructive()}\n                    </sp-dialog-base>\n                `\n            )\n        );\n        await elementUpdated(el);\n\n        const dialog = el.querySelector('sp-dialog-base') as DialogBase;\n        await elementUpdated(dialog);\n        const secondaryButton = el.querySelector(\n            '[variant=\"secondary\"]'\n        ) as Button;\n        const negativeButton = el.querySelector(\n            '[variant=\"negative\"]'\n        ) as Button;\n\n        expect(el.open).to.be.undefined;\n        expect(dialog.open).to.be.false;\n        expect(dialog.parentElement?.localName).to.equal('overlay-trigger');\n        await nextFrame();\n        const opened = oneEvent(el, 'sp-opened');\n        el.open = 'click';\n        await opened;\n        await nextFrame();\n\n        expect(dialog.open).to.be.true;\n        expect(el.open).to.be.equal('click');\n        expect(dialog.parentElement?.localName).to.equal('active-overlay');\n\n        secondaryButton.click();\n\n        expect(el.open).to.be.equal('click');\n        expect(dialog.parentElement?.localName).to.equal('active-overlay');\n\n        negativeButton.click();\n\n        expect(el.open).to.be.equal('click');\n        expect(dialog.parentElement?.localName).to.equal('active-overlay');\n        const closed = oneEvent(el, 'sp-closed');\n        el.open = undefined;\n        await closed;\n        await elementUpdated(el);\n\n        expect(dialog.open).to.be.false;\n        expect(el.open).to.be.undefined;\n        expect(dialog.parentElement?.localName).to.equal('overlay-trigger');\n    });\n    it('does not close by default with interacting with buttons when recycled', async () => {\n        const el = await styledFixture<OverlayTrigger>(\n            overlayTrigger(\n                () => html`\n                    <sp-dialog-base underlay slot=\"click-content\">\n                        ${alertDestructive()}\n                    </sp-dialog-base>\n                `\n            )\n        );\n        await elementUpdated(el);\n\n        const dialog = el.querySelector('sp-dialog-base') as DialogBase;\n        await elementUpdated(dialog);\n        const secondaryButton = el.querySelector(\n            '[variant=\"secondary\"]'\n        ) as Button;\n        const negativeButton = el.querySelector(\n            '[variant=\"negative\"]'\n        ) as Button;\n\n        expect(el.open).to.be.undefined;\n        expect(dialog.open).to.be.false;\n        expect(dialog.parentElement?.localName).to.equal('overlay-trigger');\n        await nextFrame();\n        const opened = oneEvent(el, 'sp-opened');\n        el.open = 'click';\n        await opened;\n        await nextFrame();\n\n        expect(dialog.open).to.be.true;\n        expect(el.open).to.be.equal('click');\n        expect(dialog.parentElement?.localName).to.equal('active-overlay');\n\n        secondaryButton.click();\n\n        expect(el.open).to.be.equal('click');\n        expect(dialog.parentElement?.localName).to.equal('active-overlay');\n\n        negativeButton.click();\n\n        expect(el.open).to.be.equal('click');\n        expect(dialog.parentElement?.localName).to.equal('active-overlay');\n        const closed = oneEvent(el, 'sp-closed');\n        dialog.open = false;\n        await closed;\n        await elementUpdated(el);\n\n        expect(dialog.open).to.be.false;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
