var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "@spectrum-web-components/base";
import {
  property,
  query
} from "@spectrum-web-components/base/src/decorators.js";
import { Focusable } from "@spectrum-web-components/shared/src/focusable.js";
export class CheckboxBase extends Focusable {
  constructor() {
    super(...arguments);
    this.checked = false;
    this.readonly = false;
  }
  get focusElement() {
    return this.inputElement;
  }
  handleChange() {
    if (this.readonly) {
      this.inputElement.checked = this.checked;
      return;
    }
    this.checked = this.inputElement.checked;
    const changeEvent = new CustomEvent("change", {
      bubbles: true,
      cancelable: true,
      composed: true
    });
    const applyDefault = this.dispatchEvent(changeEvent);
    if (!applyDefault) {
      this.checked = !this.inputElement.checked;
      this.inputElement.checked = this.checked;
    }
  }
  render() {
    return html`
            <input
                id="input"
                aria-labelledby="label"
                type="checkbox"
                .checked=${this.checked}
                @change=${this.handleChange}
            />
        `;
  }
}
__decorateClass([
  property({ type: Boolean, reflect: true })
], CheckboxBase.prototype, "checked", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], CheckboxBase.prototype, "readonly", 2);
__decorateClass([
  query("#input")
], CheckboxBase.prototype, "inputElement", 2);
//# sourceMappingURL=CheckboxBase.dev.js.map
