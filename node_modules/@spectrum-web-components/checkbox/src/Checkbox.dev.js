var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import {
  html,
  SizedMixin
} from "@spectrum-web-components/base";
import { property } from "@spectrum-web-components/base/src/decorators.js";
import { CheckboxBase } from "./CheckboxBase.dev.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-checkmark75.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-checkmark200.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-checkmark300.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-dash75.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-dash100.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-dash200.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-dash300.js";
import checkboxStyles from "./checkbox.css.js";
import checkmarkSmallStyles from "@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js";
import dashSmallStyles from "@spectrum-web-components/icon/src/spectrum-icon-dash.css.js";
const checkmarkIcon = {
  s: html`
        <sp-icon-checkmark75
            id="checkmark"
            class="spectrum-UIIcon-Checkmark75"
        ></sp-icon-checkmark75>
    `,
  m: html`
        <sp-icon-checkmark100
            id="checkmark"
            class="spectrum-UIIcon-Checkmark100"
        ></sp-icon-checkmark100>
    `,
  l: html`
        <sp-icon-checkmark200
            id="checkmark"
            class="spectrum-UIIcon-Checkmark200"
        ></sp-icon-checkmark200>
    `,
  xl: html`
        <sp-icon-checkmark300
            id="checkmark"
            class="spectrum-UIIcon-Checkmark300"
        ></sp-icon-checkmark300>
    `
};
const dashIcon = {
  s: html`
        <sp-icon-dash75
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash75"
        ></sp-icon-dash75>
    `,
  m: html`
        <sp-icon-dash100
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash100"
        ></sp-icon-dash100>
    `,
  l: html`
        <sp-icon-dash200
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash200"
        ></sp-icon-dash200>
    `,
  xl: html`
        <sp-icon-dash300
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash300"
        ></sp-icon-dash300>
    `
};
export class Checkbox extends SizedMixin(CheckboxBase) {
  constructor() {
    super(...arguments);
    this.indeterminate = false;
    this.invalid = false;
    this.emphasized = false;
  }
  static get styles() {
    return [checkboxStyles, checkmarkSmallStyles, dashSmallStyles];
  }
  render() {
    return html`
            ${super.render()}
            <span id="box">
                ${checkmarkIcon[this.size]}
                ${dashIcon[this.size]}
            </span>
            <label id="label"><slot></slot></label>
        `;
  }
  updated(changes) {
    super.updated(changes);
    if (changes.has("invalid")) {
      if (this.invalid) {
        this.inputElement.setAttribute("aria-invalid", "true");
      } else {
        this.inputElement.removeAttribute("aria-invalid");
      }
    }
    if (changes.has("indeterminate")) {
      if (this.indeterminate) {
        this.inputElement.setAttribute("aria-checked", "mixed");
      } else {
        this.inputElement.removeAttribute("aria-checked");
      }
    }
  }
}
__decorateClass([
  property({ type: Boolean, reflect: true })
], Checkbox.prototype, "indeterminate", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], Checkbox.prototype, "invalid", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], Checkbox.prototype, "emphasized", 2);
//# sourceMappingURL=Checkbox.dev.js.map
