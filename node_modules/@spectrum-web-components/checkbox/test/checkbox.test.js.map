{
  "version": 3,
  "sources": ["checkbox.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport '@spectrum-web-components/checkbox/sp-checkbox.js';\nimport { Checkbox } from '../';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    triggerBlurFor,\n    waitUntil,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/shared/src/focus-visible.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\nfunction inputForCheckbox(checkbox: Checkbox): HTMLInputElement {\n    if (!checkbox.shadowRoot) throw new Error('No shadowRoot');\n    return checkbox.shadowRoot.querySelector('#input') as HTMLInputElement;\n}\n\nfunction labelNodeForCheckbox(checkbox: Checkbox): Node {\n    if (!checkbox.shadowRoot) throw new Error('No shadowRoot');\n    const slotEl = checkbox.shadowRoot.querySelector('slot');\n    if (!slotEl) {\n        throw new Error('Failed to find slot in shadowRoot');\n    }\n    return slotEl.assignedNodes()[0];\n}\ndescribe('Checkbox', () => {\n    let testFixture: HTMLDivElement;\n\n    beforeEach(async () => {\n        testFixture = await fixture<HTMLDivElement>(\n            html`\n                <div>\n                    <div id=\"test-checkbox\">\n                        <sp-checkbox id=\"checkbox0\" tabindex=\"5\">\n                            Component\n                        </sp-checkbox>\n                        <sp-checkbox id=\"checkbox1\" tabindex=\"2\" checked>\n                            Check 1\n                        </sp-checkbox>\n                        <sp-checkbox id=\"checkbox2\" tabindex=\"3\" disabled>\n                            Check 2\n                        </sp-checkbox>\n                        <sp-checkbox id=\"checkbox3\" tabindex=\"1\" autofocus>\n                            Check 3\n                        </sp-checkbox>\n                        <sp-checkbox id=\"checkbox4\" tabindex=\"0\">\n                            Check 4\n                        </sp-checkbox>\n                        <sp-checkbox id=\"checkbox5\" tabindex=\"-1\">\n                            Check 5\n                        </sp-checkbox>\n                    </div>\n                </div>\n            `\n        );\n    });\n\n    it('loads', async () => {\n        const el = testFixture.querySelector('sp-checkbox') as Checkbox;\n        expect(el).to.not.equal(undefined);\n        const textNode = labelNodeForCheckbox(el);\n        const content = (textNode.textContent || '').trim();\n        expect(content).to.equal('Component');\n    });\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Checkbox>(\n                html`\n                    <sp-checkbox>Not Checked</sp-checkbox>\n                `\n            )\n    );\n\n    it('loads default checkbox accessibly', async () => {\n        const el = await fixture<Checkbox>(\n            html`\n                <sp-checkbox>Not Checked</sp-checkbox>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('loads `checked` checkbox accessibly', async () => {\n        const el = await fixture<Checkbox>(\n            html`\n                <sp-checkbox checked>Checked</sp-checkbox>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('is `invalid` checkbox accessibly', async () => {\n        const el = await fixture<Checkbox>(\n            html`\n                <sp-checkbox invalid>Invalid Checked</sp-checkbox>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('autofocuses', async () => {\n        const autoElement = testFixture.querySelector(\n            'sp-checkbox[autofocus]'\n        ) as Checkbox;\n\n        expect(autoElement).to.exist;\n        await waitUntil(\n            () => document.activeElement === autoElement,\n            'Autofocused'\n        );\n\n        await triggerBlurFor(autoElement);\n\n        expect(document.activeElement).to.not.equal(autoElement);\n    });\n\n    it('`click()`ing host clicks `focusElement`', async () => {\n        const el = await fixture<Checkbox>(\n            html`\n                <sp-checkbox checked autofocus>Checked</sp-checkbox>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(el.checked, 'checked initially').to.be.true;\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(el.checked, 'unchecked').to.be.false;\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(el.checked, 'checked again').to.be.true;\n    });\n\n    it('respects checked attribute', () => {\n        let el = testFixture.querySelector('#checkbox0') as Checkbox;\n        expect(el.checked).to.be.false;\n\n        el = testFixture.querySelector('#checkbox1') as Checkbox;\n        expect(el.checked).to.be.true;\n    });\n\n    it('handles click events', async () => {\n        const el = testFixture.querySelector('#checkbox1') as Checkbox;\n        expect(el.checked).to.be.true;\n\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.false;\n    });\n\n    it('can have `change` events cancelled', async () => {\n        const el = testFixture.querySelector('#checkbox0') as Checkbox;\n        await elementUpdated(el);\n        expect(el.checked).to.be.false;\n\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n\n        el.addEventListener('change', (event: Event) => event.preventDefault());\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n    });\n\n    it('maintains its value when [readonly]', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox id=\"checkbox0\" checked readonly>Component</sp-checkbox>\n        `);\n        expect(el.checked).to.be.true;\n\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
