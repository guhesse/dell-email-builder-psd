import"@spectrum-web-components/checkbox/sp-checkbox.js";import{elementUpdated as o,expect as c,fixture as a,html as i,triggerBlurFor as n,waitUntil as b}from"@open-wc/testing";import"@spectrum-web-components/shared/src/focus-visible.js";import{testForLitDevWarnings as d}from"../../../test/testing-helpers.js";function s(t){if(!t.shadowRoot)throw new Error("No shadowRoot");return t.shadowRoot.querySelector("#input")}function l(t){if(!t.shadowRoot)throw new Error("No shadowRoot");const e=t.shadowRoot.querySelector("slot");if(!e)throw new Error("Failed to find slot in shadowRoot");return e.assignedNodes()[0]}describe("Checkbox",()=>{let t;beforeEach(async()=>{t=await a(i`
                <div>
                    <div id="test-checkbox">
                        <sp-checkbox id="checkbox0" tabindex="5">
                            Component
                        </sp-checkbox>
                        <sp-checkbox id="checkbox1" tabindex="2" checked>
                            Check 1
                        </sp-checkbox>
                        <sp-checkbox id="checkbox2" tabindex="3" disabled>
                            Check 2
                        </sp-checkbox>
                        <sp-checkbox id="checkbox3" tabindex="1" autofocus>
                            Check 3
                        </sp-checkbox>
                        <sp-checkbox id="checkbox4" tabindex="0">
                            Check 4
                        </sp-checkbox>
                        <sp-checkbox id="checkbox5" tabindex="-1">
                            Check 5
                        </sp-checkbox>
                    </div>
                </div>
            `)}),it("loads",async()=>{const e=t.querySelector("sp-checkbox");c(e).to.not.equal(void 0);const k=(l(e).textContent||"").trim();c(k).to.equal("Component")}),d(async()=>await a(i`
                    <sp-checkbox>Not Checked</sp-checkbox>
                `)),it("loads default checkbox accessibly",async()=>{const e=await a(i`
                <sp-checkbox>Not Checked</sp-checkbox>
            `);await o(e),await c(e).to.be.accessible()}),it("loads `checked` checkbox accessibly",async()=>{const e=await a(i`
                <sp-checkbox checked>Checked</sp-checkbox>
            `);await o(e),await c(e).to.be.accessible()}),it("is `invalid` checkbox accessibly",async()=>{const e=await a(i`
                <sp-checkbox invalid>Invalid Checked</sp-checkbox>
            `);await o(e),await c(e).to.be.accessible()}),it("autofocuses",async()=>{const e=t.querySelector("sp-checkbox[autofocus]");c(e).to.exist,await b(()=>document.activeElement===e,"Autofocused"),await n(e),c(document.activeElement).to.not.equal(e)}),it("`click()`ing host clicks `focusElement`",async()=>{const e=await a(i`
                <sp-checkbox checked autofocus>Checked</sp-checkbox>
            `);await o(e),c(e.checked,"checked initially").to.be.true,e.click(),await o(e),c(e.checked,"unchecked").to.be.false,e.click(),await o(e),c(e.checked,"checked again").to.be.true}),it("respects checked attribute",()=>{let e=t.querySelector("#checkbox0");c(e.checked).to.be.false,e=t.querySelector("#checkbox1"),c(e.checked).to.be.true}),it("handles click events",async()=>{const e=t.querySelector("#checkbox1");c(e.checked).to.be.true,s(e).click(),await o(e),c(e.checked).to.be.false}),it("can have `change` events cancelled",async()=>{const e=t.querySelector("#checkbox0");await o(e),c(e.checked).to.be.false,s(e).click(),await o(e),c(e.checked).to.be.true,e.addEventListener("change",h=>h.preventDefault()),s(e).click(),await o(e),c(e.checked).to.be.true}),it("maintains its value when [readonly]",async()=>{const e=await a(i`
            <sp-checkbox id="checkbox0" checked readonly>Component</sp-checkbox>
        `);c(e.checked).to.be.true,s(e).click(),await o(e),c(e.checked).to.be.true})});
//# sourceMappingURL=checkbox.test.js.map
